<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring 核心编程思想（五）：Spring 依赖查找</title>
    <link href="/2023/05/18/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2023/05/18/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-IoC-依赖查找"><a href="#1-Spring-IoC-依赖查找" class="headerlink" title="1. Spring IoC 依赖查找"></a>1. Spring IoC 依赖查找</h2><table><thead><tr><th>内容</th></tr></thead><tbody><tr><td>依赖查找的今世前生</td></tr><tr><td>单一类型依赖查找</td></tr><tr><td>集合类型依赖查找</td></tr><tr><td>层次性依赖查找</td></tr><tr><td>延迟依赖查找</td></tr><tr><td>安全依赖查找</td></tr><tr><td>内建可查找的依赖</td></tr><tr><td>依赖查找中的经典异常</td></tr><tr><td>面试题精选</td></tr></tbody></table><h2 id="2-依赖查找的前世今生"><a href="#2-依赖查找的前世今生" class="headerlink" title="2. 依赖查找的前世今生"></a>2. 依赖查找的前世今生</h2><ol><li>单一类型依赖查找</li></ol><ul><li><p>JNDI - javax.naming.Context#lookup(javax.naming.Name)</p></li><li><p>JavaBeans - java.beans.beancontext.BeanContext</p></li></ul><ol start="2"><li>集合类型依赖查找</li></ol><ul><li>java.beans.beancontext.BeanContext</li></ul><ol start="3"><li>层次性依赖查找</li></ol><ul><li>java.beans.beancontext.BeanContext</li></ul><p>It is desirable to both provide a logical, traversable, hierarchyof JavaBeans, and further to provide a general mechanism whereby an object instantiating an arbitrary JavaBean can offer that JavaBean a variety of services, or interpose itself between the uniderlying system service and the JavaBean, in a conventional fashion.</p><p>这段文字主要讲述了在Java编程中，提供一个有逻辑和可遍历的 JavaBean 层次结构的需求，同时还需要提供一种通用机制，使得实例化JavaBean对象的对象可以向其提供各种服务或者在系统服务和JavaBean之间插入自己。通俗的说，就是需要建立一个 JavaBean 的层次结构，并提供一种机制，以便在 JavaBean 使用过程中可以提供服务。</p><p>具体来说，要实现这个需求，需要考虑以下几个方面：</p><ol><li><p>JavaBean 的层次结构：可以使用组合模式来实现JavaBean的逻辑、可遍历的层次结构，以便可以按照树形结构来查找和访问JavaBean。</p></li><li><p>服务提供机制：可以使用反射机制和注入等技术来实现服务提供机制，使得可以在JavaBean实例化时向其注入服务对象，并在需要时调用服务对象的方法来为JavaBean提供服务。</p></li><li><p>中介模式：可以使用代理或装饰器等模式来实现中介模式，使得JavaBean可以通过中介对象来访问系统服务或者其他JavaBean。通过中介对象，可以在系统服务和JavaBean之间添加额外的逻辑处理。</p></li></ol><p>综上所述，建立一个 JavaBean 的层次结构并提供服务机制是Java编程中常见的需求，可以通过组合模式、反射机制、注入、代理或装饰器等技术来实现。</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/19/7f7b7f4337b8091c.png" alt="javabeans"></p><h2 id="3-单一依赖查找"><a href="#3-单一依赖查找" class="headerlink" title="3. 单一依赖查找"></a>3. 单一依赖查找</h2><p>单一类型依赖查找接口-BeanFactory</p><ol><li>根据 Bean 名称查找</li></ol><ul><li><p>getBean(String)</p></li><li><p>Spring 2.5 覆盖默认参数:getBean(String,Object…)</p></li></ul><ol start="2"><li>根据 Bean 类型查找</li></ol><ul><li><p>Bean 实时查找</p><ul><li><p>Spring 3.0 getBean(Class)</p></li><li><p>Spring 4.1 覆盖默认参数:getBean(Class,Object…)</p></li></ul></li></ul><p>**tips:**关于覆盖参数这个方法的调用，建议大家不需要去掌握，也不需要去运用，因为这个非常危险。因为这个接口会覆盖掉默认的一些参数，同时我们会看到 API 里面有这么一个描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Return an instance, which may be shared or independent, of the specified bean.</span><br><span class="hljs-comment"> * &lt;p&gt;Allows for specifying explicit constructor arguments / factory method arguments,</span><br><span class="hljs-comment"> * overriding the specified default arguments (if any) in the bean definition.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> name the name of the bean to retrieve</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args arguments to use when creating a bean instance using explicit arguments</span><br><span class="hljs-comment"> * (only applied when creating a new instance as opposed to retrieving an existing one)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> an instance of the bean</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NoSuchBeanDefinitionException if there is no such bean definition</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> BeanDefinitionStoreException if arguments have been given but</span><br><span class="hljs-comment"> * the affected bean isn&#x27;t a prototype</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> BeansException if the bean could not be created</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">Object <span class="hljs-title">getBean</span><span class="hljs-params">(String name, Object... args)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br></code></pre></td></tr></table></figure><p>实例可能是 shared 可能是 independent，这个 share d就是指的单例，那么 independent 主要是原生。这里就会告诉你一个不好的特点，如果当你是 shared 的话，你每调一次就会覆盖它的方法，这种方式实际上是有点不可取的。</p><ul><li>Spring 5.1 Bean 延迟查找<ul><li>getBeanProvider(Class)</li><li>getBeanProvider(ResolvableType)</li></ul></li></ul><p>BeanFactory:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;T&gt; <span class="hljs-function">ObjectProvider&lt;T&gt; <span class="hljs-title">getBeanProvider</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span></span>;<br></code></pre></td></tr></table></figure><p>ObjectProvider:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ObjectProvider</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">ObjectFactory</span>&lt;<span class="hljs-title">T</span>&gt;, <span class="hljs-title">Iterable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;...<br></code></pre></td></tr></table></figure><p>OjbectProvider 是继承了 ObjectFactory，ObjectFactory 它就通过某种参数关联类型去关联一个特性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;通过&#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.ObjectProvider&#125;进行依赖查找&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectProviderDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(ObjectProviderDemo.class);<br>        applicationContext.refresh();<br><br>        lookupByObjectProvider(applicationContext);<br><br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">// 方法名就是 Bean 名称 = &quot;hello&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupByObjectProvider</span><span class="hljs-params">(AnnotationConfigApplicationContext applicationContext)</span> </span>&#123;<br><br>        ObjectProvider&lt;String&gt; beanProvider = applicationContext.getBeanProvider(String.class);<br>        String object = beanProvider.getObject();<br>        System.out.println(object);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>根据 Bean 名称 + 类型查找:getBean(String,Class)</li></ol><h2 id="4-集合类型依赖查找"><a href="#4-集合类型依赖查找" class="headerlink" title="4. 集合类型依赖查找"></a>4. 集合类型依赖查找</h2><p>集合类型依赖查找接口-ListableBeanFactory</p><ol><li>根据 Bean 类型查找</li></ol><ul><li><p>获取同类型 Bean 名称列表</p><ul><li>getBeanNamesForType(Class)</li><li>Spring 4.2 getBeanNamesForType(ResolvableType)</li></ul></li><li><p>获取同类型 Bean 实例列表</p><ul><li>getBeansOfType(Class)以及重载方法</li></ul></li></ul><ol start="2"><li>通过注解类型查找</li></ol><ul><li><p>Spring 3.0 获取标注类型 Bean 名称列表</p><ul><li>getBeanNamesForAnnotation(Class&lt;? extends Annotation&gt;)</li></ul></li><li><p>Spring 3.0 获取标注类型 Bean 实例列表</p><ul><li>getBeansWithAnnotation(Class&lt;? extends Annotation&gt;)</li></ul></li><li><p>Spring 3.0 获取指定名称+标注类型 Bean 实例</p><ul><li>findAnnotationOnBean(String,Ciass&lt;? extends Annotation&gt;)</li></ul></li></ul><h2 id="5-层次性依赖查找"><a href="#5-层次性依赖查找" class="headerlink" title="5. 层次性依赖查找"></a>5. 层次性依赖查找</h2><p>层次性依赖查找接口-HierarchicalBeanFactory</p><ol><li><p>双亲 BeanFactory:getParentBeanFactory()</p></li><li><p>层次性查找</p></li></ol><ul><li><p>根据 Bean 名称查找</p><ul><li>基于 containsLocalBean 方法实现</li></ul></li><li><p>根据Bean类型查找实例列表</p><ul><li>单一类型:BeanFactoryUtils#beanOfType</li><li>集合类型:BeanFactoryUtils#beansOfTypelncludingAncestors</li></ul></li><li><p>根据 Java 注解查找名称列表</p><ul><li>BeanFactoryUtils#beanNamesForTypelncludingAncestors</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 创建  容器</span><br>    AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>    <span class="hljs-comment">// 将当前类 AnnotationApplicationContextAsIoCContainerDemo 作为配置类（Configuration Class）</span><br>    applicationContext.register(AnnotationApplicationContextAsIoCContainerDemo.class);<br>    <span class="hljs-comment">// 启动应用上下文</span><br>    applicationContext.refresh();<br><br>    <span class="hljs-comment">// 1. 获取 HierarchicalBeanFactory &lt;- ConfigurableBeanFactory &lt;- ConfigurableListableBeanFactory</span><br>    ConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();<br>    System.out.println(<span class="hljs-string">&quot;获取 BeanFactory 的 Parent BeanFactory : &quot;</span> + beanFactory.getParentBeanFactory());<br>    <span class="hljs-comment">// 2. 设置 Parent BeanFactory</span><br>    HierarchicalBeanFactory parentBeanFactory = crateParentBeanFactory();<br>    beanFactory.setParentBeanFactory(parentBeanFactory);<br>    System.out.println(<span class="hljs-string">&quot;获取 BeanFactory 的 Parent BeanFactory : &quot;</span> + beanFactory.getParentBeanFactory());<br><br>    displayLocalBean(beanFactory,<span class="hljs-string">&quot;user&quot;</span>);<br>    displayLocalBean(parentBeanFactory,<span class="hljs-string">&quot;user&quot;</span>);<br><br>    displayContainsBean(beanFactory,<span class="hljs-string">&quot;user&quot;</span>);<br>    displayContainsBean(parentBeanFactory,<span class="hljs-string">&quot;user&quot;</span>);<br>    <span class="hljs-comment">// 关闭应用上下文</span><br>    applicationContext.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayContainsBean</span><span class="hljs-params">(HierarchicalBeanFactory beanFactory,String beanName)</span></span>&#123;<br><br>    System.out.printf(<span class="hljs-string">&quot;当前 BeanFactory[%s] 是否包含 bean[name : %s]: %s\n&quot;</span>, beanFactory, beanName,<br>            containsBean(beanFactory,beanName));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">containsBean</span><span class="hljs-params">(HierarchicalBeanFactory beanFactory,String beanName)</span></span>&#123;<br>    BeanFactory parentBeanFactory = beanFactory.getParentBeanFactory();<br>    <span class="hljs-keyword">if</span> (parentBeanFactory <span class="hljs-keyword">instanceof</span> HierarchicalBeanFactory) &#123;<br>        HierarchicalBeanFactory parentHierarchicalBeanFactory = HierarchicalBeanFactory.class.cast(parentBeanFactory);<br>        <span class="hljs-keyword">if</span> (containsBean(parentHierarchicalBeanFactory,beanName)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> beanFactory.containsLocalBean(beanName);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayLocalBean</span><span class="hljs-params">(HierarchicalBeanFactory beanFactory, String beanName)</span> </span>&#123;<br><br>    System.out.printf(<span class="hljs-string">&quot;当前 BeanFactory[%s] 是否包含 bean[name : %s]: %s\n&quot;</span>, beanFactory, beanName,<br>            beanFactory.containsLocalBean(beanName));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ConfigurableListableBeanFactory <span class="hljs-title">crateParentBeanFactory</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建 BeanFactory 容器</span><br>    DefaultListableBeanFactory beanFactory = <span class="hljs-keyword">new</span> DefaultListableBeanFactory();<br>    XmlBeanDefinitionReader reader = <span class="hljs-keyword">new</span> XmlBeanDefinitionReader(beanFactory);<br>    <span class="hljs-comment">// XML 配置文件 classpath 路径</span><br>    String location = <span class="hljs-string">&quot;META-INF/dependency-injection-context.xml&quot;</span>;<br>    <span class="hljs-comment">// 加载配置，返回加载到的 Bean 个数</span><br>    reader.loadBeanDefinitions(location);<br>    <span class="hljs-keyword">return</span> beanFactory;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-延迟依赖查找"><a href="#6-延迟依赖查找" class="headerlink" title="6. 延迟依赖查找"></a>6. 延迟依赖查找</h2><p>Bean延迟依赖查找接口</p><ul><li><p>org.springframework.beans.factory.ObjectFactory</p></li><li><p>org.springframework.beans.factory.ObjectProvider</p><ul><li>Spring5 对 Java8 特性扩展<ul><li>函数式接口<ul><li>getIfAvailable(Supplier)</li><li>ifAvailable(Consumer)</li></ul></li><li>Stream 扩展-stream()</li></ul></li></ul></li></ul><h2 id="12-面试题"><a href="#12-面试题" class="headerlink" title="12. 面试题"></a>12. 面试题</h2><p><strong><font color="green" size="2">沙雕面试题</font></strong>-什么是 Spring IoC 容器？</p><p><strong><font color="orange" size="2">996面试题</font></strong>-BeanFactory 和 FactoryBean 的区别？</p><p><strong><font color="red" size="2">劝退面试题</font></strong>-Spring IoC 容器启动时做了哪些准备?？</p><p><strong>本节完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring 核心编程思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 核心编程思想（四）：Spring Bean 基础</title>
    <link href="/2023/05/09/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2023/05/09/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-Bean-基础"><a href="#1-Spring-Bean-基础" class="headerlink" title="1. Spring Bean 基础"></a>1. Spring Bean 基础</h2><table><thead><tr><th>内容</th></tr></thead><tbody><tr><td>定义 Spring Bean</td></tr><tr><td>BeanDefinition 元信息</td></tr><tr><td>命名 Spring Bean</td></tr><tr><td>Spring Bean 的别名</td></tr><tr><td>注册 Spring Bean</td></tr><tr><td>实例化 Spring Bean</td></tr><tr><td>初始化 Spring Bean</td></tr><tr><td>延迟初始化 Spring Bean</td></tr><tr><td>销毁 Spring Bean</td></tr><tr><td>垃圾回收 Spring Bean</td></tr><tr><td>面试题精选</td></tr></tbody></table><h2 id="2-定义-Spring-Bean"><a href="#2-定义-Spring-Bean" class="headerlink" title="2. 定义 Spring Bean"></a>2. 定义 Spring Bean</h2><ul><li>什么是 BeanDefinition?</li><li>BeanDefinition 是 Spring Framework 中定义 Bean 的配置元信息接口,包含:<ul><li>Bean 的类名</li><li>Bean 行为配置元素,如作用域、自动绑定的模式、生命周期回调等</li><li>其他 Bean 引用,又可称作合作者(Collaborators)或者依赖(Dependencies)</li><li>配置设置,比如 Bean 属性(Properties)</li></ul></li></ul><h2 id="3-BeanDefinition-元信息"><a href="#3-BeanDefinition-元信息" class="headerlink" title="3. BeanDefinition 元信息"></a>3. BeanDefinition 元信息</h2><ol><li>BeanDefinition 元信息</li></ol><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Class</td><td>Bean 全类名，必须是具体类，不能用抽象类或接口</td></tr><tr><td>Name</td><td>Bean 的名称或者 ID</td></tr><tr><td>Scope</td><td>Bean 的作用域（如：singleton、prototype 等）</td></tr><tr><td>Constructor arguments</td><td>Bean 构造器参数（用于依赖注入）</td></tr><tr><td>Properties</td><td>Bean 属性设置（用于依赖注入）</td></tr><tr><td>Autowiring mode</td><td>Bean 自动绑定模式（如：通过名称 byName）</td></tr><tr><td>Lazy initialization mode</td><td>Bean 延迟初始化模式（延迟和非延迟），默认非延迟</td></tr><tr><td>Initialization method</td><td>Bean 初始化回调方法名称</td></tr><tr><td>Destruction method</td><td>Bean 销毁回调方法名称</td></tr></tbody></table><ol start="2"><li><p>BeanDefinition 构建</p><ul><li><p>通过 BeanDefinitionBuilder</p></li><li><p>通过 AbstractBeanDefinition 以及派生类</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> thinking.in.spring.spring.bean.definition;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.MutablePropertyValues;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.GenericBeanDefinition;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;&#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.config.BeanDefinition&#125;构建示例&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanDefinitionCreationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 1. 通过 BeanDefinitionBuilder 构建</span><br>        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(User.class);<br>        <span class="hljs-comment">// 通过属性删除</span><br>        <span class="hljs-comment">// beanDefinitionBuilder.addPropertyValue(&quot;id&quot;, 1l);</span><br>        <span class="hljs-comment">// beanDefinitionBuilder.addPropertyValue(&quot;name&quot;, &quot;rose&quot;);</span><br>        <span class="hljs-comment">// beanDefinitionBuilder.addPropertyValue(&quot;age&quot;, 16);</span><br>        beanDefinitionBuilder<br>                .addPropertyValue(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">1l</span>)<br>                .addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;rose&quot;</span>)<br>                .addPropertyValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">16</span>);<br>        <span class="hljs-comment">// 获取 BeanDefinition 实例</span><br>        BeanDefinition beanDefinition = beanDefinitionBuilder.getBeanDefinition();<br>        <span class="hljs-comment">// BeanDefinition 并非 Bean 的终态，可以自定义修改</span><br><br>        <span class="hljs-comment">// 2. 通过 AbstractBeanDefinition 以及派生类</span><br>        <span class="hljs-comment">// beanDefinitionBuilder.getBeanDefinition()  返回的其实是一个 AbstractBeanDefinition</span><br>        GenericBeanDefinition genericBeanDefinition = <span class="hljs-keyword">new</span> GenericBeanDefinition();<br>        <span class="hljs-comment">// 设置 Bean 的类型</span><br>        genericBeanDefinition.setBeanClass(User.class);<br>        <span class="hljs-comment">// 通过 MutablePropertyValues 批量操作属性，beanDefinitionBuilder 底层也是如此 this.beanDefinition.getPropertyValues().add(name, value);</span><br>        MutablePropertyValues propertyValues = <span class="hljs-keyword">new</span> MutablePropertyValues();<br>        propertyValues.addPropertyValue(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">2</span>);<br>        propertyValues.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jack&quot;</span>);<br>        propertyValues.addPropertyValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br>        genericBeanDefinition.setPropertyValues(propertyValues);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-命名-Spring-Bean"><a href="#4-命名-Spring-Bean" class="headerlink" title="4. 命名 Spring Bean"></a>4. 命名 Spring Bean</h2><ul><li><p>Bean 的名称</p><p>每个 Bean 拥有一个或多个标识符(identifiers),这些标识符在 Bean 所在的容器必须是唯一的。通常一个 Bean 仅有一个标识符,如果需要额外的,可考虑使用别名(Alias)来扩充。</p><p>在基于 XML 的配置元信息中,开发人员可用 id 或者 name 属性来规定 Bean 的标识符。通常 Bean 的标识符由字母组成,允许出现特殊字符。如果要想引入 Bean 的别名的话,可在 name 属性使用半角逗号(“,”)或分号(“;”)来间隔。Bean 的 id 或 name 属性并非必须指定,如果留空的话,容器会为 Bean 自动生成一个唯一的名称。Bean 的命名尽管没有限制,不过官方建议采用驼峰的方式,更符合 Java 的命名约定。</p></li></ul><p>​    <strong>tips：</strong>每个 Bean 它的识别符是在它所在的容器，也就说它所在的 BeanDefinition 里面或者说 BeanFactory 里面是唯一的并非是整个应用是唯一的这个地方是要加以区别的。</p><ul><li><p>Bean 名称生成器(BeanNameGenerator)</p></li><li><p>由 Spring Framework 2.0.3 引入,框架內建两种实现:</p><p>DefaultBeanNameGenerator：默认通用 BeanNameGenerator 实现</p></li><li><p>AnnotationBeanNameGenerator: 基于注解扫描的 BeanNameGenerator 实现,起始于 Spring Framework 2.5,关联的官方文档:</p><p>With component scanning in the classpath, Spring generates bean names for unnamed components,following the rules described earlier: essentially,taking </p><p>the simple class name and turning its initial character to lower-case. However, in the (unusual) special case when there is more than one character and </p><p>both the first and second characters are upper case, the original casing gets preserved. These are the same rules as defined by </p><p>java.beans.Introspector.decapitalize (which Spring uses here).</p><p> 当在 classpath 中使用组件扫描时，Spring 会根据之前描述的规则为未命名的组件生成 bean 名称，即将<strong>类名开头字母转换为小写</strong>。但是，在一个罕见的特殊情况下，如果<strong>类名超过一个字符且前两个字            符都是大写字母，则保留原始大小写</strong>。这些规则与 java.beans.Introspector.decapitalize 所定义的规则相同（Spring 在此处使用它）。</p></li></ul><h3 id="BeanNameGenerator"><a href="#BeanNameGenerator" class="headerlink" title="BeanNameGenerator"></a>BeanNameGenerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Strategy interface for generating bean names for bean definitions.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.0.3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanNameGenerator</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Generate a bean name for the given bean definition.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> definition the bean definition to generate a name for</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> registry the bean definition registry that the given definition</span><br><span class="hljs-comment"> * is supposed to be registered with</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the generated bean name</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>DefaultBeanNameGenerator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.springframework.beans.factory.support;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Default implementation of the &#123;<span class="hljs-doctag">@link</span> BeanNameGenerator&#125; interface, delegating to</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> BeanDefinitionReaderUtils#generateBeanName(BeanDefinition, BeanDefinitionRegistry)&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.0.3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultBeanNameGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanNameGenerator</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A convenient constant for a default &#123;<span class="hljs-doctag">@code</span> DefaultBeanNameGenerator&#125; instance,</span><br><span class="hljs-comment"> * as used for &#123;<span class="hljs-doctag">@link</span> AbstractBeanDefinitionReader&#125; setup.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultBeanNameGenerator INSTANCE = <span class="hljs-keyword">new</span> DefaultBeanNameGenerator();<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;<br><span class="hljs-keyword">return</span> BeanDefinitionReaderUtils.generateBeanName(definition, registry);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从 5.2 版本开始它用的单例的方式来进行做,那么相当于说它为了节约内存的开销，那么这时候用单例来进行表达就可以了。这里为什么没有把构造器变成 private？我们通常说一个单例我们不希望外部来进行初始化，那么为什么这里不把它变成私有的，因为你这个 BeanDefinition 就是 DefaultBeanNameGenerator 实现它是个公有的 API，如果你擅自从高版本里面把它构造函数的一个我们说访问限定改成了非public 的话那么其他版本其他老的兼容方式就会出问题所以这个时候还是保持这样的原样，那么换言之 Spring 官方希望如果你要用API实现的话最好是用单例的方式来进行呈现。</p><p>进一步查看 generateBeanName 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(BeanDefinition beanDefinition, BeanDefinitionRegistry registry)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;<br><br>    <span class="hljs-keyword">return</span> generateBeanName(beanDefinition, registry, <span class="hljs-keyword">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        BeanDefinition definition, BeanDefinitionRegistry registry, <span class="hljs-keyword">boolean</span> isInnerBean)</span></span><br><span class="hljs-function">        <span class="hljs-keyword">throws</span> BeanDefinitionStoreException </span>&#123;<br><br>    String generatedBeanName = definition.getBeanClassName();<br>    <span class="hljs-keyword">if</span> (generatedBeanName == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (definition.getParentName() != <span class="hljs-keyword">null</span>) &#123;<br>            generatedBeanName = definition.getParentName() + <span class="hljs-string">&quot;$child&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (definition.getFactoryBeanName() != <span class="hljs-keyword">null</span>) &#123;<br>            generatedBeanName = definition.getFactoryBeanName() + <span class="hljs-string">&quot;$created&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!StringUtils.hasText(generatedBeanName)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BeanDefinitionStoreException(<span class="hljs-string">&quot;Unnamed bean definition specifies neither &quot;</span> +<br>                <span class="hljs-string">&quot;&#x27;class&#x27; nor &#x27;parent&#x27; nor &#x27;factory-bean&#x27; - can&#x27;t generate bean name&quot;</span>);<br>    &#125;<br><br>    String id = generatedBeanName;<br>    <span class="hljs-keyword">if</span> (isInnerBean) &#123;<br>        <span class="hljs-comment">// Inner bean: generate identity hashcode suffix.</span><br>        id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Top-level bean: use plain class name with unique suffix if necessary.</span><br>        <span class="hljs-keyword">return</span> uniqueBeanName(generatedBeanName, registry);<br>    &#125;<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们去生成这个Bean的名称的时候它首先去取的是 Bean 的一个 Class,Bean 的 Class 之后我们可以看一下这里会有两种实现方式:</p><ul><li><p>第一个它如果是一个嵌套的 Bean 这个时候会生成一个,就说 Bean 名称后面会增加一个分隔符就是个#号,通过调试就会发现会发现在这个 Name 名后面通常会加上一个井号后面带个数字或带一个字符来进行唯一的标识，</p></li><li><p>如果它是唯一的话，,它会变成一个等于 uniqueBean，这种方式其实比较简单</p></li></ul><h3 id="AnnotationBeanNameGenerator"><a href="#AnnotationBeanNameGenerator" class="headerlink" title="AnnotationBeanNameGenerator"></a>AnnotationBeanNameGenerator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> org.springframework.context.annotation;<br><br><span class="hljs-keyword">import</span> java.beans.Introspector;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.BeanNameGenerator;<br><span class="hljs-keyword">import</span> org.springframework.core.annotation.AnnotationAttributes;<br><span class="hljs-keyword">import</span> org.springframework.core.type.AnnotationMetadata;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><span class="hljs-keyword">import</span> org.springframework.util.Assert;<br><span class="hljs-keyword">import</span> org.springframework.util.ClassUtils;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.support.BeanNameGenerator&#125;</span><br><span class="hljs-comment"> * implementation for bean classes annotated with the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Component <span class="hljs-doctag">@Component</span>&#125; annotation</span><br><span class="hljs-comment"> * or with another annotation that is itself annotated with</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Component <span class="hljs-doctag">@Component</span>&#125; as a</span><br><span class="hljs-comment"> * meta-annotation. For example, Spring&#x27;s stereotype annotations (such as</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Repository <span class="hljs-doctag">@Repository</span>&#125;) are</span><br><span class="hljs-comment"> * themselves annotated with</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> org.springframework.stereotype.Component <span class="hljs-doctag">@Component</span>&#125;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Also supports Java EE 6&#x27;s &#123;<span class="hljs-doctag">@link</span> javax.annotation.ManagedBean&#125; and</span><br><span class="hljs-comment"> * JSR-330&#x27;s &#123;<span class="hljs-doctag">@link</span> javax.inject.Named&#125; annotations, if available. Note that</span><br><span class="hljs-comment"> * Spring component annotations always override such standard annotations.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;If the annotation&#x27;s value doesn&#x27;t indicate a bean name, an appropriate</span><br><span class="hljs-comment"> * name will be built based on the short name of the class (with the first</span><br><span class="hljs-comment"> * letter lower-cased). For example:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;pre class=&quot;code&quot;&gt;com.xyz.FooServiceImpl -&amp;gt; fooServiceImpl&lt;/pre&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Juergen Hoeller</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Mark Fisher</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.5</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.stereotype.Component#value()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.stereotype.Repository#value()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.stereotype.Service#value()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> org.springframework.stereotype.Controller#value()</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> javax.inject.Named#value()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationBeanNameGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanNameGenerator</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A convenient constant for a default &#123;<span class="hljs-doctag">@code</span> AnnotationBeanNameGenerator&#125; instance,</span><br><span class="hljs-comment"> * as used for component scanning purposes.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 5.2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AnnotationBeanNameGenerator INSTANCE = <span class="hljs-keyword">new</span> AnnotationBeanNameGenerator();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COMPONENT_ANNOTATION_CLASSNAME = <span class="hljs-string">&quot;org.springframework.stereotype.Component&quot;</span>;<br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (definition <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;<br>String beanName = determineBeanNameFromAnnotation((AnnotatedBeanDefinition) definition);<br><span class="hljs-keyword">if</span> (StringUtils.hasText(beanName)) &#123;<br><span class="hljs-comment">// Explicit bean name found.</span><br><span class="hljs-keyword">return</span> beanName;<br>&#125;<br>&#125;<br><span class="hljs-comment">// Fallback: generate a unique default bean name.</span><br><span class="hljs-keyword">return</span> buildDefaultBeanName(definition, registry);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Derive a bean name from one of the annotations on the class.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> annotatedDef the annotation-aware bean definition</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the bean name, or &#123;<span class="hljs-doctag">@code</span> null&#125; if none is found</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">determineBeanNameFromAnnotation</span><span class="hljs-params">(AnnotatedBeanDefinition annotatedDef)</span> </span>&#123;<br>AnnotationMetadata amd = annotatedDef.getMetadata();<br>Set&lt;String&gt; types = amd.getAnnotationTypes();<br>String beanName = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">for</span> (String type : types) &#123;<br>AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(amd, type);<br><span class="hljs-keyword">if</span> (attributes != <span class="hljs-keyword">null</span> &amp;&amp; isStereotypeWithNameValue(type, amd.getMetaAnnotationTypes(type), attributes)) &#123;<br>Object value = attributes.get(<span class="hljs-string">&quot;value&quot;</span>);<br><span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> String) &#123;<br>String strVal = (String) value;<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(strVal)) &#123;<br><span class="hljs-keyword">if</span> (beanName != <span class="hljs-keyword">null</span> &amp;&amp; !strVal.equals(beanName)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;Stereotype annotations suggest inconsistent &quot;</span> +<br><span class="hljs-string">&quot;component names: &#x27;&quot;</span> + beanName + <span class="hljs-string">&quot;&#x27; versus &#x27;&quot;</span> + strVal + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>&#125;<br>beanName = strVal;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> beanName;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Check whether the given annotation is a stereotype that is allowed</span><br><span class="hljs-comment"> * to suggest a component name through its annotation &#123;<span class="hljs-doctag">@code</span> value()&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> annotationType the name of the annotation class to check</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> metaAnnotationTypes the names of meta-annotations on the given annotation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> attributes the map of attributes for the given annotation</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> whether the annotation qualifies as a stereotype with component name</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isStereotypeWithNameValue</span><span class="hljs-params">(String annotationType,</span></span><br><span class="hljs-params"><span class="hljs-function">Set&lt;String&gt; metaAnnotationTypes, <span class="hljs-meta">@Nullable</span> Map&lt;String, Object&gt; attributes)</span> </span>&#123;<br><br><span class="hljs-keyword">boolean</span> isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||<br>metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME) ||<br>annotationType.equals(<span class="hljs-string">&quot;javax.annotation.ManagedBean&quot;</span>) ||<br>annotationType.equals(<span class="hljs-string">&quot;javax.inject.Named&quot;</span>);<br><br><span class="hljs-keyword">return</span> (isStereotype &amp;&amp; attributes != <span class="hljs-keyword">null</span> &amp;&amp; attributes.containsKey(<span class="hljs-string">&quot;value&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Derive a default bean name from the given bean definition.</span><br><span class="hljs-comment"> * &lt;p&gt;The default implementation delegates to &#123;<span class="hljs-doctag">@link</span> #buildDefaultBeanName(BeanDefinition)&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> definition the bean definition to build a bean name for</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> registry the registry that the given bean definition is being registered with</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the default bean name (never &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">buildDefaultBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;<br><span class="hljs-keyword">return</span> buildDefaultBeanName(definition);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Derive a default bean name from the given bean definition.</span><br><span class="hljs-comment"> * &lt;p&gt;The default implementation simply builds a decapitalized version</span><br><span class="hljs-comment"> * of the short class name: e.g. &quot;mypackage.MyJdbcDao&quot; -&gt; &quot;myJdbcDao&quot;.</span><br><span class="hljs-comment"> * &lt;p&gt;Note that inner classes will thus have names of the form</span><br><span class="hljs-comment"> * &quot;outerClassName.InnerClassName&quot;, which because of the period in the</span><br><span class="hljs-comment"> * name may be an issue if you are autowiring by name.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> definition the bean definition to build a bean name for</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the default bean name (never &#123;<span class="hljs-doctag">@code</span> null&#125;)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">buildDefaultBeanName</span><span class="hljs-params">(BeanDefinition definition)</span> </span>&#123;<br>String beanClassName = definition.getBeanClassName();<br>Assert.state(beanClassName != <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;No bean class name set&quot;</span>);<br>String shortClassName = ClassUtils.getShortName(beanClassName);<br><span class="hljs-keyword">return</span> Introspector.decapitalize(shortClassName);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里使用 @Component 注解及其派生的注解 @Repository @Service @Controller，可以看到 @Repository 注解上面打了一个 @Component 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Repository &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The value may indicate a suggestion for a logical component name,</span><br><span class="hljs-comment"> * to be turned into a Spring bean in case of an autodetected component.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@AliasFor(annotation = Component.class)</span><br><span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;&quot;</span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们再来看它的生成方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">generateBeanName</span><span class="hljs-params">(BeanDefinition definition, BeanDefinitionRegistry registry)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (definition <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;<br>        String beanName = determineBeanNameFromAnnotation((AnnotatedBeanDefinition) definition);<br>        <span class="hljs-keyword">if</span> (StringUtils.hasText(beanName)) &#123;<br>            <span class="hljs-comment">// Explicit bean name found.</span><br>            <span class="hljs-keyword">return</span> beanName;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Fallback: generate a unique default bean name.</span><br>    <span class="hljs-keyword">return</span> buildDefaultBeanName(definition, registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>第一种方法就是说它如果是一个标注这个 Definition 就说如果你是一个注解的方式会被命名成 AnnotatedBeanDefinition，如果它不是的话它会采用什么采用 Fallback 一个补偿的方式，这种方式呢就和传统的方式没有太大的区别。 </p><h2 id="5-Spring-Bean-的别名"><a href="#5-Spring-Bean-的别名" class="headerlink" title="5. Spring Bean 的别名"></a>5. Spring Bean 的别名</h2><p>Bean别名(Alias)的价值</p><ul><li><p>复用现有的 BeanDefinition</p></li><li><p>更具有场景化的命名方法,比如:</p><alias name="myApp-dataSource" alias="subsystemA-dataSource"/><alias name="myApp-dataSource" alias="subsystemB-dataSource"/></li><li><p>XML 配置文件中设置 Bean 别名</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>&lt;!--复用--&gt;<br>    &lt;<span class="hljs-keyword">import</span> resource=<span class="hljs-string">&quot;classpath:/META-INF/dependency-injection-context.xml&quot;</span>/&gt;<br><br>    &lt;!--将 Spring 容器中的 Bean 建立/关联别名--&gt;<br>    &lt;alias name=<span class="hljs-string">&quot;user&quot;</span> alias=<span class="hljs-string">&quot;tom-user&quot;</span>/&gt;<br><br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> thinking.in.spring.spring.bean.definition;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;Bean 别名示例&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanAliasDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:/META-INF/bean-definitions-context.xml&quot;</span>);<br><br>        User tomUser = (User) beanFactory.getBean(<span class="hljs-string">&quot;tom-user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;tomUser: &quot;</span> + tomUser);<br><br>        User user = (User) beanFactory.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user: &quot;</span> + user);<br><br>        System.out.println(<span class="hljs-string">&quot;tomUser == user: &quot;</span> + (tomUser == user));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-注册-Spring-Bean"><a href="#6-注册-Spring-Bean" class="headerlink" title="6. 注册 Spring Bean"></a>6. 注册 Spring Bean</h2><p>BeanDefinition 注册</p><ul><li>XML 配置元信息<ul><li>&lt;bean name=”…” … /&gt;</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;tech.fengjian.ioc.container.overview.domain.User&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;jack&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;18&quot;</span>/&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 信息</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:/META-INF/dependency-lookup-context.xml&quot;</span>);<br>        User user = (User) beanFactory.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;XML 方式注册 Spring Bean，User：&quot;</span> + user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>Java 注解配置元信息</p><ul><li><p>@Bean</p></li><li><p>@Component</p></li><li><p>@Import</p></li></ul></li></ul><p>@Bean 方式：</p><p>这里的 new AnnotationConfigApplicationContext(Config.class); 实现了将 Config 类配置为 Spring 的 Bean 对象，并且会将 Config 类中标记为 @Bean 注解的类也加载成 Bean 对象。</p><p>new AnnotationConfigApplicationContext(Config.class);传参的方式相比无参构造的话省去了 refresh() 方法。他其实内部执行两步：</p><p>register(componentClasses);// 将 Config 类及类中的 @Bean 修饰的注册为 Bean 对象</p><p>refresh();// 启动 Spring 应用上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">ublic <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 信息</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(Config.class);<br>        Map&lt;String, User&gt; users = applicationContext.getBeansOfType(User.class);<br>        System.out.println(<span class="hljs-string">&quot;users:&quot;</span>+users);<br>        System.out.println(<span class="hljs-string">&quot;Configs:&quot;</span>+applicationContext.getBeansOfType(Config.class));<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span></span>&#123;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>            User user = <span class="hljs-keyword">new</span> User();<br>            user.setId(<span class="hljs-number">11L</span>);<br>            user.setName(<span class="hljs-string">&quot;林黛玉&quot;</span>);<br>            user.setAge(<span class="hljs-number">15</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Component 方式</p><p><code>applicationContext.register(Config.class);</code>并不会加载其他的标记为<code>@Component</code>的 Bean，因为它只会注册指定类中声明的 Bean。</p><p>如果要让<code>applicationContext.register()</code>方法注册其他<code>@Component</code>注解的 bean，需要在配置类中通过<code>@Import</code>注解导入其他的配置类或者使用<code>@ComponentScan</code>注解扫描并注册bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 信息</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(Config.class);<br>        System.out.println(<span class="hljs-string">&quot;Configs:&quot;</span>+applicationContext.getBeansOfType(Config2.class));<br><br>    &#125;<br><br>    <span class="hljs-comment">// 在配置类上加上组件扫描注解，等效于在 XML 配置文件中开启扫描注解</span><br>    <span class="hljs-meta">@ComponentScan(&quot;tech.fengjian.ioc.container.overview.dependency.lookup&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span></span>&#123;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>            User user = <span class="hljs-keyword">new</span> User();<br>            user.setId(<span class="hljs-number">11L</span>);<br>            user.setName(<span class="hljs-string">&quot;林黛玉&quot;</span>);<br>            user.setAge(<span class="hljs-number">15</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Component</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config2</span></span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Import 方式</p><p>在 Spring 中，当我们使用 <code>applicationContext.register(Config.class)</code> 方法手动注册配置类时，该配置类中定义的 Bean 也不会被后续导入的配置类所覆盖。</p><p>这是因为，手动注册配置类与通过 <code>@Import</code> 注解导入配置类的机制是不同的。手动注册配置类时，Spring 容器会创建一个新的子容器，并将手动注册的配置类放入该子容器中。而子容器中的 Bean 只能被该</p><p>子容器中的其他 Bean 或父级容器中的 Bean 所依赖或访问，从而保证了手动注册的配置类中定义的 Bean 不受其他配置类的影响。</p><p>这里 Config 中的 User 对象不会被 Import 的对象覆盖，而后续多次 Import 的 Bean，后面的会覆盖前面的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 信息</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(Config.class);<br><br>        System.out.println(<span class="hljs-string">&quot;Configs:&quot;</span>+applicationContext.getBeansOfType(Config.class));<br>        System.out.println(<span class="hljs-string">&quot;Configs:&quot;</span>+applicationContext.getBeansOfType(Config2.class));<br>        System.out.println(<span class="hljs-string">&quot;Users:&quot;</span>+applicationContext.getBeansOfType(User.class));<br><br>    &#125;<br><br>    <span class="hljs-comment">// Config 中的 User 对象不会被 Import 的对象覆盖</span><br>    <span class="hljs-comment">// 而后续多次 Import 的 Bean，后面的会覆盖前面的</span><br>    <span class="hljs-meta">@Import(value = &#123;Config3.class,Config2.class&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span></span>&#123;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>            User user = <span class="hljs-keyword">new</span> User();<br>            user.setId(<span class="hljs-number">11L</span>);<br>            user.setName(<span class="hljs-string">&quot;林黛玉&quot;</span>);<br>            user.setAge(<span class="hljs-number">15</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config2</span></span>&#123;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>            User user = <span class="hljs-keyword">new</span> User();<br>            user.setId(<span class="hljs-number">12L</span>);<br>            user.setName(<span class="hljs-string">&quot;薛宝钗&quot;</span>);<br>            user.setAge(<span class="hljs-number">16</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config3</span></span>&#123;<br><br>        <span class="hljs-meta">@Bean</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span></span>&#123;<br>            User user = <span class="hljs-keyword">new</span> User();<br>            user.setId(<span class="hljs-number">13L</span>);<br>            user.setName(<span class="hljs-string">&quot;凤姐&quot;</span>);<br>            user.setAge(<span class="hljs-number">18</span>);<br>            <span class="hljs-keyword">return</span> user;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>Java API 配置元信息：</li><li>命名方式: BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建 BeanFactory 容器</span><br>    AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>    <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>    applicationContext.refresh(); <br>    registBeanDefinition(applicationContext, <span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(applicationContext.getBean(<span class="hljs-string">&quot;user&quot;</span>));<br>    <span class="hljs-comment">// 显示的关闭 Spring 应用上下文</span><br>    applicationContext.close();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registBeanDefinition</span><span class="hljs-params">(BeanDefinitionRegistry beanDefinitionRegistry,String beanName,Class&lt;?&gt; beanClass)</span></span>&#123;<br><br>    BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClass);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-number">1</span>);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;张三&quot;</span>);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">18</span>);<br><br>    beanDefinitionRegistry.registerBeanDefinition(beanName,beanDefinitionBuilder.getBeanDefinition());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>非命名方式</p></li><li><p>BeanDefinitionReaderUtils#registerWithGeneratedName(AbstiractBeanDefinition,BeafinitionRegistry)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建 BeanFactory 容器</span><br>    AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>    <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>    applicationContext.refresh();<br>    registBeanDefinition(applicationContext,User.class);<br>    System.out.println(applicationContext.getBean(User.class));<br>    <span class="hljs-comment">// 显示的关闭 Spring 应用上下文</span><br>    applicationContext.close();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registBeanDefinition</span><span class="hljs-params">(BeanDefinitionRegistry beanDefinitionRegistry,Class&lt;?&gt; beanClass)</span> </span>&#123;<br><br>    BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(beanClass);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-number">2</span>);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>    beanDefinitionBuilder.addPropertyValue(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">18</span>);<br><br>    BeanDefinitionReaderUtils.registerWithGeneratedName(beanDefinitionBuilder.getBeanDefinition(),beanDefinitionRegistry);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置类方式: AnnotatedBeanDefinitionReader#reaister(Class…)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 创建 BeanFactory 容器</span><br>    AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>    <span class="hljs-comment">// 注册 Configuration Class （配置类）</span><br>applicationContext.register(Config.class);<br>    <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>    applicationContext.refresh();<br>    <span class="hljs-comment">// 显示的关闭 Spring 应用上下文</span><br>    applicationContext.close();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-实例化-Spring-Bean"><a href="#7-实例化-Spring-Bean" class="headerlink" title="7. 实例化 Spring Bean"></a>7. 实例化 Spring Bean</h2><p>Bean 实例化(Instantiation)</p><ol><li>常规方式</li></ol><ul><li><p>通过构造器(配置元信息:XML、Java 注解和 Java API)</p></li><li><p>通过静态工厂方法(配置元信息:XML 和 JavaAPI)：静态方法实例化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;user-by-static-method&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thinking.in.spring.spring.bean.definition.UserFactory&quot;</span><br>          factory-method=<span class="hljs-string">&quot;createUser&quot;</span>/&gt;<br><br>&lt;/beans&gt;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title">createUser</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">999L</span>);<br>        user.setName(<span class="hljs-string">&quot;行者&quot;</span>);<br>        user.setAge(<span class="hljs-number">99</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInstantiationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 加载 XML 配置</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/bean- instantiation-context.xml&quot;</span>);<br><br>        User user = beanFactory.getBean(<span class="hljs-string">&quot;user-by-static-method&quot;</span>, User.class);<br>        System.out.println(<span class="hljs-string">&quot;user:&quot;</span> + user);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 Bean 工厂方法(配置元信息:XML 和 JavaAPI)：实例化方法实例化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;user-by-instance-method&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thinking.in.spring.spring.bean.definition.UserFactory&quot;</span><br>          factory-method=<span class="hljs-string">&quot;createUser&quot;</span> factory-bean=<span class="hljs-string">&quot;userFactory&quot;</span>/&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;userFactory&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thinking.in.spring.spring.bean.definition.UserFactory&quot;</span>/&gt;<br>&lt;/beans&gt;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInstantiationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 加载 XML 配置</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/bean- instantiation-context.xml&quot;</span>);<br><br>        User user = beanFactory.getBean(<span class="hljs-string">&quot;user-by-instance-method&quot;</span>, User.class);<br>        System.out.println(<span class="hljs-string">&quot;user:&quot;</span> + user);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 FactoryBean(配置元信息:XML、Java 注解和 Java 注解和 Java/API</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>   &lt;bean id=<span class="hljs-string">&quot;user-by-factory-bean&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;thinking.in.spring.spring.bean.definition.UserFactoryBean&quot;</span>/&gt;<br><br><br>&lt;/beans&gt;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInstantiationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 加载 XML 配置</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/bean- instantiation-context.xml&quot;</span>);<br><br>        User user = beanFactory.getBean(<span class="hljs-string">&quot;user-by-factory-bean&quot;</span>, User.class);<br>        System.out.println(<span class="hljs-string">&quot;user:&quot;</span> + user);<br><br>    &#125;<br>&#125;<br>       <br></code></pre></td></tr></table></figure><ol start="2"><li>特殊方式</li></ol><ul><li>通过 ServiceLoaderFactoryBean(配置元信息:XML、Java 注解和 JavaAPI)</li></ul><p>先观察 ServiceLoader 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String PREFIX = <span class="hljs-string">&quot;META-INF/services/&quot;</span>;<br></code></pre></td></tr></table></figure><p>在 Spring 中可以去适配我们的 ServiceLoader 这个实现，ServiceLoaderFactoryBean，一个实现步骤</p><p>​    1）创建目录 <code>META-INF/services/</code></p><p>​    2）它通常来说是通过接口的方式来进行创建的，在 services 目录下新建一个没有后缀名的文件，文件名称为接口的全路径</p><p>​    3）将接口的所有<code>实现类</code>全路径复制到文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    demoServiceLoader();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">demoServiceLoader</span><span class="hljs-params">()</span> </span>&#123;<br>    ServiceLoader&lt;UserFactory&gt; serviceLoader = ServiceLoader.load(UserFactory.class, Thread.currentThread().getContextClassLoader());<br>    Iterator&lt;UserFactory&gt; iterator = serviceLoader.iterator();<br>    <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>        UserFactory userFactory = iterator.next();<br>        System.out.println(userFactory.createUser());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看下 ServiceLoaderFactoryBean 如何实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xsi:schemaLocation=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span><br><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;userFactoryServiceLoader&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.beans.factory.serviceloader.ServiceLoaderFactoryBean&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;serviceType&quot;</span> value=<span class="hljs-string">&quot;thinking.in.spring.spring.bean.definition.UserFactory&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><br>&lt;/beans&gt;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpecialBeanInstantiationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/special-bean-instantiation-context.xml&quot;</span>);<br>        ServiceLoader&lt;UserFactory&gt; userFactoryServiceLoader = beanFactory.getBean(<span class="hljs-string">&quot;userFactoryServiceLoader&quot;</span>, ServiceLoader.class);<br>        displayServiceLoader(userFactoryServiceLoader);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">displayServiceLoader</span><span class="hljs-params">(ServiceLoader&lt;UserFactory&gt; serviceLoader)</span> </span>&#123;<br>        Iterator&lt;UserFactory&gt; iterator = serviceLoader.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            UserFactory userFactory = iterator.next();<br>            System.out.println(userFactory.createUser());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 AutowireCapableBeanFactory#createBean(java.lang.Classs, int, boolean)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>    ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/special-bean-instantiation-context.xml&quot;</span>);<br>    AutowireCapableBeanFactory beanFactory = applicationContext.getAutowireCapableBeanFactory();<br>    UserFactory userFactory = beanFactory.createBean(DefaultUserFactory.class);<br>    System.out.println(userFactory.createUser());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过 BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</li></ul><h2 id="8-初始化-Spring-Bean"><a href="#8-初始化-Spring-Bean" class="headerlink" title="8. 初始化 Spring Bean"></a>8. 初始化 Spring Bean</h2><p>Bean 初始化(Initialization)</p><ol><li>@PostConstruct 标注方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultUserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserFactory</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 基于 @PostConstruct 注解</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;@PostConstruct : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInitializationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br><br>        applicationContext.getBean(UserFactory.class);<br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserFactory <span class="hljs-title">userFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultUserFactory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>实现 InitializingBean 接口的 afterPropertiesSet() 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultUserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserFactory</span>, <span class="hljs-title">InitializingBean</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 基于 @PostConstruct 注解</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;@PostConstruct : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 基于 InitializingBean 接口的 afterPropertiesSet 非法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InitializingBean#afterPropertiesSet() : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>自定义初始化方法</li></ol><ul><li><p>XML 配置: &lt;bean init-method=”init”…/&gt;</p></li><li><p>Java 注解: @Bean(initMethod=”init”)</p></li><li><p>Java API: AbstractBeanDefinition#setInitMethodName(String)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultUserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserFactory</span>, <span class="hljs-title">InitializingBean</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 基于 @PostConstruct 注解</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;@PostConstruct : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 基于 InitializingBean 接口的 afterPropertiesSet 非法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InitializingBean#afterPropertiesSet() : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3.自定义初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initUserFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义初始化方法 initUserFactory() : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInitializationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br><br>        applicationContext.getBean(UserFactory.class);<br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initUserFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserFactory <span class="hljs-title">userFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultUserFactory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思考：</strong>假设以上三种方式均在同一 Bean 中定义,那么这些方法的执行顺序是怎样?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span> : UserFactory 初始化中...<br>InitializingBean#afterPropertiesSet() : UserFactory 初始化中...<br>自定义初始化方法 initUserFactory() : UserFactory 初始化中...<br></code></pre></td></tr></table></figure><p>Java API: AbstractBeanDefinition#setInitMethodName(String) 的实现，自定义方法（无论是注解上配置的 initMethod 还是 xml 文件中配置的）本质也是调用这个方法</p><h2 id="9-延迟初始化-Spring-Bean"><a href="#9-延迟初始化-Spring-Bean" class="headerlink" title="9. 延迟初始化 Spring Bean"></a>9. 延迟初始化 Spring Bean</h2><p>Bean 延迟初始化(Lazylnitialization)</p><p>XML 配置:&lt;beanlazy-init=”true”…/&gt;</p><p>Java 注解:@Lazy(true)</p><p><strong>思考：</strong>当某个Bean定义为延迟初始化,那么,Spring 容器返回的对象与非延迟的对象存在怎样的差异?</p><p>延迟初始化：Spring 应用上下文先启动，然后按需初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInitializationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br>        <span class="hljs-comment">// 非延迟初始化在 Spring 应用上下文启动完成后被初始化</span><br>        System.out.println(<span class="hljs-string">&quot;Spring 应用上下文已启动...&quot;</span>);<br>        UserFactory userFactory = applicationContext.getBean(UserFactory.class);<br>        System.out.println(<span class="hljs-string">&quot;userFactory:&quot;</span> + userFactory);<br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Lazy</span><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initUserFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserFactory <span class="hljs-title">userFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultUserFactory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Spring 应用上下文已启动...<br><span class="hljs-meta">@PostConstruct</span> : UserFactory 初始化中...<br>InitializingBean#afterPropertiesSet() : UserFactory 初始化中...<br>自定义初始化方法 initUserFactory() : UserFactory 初始化中...<br></code></pre></td></tr></table></figure><p>非延迟初始化：Spring 上下文启动完成后被初始化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInitializationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br>        <span class="hljs-comment">// 非延迟初始化在 Spring 应用上下文启动完成后被初始化</span><br>        System.out.println(<span class="hljs-string">&quot;Spring 应用上下文已启动...&quot;</span>);<br>        UserFactory userFactory = applicationContext.getBean(UserFactory.class);<br>        System.out.println(<span class="hljs-string">&quot;userFactory:&quot;</span> + userFactory);<br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Lazy(value = true)</span><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initUserFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserFactory <span class="hljs-title">userFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultUserFactory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span> : UserFactory 初始化中...<br>InitializingBean#afterPropertiesSet() : UserFactory 初始化中...<br>自定义初始化方法 initUserFactory() : UserFactory 初始化中...<br>Spring 应用上下文已启动...<br></code></pre></td></tr></table></figure><p>refresh 方法中 finishBeanFactoryInitialization(beanFactory)方法完成 BeanFactory 初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>finishBeanFactoryInitialization(beanFactory);<br></code></pre></td></tr></table></figure><h2 id="10-销毁-Spring-Bean"><a href="#10-销毁-Spring-Bean" class="headerlink" title="10. 销毁 Spring Bean"></a>10. 销毁 Spring Bean</h2><p>Bean销毁(Destroy):close方法触发销毁动作</p><ol><li><p>@PreDestroy 标注方法</p></li><li><p>实现 DisposableBean 接口的destroy()方法</p></li><li><p>自定义销毁方法</p></li></ol><ul><li><p>XML 配置:&lt;beandestroy=”destroy”…/&gt;</p></li><li><p>Java 注解:@Bean(destroy=”destroy”)</p></li><li><p>Java API: AbstractBeanDefinition#setDestroyMethodName(String)</p></li></ul><p><strong>思考</strong>:假设以上三种方式均在同一Bean中定义,那么这些方法的执行顺序是怎样?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultUserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserFactory</span>, <span class="hljs-title">InitializingBean</span>, <span class="hljs-title">DisposableBean</span> </span>&#123;<br><br>    <span class="hljs-comment">// 1. 基于 @PostConstruct 注解</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;@PostConstruct : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 2. 基于 InitializingBean 接口的 afterPropertiesSet 非法</span><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;InitializingBean#afterPropertiesSet() : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 3.自定义初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initUserFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义初始化方法 initUserFactory() : UserFactory 初始化中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@PreDestroy</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">preDestroy</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;@PreDestroy : UserFactory 销毁中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;DisposableBean#destroy() : UserFactory 销毁中...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyUserFactory</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;自定义初销毁方法 destroyUserFactory() : UserFactory 销毁中...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInitializationDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br>        <span class="hljs-comment">// 非延迟初始化在 Spring 应用上下文启动完成后被初始化</span><br>        System.out.println(<span class="hljs-string">&quot;Spring 应用上下文已启动...&quot;</span>);<br>        UserFactory userFactory = applicationContext.getBean(UserFactory.class);<br>        System.out.println(<span class="hljs-string">&quot;userFactory:&quot;</span> + userFactory);<br>        applicationContext.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Lazy(value = false)</span><br>    <span class="hljs-meta">@Bean(initMethod = &quot;initUserFactory&quot;,destroyMethod = &quot;destroyUserFactory&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserFactory <span class="hljs-title">userFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultUserFactory();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PreDestroy</span> : UserFactory 销毁中...<br>DisposableBean#destroy() : UserFactory 销毁中...<br>自定义初销毁方法 destroyUserFactory() : UserFactory 销毁中...<br></code></pre></td></tr></table></figure><h2 id="11-垃圾回收-Spring-Bean"><a href="#11-垃圾回收-Spring-Bean" class="headerlink" title="11. 垃圾回收 Spring Bean"></a>11. 垃圾回收 Spring Bean</h2><p>Bean垃圾回收(GC)</p><p>1.关闭 Spring 容器(应用上下文)</p><p>2.执行 GC</p><p>3.SpringBean 覆盖的 finalize()方法被回调</p><p>finalize 方法是 Object 类中的方法，不一定每次都会被调用到，不代表对象不会被回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanGarbageCollectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        applicationContext.register(BeanInitializationDemo.class);<br>        applicationContext.refresh();<br><br>        applicationContext.close();<br>        System.gc();<br><br>        System.out.println(<span class="hljs-string">&quot;Spring 应用上下文已关闭&quot;</span>);<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultUserFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;当前对象 DefaultUserFactory 正则被回收...&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="12-面试题"><a href="#12-面试题" class="headerlink" title="12. 面试题"></a>12. 面试题</h2><p><strong><font color="green" size="2">沙雕面试题</font></strong>-如何注册一个 SpringBean?？</p><p>答：通过 BeanDefinition 和外部单体对象来注册，BeanDefinition 参照 <a href="#6">注册 Spring Bean</a> 了解，</p><p>这里说一下外部单体对象注册，就是相当于说这个对象的生命周期并不由 Spring 容器来进行管理，但是也可以被它托管，写一段代码体会一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExternalSingleTonRegistDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br><br>        <span class="hljs-comment">// 创建外部对象 userFactory</span><br>        UserFactory userFactory = <span class="hljs-keyword">new</span> DefaultUserFactory();<br>        ConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();<br>        <span class="hljs-comment">// 注册外部单例对象</span><br>        beanFactory.registerSingleton(<span class="hljs-string">&quot;userFactory&quot;</span>, userFactory);<br><br>        applicationContext.refresh();<br><br>        <span class="hljs-comment">// 通过依赖查找获取 UserFactory 对象</span><br>        UserFactory userFactoryLookup = beanFactory.getBean(<span class="hljs-string">&quot;userFactory&quot;</span>, UserFactory.class);<br>        System.out.println(<span class="hljs-string">&quot;userFactory == userFactoryLookup : &quot;</span> + (userFactory == userFactoryLookup));<br><br>        applicationContext.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color="orange" size="2">996面试题</font></strong>-什么是 Spring BeanDefinition?</p><p>答： 回顾”定义 Spring Bean”和”BeanDefinition 元信息”</p><p><strong><font color="red" size="2">劝退面试题</font></strong>-Spring 容器是怎样管理注册 Bean？</p><p>答:答案将在后续专题章节详细讨论,如:IoC 配置元信息读取和解析、依赖查找和注入以及 Bean 生命周期等。</p><p><strong>本节完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring 核心编程思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频后期处理</title>
    <link href="/2023/05/08/%E7%9F%AD%E8%A7%86%E9%A2%91/%E8%A7%86%E9%A2%91%E5%90%8E%E6%9C%9F%E5%A4%84%E7%90%86/"/>
    <url>/2023/05/08/%E7%9F%AD%E8%A7%86%E9%A2%91/%E8%A7%86%E9%A2%91%E5%90%8E%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="视频后期处理"><a href="#视频后期处理" class="headerlink" title="视频后期处理"></a>视频后期处理</h1><h2 id="1-剪辑套路"><a href="#1-剪辑套路" class="headerlink" title="1. 剪辑套路"></a>1. 剪辑套路</h2><p>整理视频素材 - 剪辑 - 音乐字幕 - 后期导出</p><h3 id="1-1-整理素材"><a href="#1-1-整理素材" class="headerlink" title="1.1 整理素材"></a>1.1 整理素材</h3><ul><li>导入素材</li><li>删减素材</li><li>素材分类</li><li>项目分类</li></ul><h3 id="1-2-剪辑"><a href="#1-2-剪辑" class="headerlink" title="1.2 剪辑"></a>1.2 剪辑</h3><ul><li>粗剪排序</li><li>声音处理</li><li>渐变与转场</li><li>变速与变焦</li><li>画面调色与抠图</li><li>关键帧动画</li></ul><h3 id="1-3-音乐字幕"><a href="#1-3-音乐字幕" class="headerlink" title="1.3 音乐字幕"></a>1.3 音乐字幕</h3><ul><li>音频添加</li><li>过渡处理</li><li>字幕生成</li><li>字幕添加</li><li>AI声音添加</li></ul><h3 id="1-4-后期导出"><a href="#1-4-后期导出" class="headerlink" title="1.4 后期导出"></a>1.4 后期导出</h3><ul><li>设计封面/开头</li><li>多平台压制</li><li>保存项目文件</li><li>后期反馈调整</li></ul><h2 id="2-常见剪辑问题"><a href="#2-常见剪辑问题" class="headerlink" title="2. 常见剪辑问题"></a>2. 常见剪辑问题</h2><ol><li><p>剪辑顺序问题：从整体 -&gt; 局部 剪辑手法</p></li><li><p>输出格式问题，常见的视频参数揭秘</p></li><li><p><font color="red">版权问题：音视频 + 图片</font></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>视频处理</category>
      
      <category>剪辑套路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>视频后期</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电脑疑难杂症</title>
    <link href="/2023/05/08/%E6%9D%82%E8%AE%B0/%E7%94%B5%E8%84%91%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    <url>/2023/05/08/%E6%9D%82%E8%AE%B0/%E7%94%B5%E8%84%91%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1-文件夹删除不掉"><a href="#1-文件夹删除不掉" class="headerlink" title="1. 文件夹删除不掉"></a>1. 文件夹删除不掉</h2><ol><li><p>打开文件资源管理器（Ctrl + Alt + Delete）</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/8b08de1a8c8473c5.png" alt="image-20230208104526852"></p></li><li><p>打开资源监视器</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/08/b3da9b431c6cc315.png" alt="image-20230208104502920"></p></li><li><p>选择 CPU –&gt; 关联句柄 –&gt; 输入文件夹或文件 –&gt; 查看占用进程 –&gt; 右键结束进程</p></li></ol><h2 id="2-添加进-gitigore-的文件还是会进入待提交列表"><a href="#2-添加进-gitigore-的文件还是会进入待提交列表" class="headerlink" title="2. 添加进 .gitigore 的文件还是会进入待提交列表"></a>2. 添加进 .gitigore 的文件还是会进入待提交列表</h2><p>在gitignore中忽略了.idea文件夹,但是提交时仍旧会出现.idea内文件变动的情况</p><p>原因：.idea已经被git跟踪，之后再加入.gitignore后是没有作用的</p><p>解决办法：.gitignore中添加.idea，清除.idea的git缓存，git rm -r –cached .idea</p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
      <category>电脑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂记</tag>
      
      <tag>电脑疑难杂症</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JMeter</title>
    <link href="/2023/05/08/%E6%B5%8B%E8%AF%95/JMeter/"/>
    <url>/2023/05/08/%E6%B5%8B%E8%AF%95/JMeter/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
      <category>JMeter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JMeter</tag>
      
      <tag>压测工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 基础语法</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/python/python%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/python/python%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Python多版本问题"><a href="#1-Python多版本问题" class="headerlink" title="1. Python多版本问题"></a>1. Python多版本问题</h2><h3 id="1-1-环境搭建概览"><a href="#1-1-环境搭建概览" class="headerlink" title="1.1 环境搭建概览"></a>1.1 环境搭建概览</h3><p><img src="https://s3.bmp.ovh/imgs/2023/01/13/8b2a906664642955.png"></p><h3 id="1-2-python下载安装"><a href="#1-2-python下载安装" class="headerlink" title="1.2 python下载安装"></a>1.2 python下载安装</h3><ol><li><p>下载最新稳定版本 <a href="https://www.python.org/">官网地址</a></p></li><li><p>执行安装程序，选择自定义安装<code>Customize installation</code>，并勾选<code>Add python 3.11 to PATH</code>，下一步</p><p><img src="https://s3.bmp.ovh/imgs/2023/01/13/f796dff389b50611.png"></p></li><li><p>Optional Features 保持默认勾选即可，至少保证<code>pip</code>勾选上，下一步</p><p><img src="https://s3.bmp.ovh/imgs/2023/01/13/5eee56687230dc49.png"></p></li><li><p>Advanced Options 保持默认勾选即可，可以更改安装位置，下一步</p><p><img src="https://s3.bmp.ovh/imgs/2023/01/13/c2e50667c17b9705.png"></p></li><li><p>安装成功 <a href="https://docs.python.org/3.11/index.html">官网文档</a></p><p><img src="https://s3.bmp.ovh/imgs/2023/01/13/aceed629d18b1c56.png"></p></li></ol><h3 id="1-3-检验安装是否成功"><a href="#1-3-检验安装是否成功" class="headerlink" title="1.3 检验安装是否成功"></a>1.3 检验安装是否成功</h3><p><code>python -V</code> 命令行显示：Python 3.11.1</p><p><code>pip -V</code> 命令行显示：pip 22.3.1</p><h3 id="1-4-使用pipenv安装虚拟环境"><a href="#1-4-使用pipenv安装虚拟环境" class="headerlink" title="1.4 使用pipenv安装虚拟环境"></a>1.4 使用pipenv安装虚拟环境</h3><ol><li><p>切换到桌面</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd Desktop<br></code></pre></td></tr></table></figure></li><li><p>创建文件夹 fisher，并进入文件夹</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir fisher<br>cd fisher<br></code></pre></td></tr></table></figure></li><li><p>全局安装pipenv，任意目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pipenv<br></code></pre></td></tr></table></figure></li><li><p>和项目绑定，给每一个项目创建pipenv</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipenv install<br></code></pre></td></tr></table></figure></li><li><p>启动pipenv进入虚拟环境</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipenv shell<br></code></pre></td></tr></table></figure></li><li><p>查看虚拟环境安装的包</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip list<br></code></pre></td></tr></table></figure></li><li><p>pipenv常用命令 <a href="https://github.com/pypa/pipenv">官方文档</a></p><ul><li>exit：退出虚拟环境</li><li>pipenv shell：进入虚拟环境</li><li>pipenv install flask：安装包</li><li>pipenv uninstall flask：卸载包</li><li>pipenv graph：项目依赖关系图</li></ul></li></ol><h3 id="1-5-使用pipenv安装flask包"><a href="#1-5-使用pipenv安装flask包" class="headerlink" title="1.5 使用pipenv安装flask包"></a>1.5 使用pipenv安装flask包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipenv install flask<br></code></pre></td></tr></table></figure><h3 id="1-6-IDLE与第一段Python代码"><a href="#1-6-IDLE与第一段Python代码" class="headerlink" title="1.6 IDLE与第一段Python代码"></a>1.6 IDLE与第一段Python代码</h3><p>搜索 IDLE 命令程序，打开对应版本的 IDLE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(&#x27;Hello,World&#x27;)<br>Hello,World<br></code></pre></td></tr></table></figure><p><code>提示：</code></p><ul><li>python通常使用缩进来控制代码格式</li><li>;{}可以不用使用</li></ul><h2 id="2-Python-基本类型"><a href="#2-Python-基本类型" class="headerlink" title="2. Python 基本类型"></a>2. Python 基本类型</h2><h3 id="2-1-Number-数字"><a href="#2-1-Number-数字" class="headerlink" title="2.1 Number 数字"></a>2.1 Number 数字</h3><ol><li><p>分类</p><ul><li><p>整数：int</p></li><li><p>浮点数：float</p><p>其它语言：单精度（float），双精度（double）<br>其它语言：short，int，long</p></li><li><p>bool 布尔类型：表示真假 True False，注意首字母大写<br>对于数字非0即为True<br>对于字符串非空即为True<br>列表、字典…<br><code>None</code> false</p></li><li><p>complex: 复数 36j</p></li></ul></li><li><p>代码示例</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 整数<br>type(1)<br>&lt;class &#x27;int&#x27;&gt;<br>type(-1)<br>&lt;class &#x27;int&#x27;&gt;<br>      <br>// 浮点数<br>type(1.1)<br>&lt;class &#x27;float&#x27;&gt;<br>type(1.1111111)<br>&lt;class &#x27;float&#x27;&gt;<br><br>// 加法<br>type(1+1.2)<br>&lt;class &#x27;float&#x27;&gt;<br>type(1+1.0)<br>&lt;class &#x27;float&#x27;&gt;<br>type(1+1)<br>&lt;class &#x27;int&#x27;&gt;<br><br>// 乘法<br>type(1*1.0)<br>&lt;class &#x27;float&#x27;&gt;<br>type(1*1)<br>&lt;class &#x27;int&#x27;&gt;<br><br>// 除法,得到浮点数<br>type(2/2)<br>&lt;class &#x27;float&#x27;&gt;<br>// 整除,得到整数<br>type(2//2)<br>&lt;class &#x27;int&#x27;&gt;<br>      <br>type(True)<br>&lt;class &#x27;bool&#x27;&gt;<br>type(False)<br>&lt;class &#x27;bool&#x27;&gt;<br>int(True)<br>1<br>int(False)<br>0<br>bool(0)<br>False<br>bool(1)<br>True<br></code></pre></td></tr></table></figure><h3 id="2-2-10、2、8、16进制"><a href="#2-2-10、2、8、16进制" class="headerlink" title="2.2 10、2、8、16进制"></a>2.2 10、2、8、16进制</h3></li><li><p>10在各进中代表的数字</p><ul><li>2进制：0b10 10进制  2</li><li>8进制：0o10 10进制  8</li><li>16进制：0x10 10进制 16</li><li>10进制：10</li></ul></li><li><p>进制间数字转换</p><ul><li><p>其他进制 -&gt; 2进制：bin<br>bin(10)  -&gt; 0b1010<br>bin(0o7) -&gt; 0b111<br>bin(0xE) -&gt; 0b1110</p></li><li><p>其他进制 -&gt; 10进制：int<br>int(0b111) -&gt; 7<br>int(0o77)  -&gt; 63</p></li><li><p>其他进制 -&gt; 16进制：hex<br>hex(888)     -&gt; 0x378<br>hex(0o7777)  -&gt; 0xfff</p></li><li><p>其它进制 -&gt; 8进制:oct<br>oct(0b111)  -&gt; 0o7<br>oct(0x777)  -&gt; 0o3567</p></li></ul></li></ol><h3 id="2-3-字符串-str"><a href="#2-3-字符串-str" class="headerlink" title="2.3  字符串 str"></a>2.3  字符串 str</h3><ol><li><p>单引号，双引号，三引号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">type(&#x27;1&#x27;)<br>&lt;class &#x27;str&#x27;&gt;<br>&quot;let&#x27;s go&quot; = &#x27;let\&#x27;s go&#x27;<br></code></pre></td></tr></table></figure></li><li><p>多行字符串（三引号）</p><p>python 推荐每行宽度最大 79，超出换行,使用```包围字符串，字符串可以任意换行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;&quot;&quot;hello<br>&quot;&quot;&quot;<br>&#x27;hello\n&#x27;<br> print(&quot;&quot;&quot;hello<br>       &quot;&quot;&quot;)<br> &#x27;hello&#x27;<br></code></pre></td></tr></table></figure><p>使用 print 可以去除 <code>\n</code></p></li><li><p>转义字符</p><ul><li><p>无法看见的字符<br>\n换行 \t制表 \r回车</p></li><li><p>与语言本身语法有冲突的字符<br>&#39; 单引号冲突</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(&#x27;hello \n world&#x27;)<br>hello<br>world<br></code></pre></td></tr></table></figure><p>如何输出<code>\n</code>而不换行？将<code>\n</code>进行转义</p><p>实际意义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(&#x27;c:\northwind\northwest&#x27;)<br>c:<br>orthwind<br>orthwest<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(&#x27;c:\\northwind\\northwest&#x27;)<br>c:\\northwind\\northwest<br></code></pre></td></tr></table></figure></li><li><p>原始字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(r&#x27;hello \n world&#x27;)<br>hello \n world<br></code></pre></td></tr></table></figure><p>字符串前面加子母<code>r</code></p></li><li><p>字符串运算</p><ul><li>拼接 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"> // 加法<br>&#x27;hello&#x27;+&#x27;world&#x27;<br>&#x27;helloworld&#x27;<br><br> // 乘法<br> &#x27;hello&#x27;*3<br> &#x27;hellohellohello&#x27;<br></code></pre></td></tr></table></figure></li><li>截取 [] <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 正数代表序号<br>&#x27;hello&#x27;[0]<br>&#x27;h&#x27;<br>// 负数代表从字符串末尾数n次得到的字符<br>&#x27;hello&#x27;[-1]<br>&#x27;o&#x27;<br>// 从第一个字符截取到第个五字符<br>&#x27;hello world&#x27;[0:5]<br>&#x27;hello&#x27;<br>// 从第一个字符截取到倒数第二个字符<br>&#x27;hello world&#x27;[0:-1]<br>&#x27;hello worl&#x27;<br>// 从第六个字符截取到最后一个字符<br>&#x27;hello world&#x27;[6:]<br>&#x27;world&#x27;<br>// 从第一个字符截取到倒数第五个字符<br>&#x27;hello world&#x27;[:-4]<br>&#x27;hello world&#x27;<br>// 从末尾往前数四个字符截取出来<br>&#x27;hello world&#x27;[-4:]<br>&#x27;orld&#x27;<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2-4-列表"><a href="#2-4-列表" class="headerlink" title="2.4 列表"></a>2.4 列表</h3><ol><li><p>定义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">type([1,2,3,4,5,6])<br>&lt;class &#x27;list&#x27;&gt;<br></code></pre></td></tr></table></figure></li><li><p>特性</p><ul><li>内部元素类型不固定，字符串、数字、bool、列表…<br>[1,’hello’,True,[1,2]]</li></ul></li><li><p>基本操作</p><ul><li><p>截取（参考字符串截取）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;新月打击&#x27;,&#x27;苍白之瀑&#x27;,&#x27;月之降临&#x27;,&#x27;月神冲刺&#x27;][0]<br>&#x27;新月打击&#x27;<br></code></pre></td></tr></table></figure></li><li><p>列表相加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;新月打击&#x27;,&#x27;苍白之瀑&#x27;,&#x27;月之降临&#x27;,&#x27;月神冲刺&#x27;]+[&#x27;月神冲刺&#x27;]<br>[&#x27;新月打击&#x27;, &#x27;苍白之瀑&#x27;, &#x27;月之降临&#x27;, &#x27;月神冲刺&#x27;, &#x27;月神冲刺&#x27;]<br></code></pre></td></tr></table></figure></li><li><p>列表乘法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[&#x27;新月打击&#x27;, &#x27;苍白之瀑&#x27;, &#x27;月之降临&#x27;, &#x27;月神冲刺&#x27;, &#x27;月神冲刺&#x27;]*2<br>[&#x27;新月打击&#x27;, &#x27;苍白之瀑&#x27;, &#x27;月之降临&#x27;, &#x27;月神冲刺&#x27;, &#x27;月神冲刺&#x27;, &#x27;新月打击&#x27;, &#x27;苍白之瀑&#x27;, &#x27;月之降临&#x27;, &#x27;月神冲刺&#x27;, &#x27;月神冲刺&#x27;]<br></code></pre></td></tr></table></figure></li></ul><p>列表减不支持法！</p></li></ol><h3 id="2-5-元组"><a href="#2-5-元组" class="headerlink" title="2.5 元组"></a>2.5 元组</h3><ol><li><p>引子（以世界杯分组为例，8个组 每组4个队）</p><p>使用嵌套列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[[&#x27;巴西&#x27;,&#x27;克罗地亚&#x27;,&#x27;墨西哥&#x27;,&#x27;喀麦隆&#x27;],[],[],[],[],[],[],[],[]]<br></code></pre></td></tr></table></figure></li><li><p>元组定义</p><p>形如<code>(1,2,3)</code>、<code>(1,2,True)</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">type((1,2,3))<br>&lt;class &#x27;tuple&#x27;&gt;<br></code></pre></td></tr></table></figure></li><li><p>元组操作</p><ul><li>截取（参考字符串截取）</li></ul><p>特殊情况，一个元素的元组：原因是括号被当做了运算符，后面再加一个,即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">type((1))<br>&lt;class &#x27;int&#x27;&gt;<br>   <br>type((&#x27;1&#x27;))<br>&lt;class &#x27;str&#x27;&gt;<br>   <br>type((1,))<br>&lt;class &#x27;tuple&#x27;&gt;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="2-6-序列总结-str-list-tuple"><a href="#2-6-序列总结-str-list-tuple" class="headerlink" title="2.6 序列总结 str list tuple"></a>2.6 序列总结 <code>str list tuple</code></h3><ol><li><p>序号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;hello world&#x27;[0]<br>[1,2,3][0]<br>(1,2,3)[0]<br></code></pre></td></tr></table></figure></li><li><p>切片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;hello world&#x27;[0:3]<br>[1,2,3][0:]<br>(1,2,3,4)[-1:]<br></code></pre></td></tr></table></figure></li><li><p>加法、乘法</p></li><li><p>判断元素是否存在 <code>in</code> <code>not in</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">3 in [1,2,3]<br><br></code></pre></td></tr></table></figure></li><li><p>长度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">len(&#x27;hello&#x27;)<br></code></pre></td></tr></table></figure></li><li><p>最大值最小值 <code>max min</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">max((1,2,3))<br>max(&#x27;hello&#x27;)<br></code></pre></td></tr></table></figure><p>字母与 <code>ascll码</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ord(&#x27;w&#x27;)<br>119<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-7-集合set"><a href="#2-7-集合set" class="headerlink" title="2.7 集合set"></a>2.7 集合set</h3><ol><li><p>特点：<code>无序</code> <code>不重复</code></p></li><li><p>定义：形如 {1,2,3,4,5,6} 使用 <code>&#123;&#125;</code>包裹元素</p></li><li><p>长度：len({1,2,3})</p></li><li><p>是否存在：<code>in</code> <code>not in</code></p></li><li><p>差集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;1,2,3,4&#125;-&#123;1,3&#125;<br>&#123;2,4&#125;<br></code></pre></td></tr></table></figure><p>交集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;1,2,3&#125;&amp;&#123;2,3&#125;<br>&#123;2, 3&#125;<br></code></pre></td></tr></table></figure><p>合集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;1,2,3,4&#125;|&#123;3,4,9&#125;<br>&#123;1, 2, 3, 4, 9&#125;<br></code></pre></td></tr></table></figure></li><li><p>空集合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 字典<br>type(&#123;&#125;)<br>&lt;class &#x27;dict&#x27;&gt;<br>// 空集合<br>type(set())<br>&lt;class &#x27;set&#x27;&gt;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-8-字典dict"><a href="#2-8-字典dict" class="headerlink" title="2.8 字典dict"></a>2.8 字典dict</h3><ol><li><p>定义：key value 构成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">type(&#123;&#x27;name&#x27;:&#x27;jack&#x27;,&#x27;age&#x27;:18&#125;)<br>&lt;class &#x27;dict&#x27;&gt;<br></code></pre></td></tr></table></figure><p>其他语言：map</p></li><li><p>特点：</p><ul><li>key 不重复</li><li>key 类型可以为 str number</li><li>字典中元素还可以是字典</li><li>key 必须是不可变的类型 int str tuple</li></ul></li><li><p>操作</p><ul><li>根据 key 获取 value<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&#x27;name&#x27;:&#x27;jack&#x27;,&#x27;age&#x27;:18&#125;[&#x27;name&#x27;]<br>&#x27;jack&#x27;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>空字典： {}</p></li></ol><h3 id="2-9-基本数据类型总结"><a href="#2-9-基本数据类型总结" class="headerlink" title="2.9 基本数据类型总结"></a>2.9 基本数据类型总结</h3><p><img src="https://s3.bmp.ovh/imgs/2023/01/14/11ca061bfad3d87c.png" alt="python基本数据类型"></p><h2 id="3-变量与运算符"><a href="#3-变量与运算符" class="headerlink" title="3. 变量与运算符"></a>3. 变量与运算符</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><ol><li><p>什么是变量？</p><p>变量就是一个名字，代表定义的数据： A = [1,2,4]， B = ‘hello world’，C = {‘name’:’jack’}</p></li><li><p>变量命名规则</p><ul><li>首字符不能数字</li><li>只可以使用字母、数字、下划线</li><li>系统关键字（保留关键字）不能用于变量名：and if import …</li><li>区分大小写</li></ul></li><li><p>值类型与引用类型</p><p>值类型：int str tuple（不可改变）<br>引用类型：list set dict（可变）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">a=1<br>b=a<br>a=3<br>print(b)<br>1<br>   <br>a = [1,2,3]<br>b = a<br>a[0] = &#x27;1&#x27;<br>print(b)<br>[&#x27;1&#x27;, 2, 3]<br><br></code></pre></td></tr></table></figure><p>问题：字符串不可变，那下面 a 为何可以进行计算？<br>a = ‘hello’<br>a = a + ‘python’<br>print(a)<br>hellopython</p><p>计算后的a已经不是原来的字符串了！通过 id 函数查看！<br>b = ‘hello’<br>id(b)<br>2330237640816<br>b = b + ‘python’<br>id(b)<br>2330237667696</p></li><li><p>列表的可变与元组的不可变</p><p>a = [1,2,3]<br>id(a)<br>2330237710656<br>a[0] = ‘1’<br>id(a)<br>2330237710656</p><p>a = (1,2,3)<br>id(a)<br>2330237466624<br>a[0] = ‘1’<br>Traceback (most recent call last):<br>File “&lt;pyshell#25&gt;”, line 1, in <module><br>a[0] = ‘1’<br>TypeError: ‘tuple’ object does not support item assignment</p></li></ol><h3 id="3-2-运算符号"><a href="#3-2-运算符号" class="headerlink" title="3.2 运算符号"></a>3.2 运算符号</h3><p><img src="https://s3.bmp.ovh/imgs/2023/01/15/ae5b4ad3fd992412.png"></p><ul><li><p>成员运算符<br>a = 1<br>a in [1,2,3,4,5]<br>True</p><p>b = 6<br>b in [1,2,3,4,5]<br>False</p><p>b = ‘h’<br>b in ‘hello’<br>True</p><p>b not in (1,2,3,4,5)<br>True</p><p>b not in {1,2,3,4,5}</p></li><li><p>比较运算符<br>1 and 2<br>2<br>2 and 1<br>1<br>1 and 0<br>0<br>1 or 2<br>1<br>1 or 0<br>1<br>0 or 1<br>1<br>b = ‘a’<br>b in {‘c’:1}</p></li><li><p>身份运算符<br>is 比较的是两个变量身份是否相等，内存地址<br>== 是比较两个变量取值是否相等<br>a = 1.0<br>b = 1<br>a ==b<br>True<br>a is b<br>False</p><p>a = [1,2,3]<br>b = [3,2,1]<br>a == b<br>True<br>a is b<br>False</p><p>a = (1,2,3)<br>b = (2,1,3)<br>a ==b<br>False<br>a is b<br>False</p></li><li><p>类型判断<br>a = ‘k’<br>isinstance(a,str)<br>True</p><p>isinstance(a,(int,str,float))</p></li><li><p>对象的三个特征：id value type<br>比较方式：<br>vlaue : ==<br>id: is<br>type: isinstance</p></li><li><p>位运算符：把一个数字当做二进制数进行运算</p><ul><li><code>&amp;</code> 按位与<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 2<br>b = 3<br>a &amp; b = 2<br></code></pre></td></tr></table></figure></li><li><code>|</code> 按位或 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 2<br>b = 3<br>a | b = 3<br></code></pre></td></tr></table></figure></li><li><code>^</code> 按位异或</li><li><code>&lt;&lt;</code> 左移动</li><li><code>&gt;&gt;</code>右移动</li></ul></li></ul><h2 id="4-分支、循环、条件与枚举"><a href="#4-分支、循环、条件与枚举" class="headerlink" title="4. 分支、循环、条件与枚举"></a>4. 分支、循环、条件与枚举</h2><h3 id="4-1-表达式"><a href="#4-1-表达式" class="headerlink" title="4.1 表达式"></a>4.1 表达式</h3><ol><li><p>概念<br> 表达式（Expression）是运算符（operator）和操作数（operand）所构成的序列，形如 1 + 1 、a = [1,2,3] 、a &gt; b</p></li><li><p>表达式的优先级</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 1<br>b = 2<br>c = 3<br><br>a + b * c <br>7<br><br>a or b and c<br>1<br></code></pre></td></tr></table></figure><p> <img src="https://s3.bmp.ovh/imgs/2023/01/16/5bdb8b465a3aee61.png" alt="python运算符优先级"></p><p> <code>提示：</code> 推荐使用括号来表达你期望的优先级！</p></li><li><p> 在文本文件中编写 python：vscode</p></li></ol><h3 id="4-2-条件控制-if-elif-else"><a href="#4-2-条件控制-if-elif-else" class="headerlink" title="4.2 条件控制 if elif else"></a>4.2 条件控制 if elif else</h3><ul><li>snippet 片段,tab 自动切换<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">if condition:<br>    pass<br>elif condition:<br>    pass<br>else:<br>    pass<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-循环-while"><a href="#4-3-循环-while" class="headerlink" title="4.3 循环 while"></a>4.3 循环 while</h3><ul><li><p>while</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition:<br>    pass<br></code></pre></td></tr></table></figure></li><li><p>while + else</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">while condition:<br>  pass<br>else:<br>  pass<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-4-循环-for"><a href="#4-4-循环-for" class="headerlink" title="4.4 循环 for"></a>4.4 循环 for</h3><ul><li>for<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">for target_list in expression_list:<br>  pass<br></code></pre></td></tr></table></figure></li><li>for + else<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">for target_list in expression_list:<br>  pass<br>else:<br>  pass<br></code></pre></td></tr></table></figure><code>提示：</code> else 表示 for 循环执行完毕后执行的语句，使用 break 终止则 else 后的语句不执行，continue 则会执行！</li><li>for 与 range<br>for 类似于其它语言的 for-each<br>range 则类似于 fori，range(start,end,step)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = [1,2,3,4,5,6,7,8]<br>for i in range(1,len(a),2):<br>print(a[i],end=&#x27; | &#x27;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-包、模块、函数与变量作用域"><a href="#5-包、模块、函数与变量作用域" class="headerlink" title="5. 包、模块、函数与变量作用域"></a>5. 包、模块、函数与变量作用域</h2><h3 id="5-1-python-工程的组织结构"><a href="#5-1-python-工程的组织结构" class="headerlink" title="5.1 python 工程的组织结构"></a>5.1 python 工程的组织结构</h3><ol><li><p>包：顶级结构，简单理解为一个文件夹（物理表现）</p><ul><li>包在表现形式上是文件夹，文件夹 + <code>__init__.py</code> = 包</li><li><code>__init__.py</code>也是一个模块，它的名字就是这个模块所在的包的包名</li></ul></li><li><p>模块：第二层，可以理解为文件夹下的文件（物理表现）</p></li><li><p>类：第三层</p></li><li><p>函数、变量：并不归属于组织结构，属于类的特性</p></li></ol><h3 id="5-2-import-导入模块"><a href="#5-2-import-导入模块" class="headerlink" title="5.2 import 导入模块"></a>5.2 import 导入模块</h3><ol><li><p>c7.py</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 2<br><br></code></pre></td></tr></table></figure></li><li><p>c8.py</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">import c7<br>   <br>print(c7.a)<br></code></pre></td></tr></table></figure></li><li><p>import 只能导入模块<br>解决引用路径过长问题：import t.c7 as m</p></li></ol><h3 id="5-3-from-import-导入变量"><a href="#5-3-from-import-导入变量" class="headerlink" title="5.3 from import 导入变量"></a>5.3 from import 导入变量</h3><ol><li>语法 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">from t.c7 import a<br>print(a)<br></code></pre></td></tr></table></figure></li><li>导入模块，等价于 import 导入模式 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">from t import c7<br>print(c7.a)<br></code></pre></td></tr></table></figure></li><li>导入多个变量 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">from t.c7 import *<br>print(a)<br>print(b)<br>print(c)<br><br></code></pre></td></tr></table></figure> <code>提示：</code>不推荐使用 * 导入，导入变量不明确直观 利用模块内置变量 <code>__all__</code> 进行 * 导入控制，定义 * 可以导入的全部变量 c7.py     <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">__all__ = [&#x27;a&#x27;,&#x27;c&#x27;]<br>   <br>a = 2<br>c = 3<br>d = 4<br></code></pre></td></tr></table></figure> c8.py <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">from t.c7 import *<br><br>print(a)<br>print(c)<br>print(d)<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-4-init-py-的用法"><a href="#5-4-init-py-的用法" class="headerlink" title="5.4 __init__.py 的用法"></a>5.4 <code>__init__.py</code> 的用法</h3><ol><li>from import 换行<ul><li>\n<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">from c7 import a,b,\n<br>c<br></code></pre></td></tr></table></figure></li><li>()<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">from c7 import (a,b,<br> c)<br></code></pre></td></tr></table></figure></li></ul></li><li>作用一：当一个包被导入时，<code>__init__.py</code>文件被首先执行，可以使用内置变量<code>__all__</code>限制哪些模块被导入</li><li>作用二：批量导入<ul><li>批量导入内置类库<br>t包下的<code>__init__.py</code>文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">import sys<br>import datetime<br>import io<br></code></pre></td></tr></table></figure><code>c9.py</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">import t<br>print(t.sys.path)<br></code></pre></td></tr></table></figure><code>提示：</code>从当前包导入变量，form . import xx</li></ul></li></ol><h3 id="5-5-包与模块的几个常见错误"><a href="#5-5-包与模块的几个常见错误" class="headerlink" title="5.5 包与模块的几个常见错误"></a>5.5 包与模块的几个常见错误</h3><ol><li>包和模块是不会被重复导入的</li><li>避免循环导入 t1 -&gt; t2 -&gt; t3 -&gt; t1</li></ol><h3 id="5-6-模块内置变量"><a href="#5-6-模块内置变量" class="headerlink" title="5.6 模块内置变量"></a>5.6 模块内置变量</h3><ol><li><p>查看内置变量(当前模块所有变量)</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">a = 1<br>b = 2<br>infos = dir()<br>print(infos)<br></code></pre></td></tr></table></figure><p>输出：[‘<strong>annotations</strong>‘, ‘<strong>builtins</strong>‘, ‘<strong>cached</strong>‘, ‘<strong>doc</strong>‘, ‘<strong>file</strong>‘, ‘<strong>loader</strong>‘, ‘<strong>name</strong>‘, ‘<strong>package</strong>‘, ‘<strong>spec</strong>‘, ‘a’, ‘b’]</p><p>常用内置变量：</p><ul><li>name：模块全路径</li><li>package：包全路径</li><li>doc：模块文档注释</li><li>file：当前模块完整物理路径<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">print(&#x27;__name__:&#x27;+__name__)<br>print(&#x27;__package__:&#x27;+__package__)<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__doc__&#x27;</span>+__doc__)</span><br>print(&#x27;__file__:&#x27;+__file__)<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="5-7-入口文件和普通模块内置变量的区别"><a href="#5-7-入口文件和普通模块内置变量的区别" class="headerlink" title="5.7 入口文件和普通模块内置变量的区别"></a>5.7 入口文件和普通模块内置变量的区别</h3><ol><li>入口文件<ul><li>包名：NoneType</li><li>模块名：<code>__main__</code></li><li>file：当前模块相对路径，与模块所在目录有关</li></ul></li><li>普通模块<ul><li>包名：包全路径</li><li>模块名：模块全路径</li><li>file：当前模块物理全路径</li></ul></li></ol><h3 id="5-8-name-的经典应用"><a href="#5-8-name-的经典应用" class="headerlink" title="5.8 __name__的经典应用"></a>5.8 <code>__name__</code>的经典应用</h3><ol><li><p>dir 查看模块或类的变量</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">import sys<br>infos = dir(sys)<br>print(infos)<br></code></pre></td></tr></table></figure></li><li><p>make a script both importable and executable：判断一个 python 脚本是一个可以入口文件还是普通模块</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 入口文件</span><br>if __name__ == &#x27;__main__&#x27;:<br>   print(This is app)<br><br>print(This is a module)<br></code></pre></td></tr></table></figure></li><li><p>将入口文件当做模块运行,进入上层目录执行（模块所在包）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 无需加.py后缀</span><br>python -m t.c15<br></code></pre></td></tr></table></figure></li></ol><h3 id="5-9-相对导入和绝对导入"><a href="#5-9-相对导入和绝对导入" class="headerlink" title="5.9 相对导入和绝对导入"></a>5.9 相对导入和绝对导入</h3><ol><li><p>顶级包</p><p> 入口文件同级的包为顶级宝，入口文件本身不属于任何包</p></li><li><p>绝对导入：</p><p>从顶级包开始到要导入模块的这个路径，入口文件可以使用绝对导入，无法使用相对导入（入口文件<code>__name__</code>为<code>__main__</code>），<br>一定要使用相对导入，使用 python -m 进行运行</p></li><li><p>相对导入：使用 . .. 代表当前目录，上层目录，从当前模块开始数，导入目标模块（本质根据<code>__name__</code>进行导）</p></li></ol><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><h3 id="6-1-认识函数"><a href="#6-1-认识函数" class="headerlink" title="6.1 认识函数"></a>6.1 认识函数</h3><ol><li><p>print(12),round(3.1415,2),help(print),help(round)</p></li><li><p>特点</p><ul><li>功能性</li><li>封装性，隐藏细节</li><li>避免编写重复的代码</li></ul></li></ol><h3 id="6-2-函数的定义及运行特点"><a href="#6-2-函数的定义及运行特点" class="headerlink" title="6.2 函数的定义及运行特点"></a>6.2 函数的定义及运行特点</h3><ol><li>定义函数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">def funcname(parameter_list):<br>    pass<br></code></pre></td></tr></table></figure><ul><li>参数列表可以没有</li><li>返回结果使用 return value，没有 return 则返回 None</li><li>函数需要先定义后调用</li><li>定义一个函数：两个数字相加<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">def add(x,y):<br>    result = x+y<br>    return result<br>   <br>add(1,2)<br></code></pre></td></tr></table></figure></li></ul></li><li>如何让函数返回多个值 元组： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">def damage(skill1,skill2):<br>    <br>    damage1 = skill1 * 3<br>    damage2 = skill2 * 2<br>    return damage1,damage2<br>   <br><span class="hljs-meta">#</span><span class="bash"> 调用1，返回元组tuple</span><br>damages = damage(3,6)<br><span class="hljs-meta">#</span><span class="bash"> 调用2，序列解包</span><br>skill1_damage,skill2_damage = damage(4,8)<br><br></code></pre></td></tr></table></figure></li><li>序列解包与链式赋值</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/python/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><blockquote><p>正则表达式是一个特殊的字符序列，它可以帮我们检测一个字符串是与我们设定的字符序列相匹配。<br>可以快速检索文本、实现一些替换文本的操作，比如：</p><ol><li>检查一串数字是否是电话号码</li><li>检测一个字符串是否是 email</li><li>把一个文本里的单词替换为另一个单词</li></ol></blockquote><h3 id="1-1-初使用"><a href="#1-1-初使用" class="headerlink" title="1.1 初使用"></a>1.1 初使用</h3><ol><li>判断字符串 ‘C|C++|C#|JAVA|Python|Javascript’ 中是否包含 ‘Python’<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">&quot;&quot;&quot; 正则表达式 &quot;&quot;&quot;<br>a = &#x27;C|C++|C#|JAVA|Python|Javascript&#x27;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式一</span><br>print(a.index(&#x27;Python&#x27;) &gt; -1)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式二</span><br>print(&#x27;Python&#x27; in a)<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 方式三</span><br>import re<br><br>r = re.findall(&#x27;Python&#x27;,a)<br>print(len(r) != 0)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/mysql/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="表中插入-10-万行记录"><a href="#表中插入-10-万行记录" class="headerlink" title="表中插入 10 万行记录"></a>表中插入 10 万行记录</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">delimiter ;;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> idata()<br><span class="hljs-keyword">begin</span><br>  <span class="hljs-keyword">declare</span> i <span class="hljs-type">int</span>;<br>  <span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>  while(i<span class="hljs-operator">&lt;=</span><span class="hljs-number">100000</span>)do<br>    <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">values</span>(i, i, i);<br>    <span class="hljs-keyword">set</span> i<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">end</span> while;<br><span class="hljs-keyword">end</span>;;<br>delimiter ;<br><span class="hljs-keyword">call</span> idata();<br></code></pre></td></tr></table></figure><p>![炫酷,炫彩,耀眼](<a href="http://cdn-hw-static.shanhutech.cn/bizhi/staticwp/202209/b631dc50462aeb15da154da91d99558at01007abd70cad4eb97.jpg">http://cdn-hw-static.shanhutech.cn/bizhi/staticwp/202209/b631dc50462aeb15da154da91d99558at01007abd70cad4eb97.jpg</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件编码</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E7%BC%96%E7%A0%81/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="gbk"><a href="#gbk" class="headerlink" title="gbk"></a>gbk</h2><p>gbk 编码中文占用2个字节，英文占用1个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        String s = <span class="hljs-string">&quot;风间ABC&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes3 = s.getBytes(<span class="hljs-string">&quot;gbk&quot;</span>);<br>        <span class="hljs-comment">// gbk 编码中文占用2个字节，英文占用1个字节</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes3) &#123;<br>            <span class="hljs-comment">// 把字节（转换成了int）以16进制的方式显示</span><br>            System.out.print(Integer.toHexString(b &amp; <span class="hljs-number">0xff</span>)+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>提示：&amp; 0xff 保留后8位置（一个字节8位，int占4个字节，展示时前面24位去掉）</p><h2 id="utf-8"><a href="#utf-8" class="headerlink" title="utf-8"></a>utf-8</h2><p>utf-8 编码中文占用3个字节，英文占用1个字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        String s = <span class="hljs-string">&quot;风间ABC&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes1 = s.getBytes();<span class="hljs-comment">// 转换成字节序列，用的是项目默认的编码 utf-8</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes1) &#123;<br>            <span class="hljs-comment">// 把字节（转换成了int）以16进制的方式显示</span><br>            System.out.print(Integer.toHexString(b &amp; <span class="hljs-number">0xff</span>)+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">byte</span>[] bytes2 = s.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-comment">// utf-8 编码中文占用3个字节，英文占用1个字节</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes2) &#123;<br>                System.out.print(Integer.toHexString(b &amp; <span class="hljs-number">0xff</span>)+<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="utf-16be"><a href="#utf-16be" class="headerlink" title="utf-16be"></a>utf-16be</h2><p>java 是双字节编码 utf-16be，java 中一个字符占两个字节<br>java 一个字符是否可以放一个汉字？可以，gbk编码的汉字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        String s = <span class="hljs-string">&quot;风间ABC&quot;</span>;<br>        <span class="hljs-keyword">byte</span>[] bytes4 = s.getBytes(<span class="hljs-string">&quot;utf-16be&quot;</span>);<br>        <span class="hljs-comment">// utf-16be 中文占两个字节，英文占两个字节</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span> b : bytes4) &#123;<br>            System.out.print(Integer.toHexString(b &amp; <span class="hljs-number">0xff</span>)+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="字节序列转字符串"><a href="#字节序列转字符串" class="headerlink" title="字节序列转字符串"></a>字节序列转字符串</h2><p>当你的字节序列是某种编码时，这个时候想把字节序列变成字符串，<br>也需要用这种编码方式，否则会出现乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>        String s = <span class="hljs-string">&quot;风间ABC&quot;</span>;<br>        String str1 = <span class="hljs-keyword">new</span> String(bytes4);<span class="hljs-comment">// 用项目默认的编码</span><br>        System.out.println(str1);<br><br>        String str2 = <span class="hljs-keyword">new</span> String(bytes4, <span class="hljs-string">&quot;utf-16be&quot;</span>);<br>        System.out.println(str2);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="项目间拷贝文件"><a href="#项目间拷贝文件" class="headerlink" title="项目间拷贝文件"></a>项目间拷贝文件</h2><p>文本文件就是字节序列，可以是任意编码格式<br>eclipse不同项目之间拷贝文件，编码不同会导致乱码，复制内容则会自动转换编码格式<br>​<br><strong>完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>utf8 中文乱码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义持久层框架</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、JDBC-的使用与存在的问题"><a href="#一、JDBC-的使用与存在的问题" class="headerlink" title="一、JDBC 的使用与存在的问题"></a>一、JDBC 的使用与存在的问题</h2><h3 id="1-编码流程"><a href="#1-编码流程" class="headerlink" title="1. 编码流程"></a>1. 编码流程</h3><blockquote><p>加载驱动 -&gt; 获取连接 -&gt; 定义 sql -&gt; 获取预处理 statement并设置参数 -&gt; 执行 sql -&gt; 封装结果集 -&gt; 释放资源</p></blockquote><h3 id="2-引入-mysql-驱动依赖"><a href="#2-引入-mysql-驱动依赖" class="headerlink" title="2. 引入 mysql 驱动依赖"></a>2. 引入 mysql 驱动依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> server;<br><br><span class="hljs-keyword">import</span> pojo.User;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 数据库连接</span><br>        Connection connection = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 预处理 statement</span><br>        PreparedStatement preparedStatement = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 结果集</span><br>        ResultSet resultSet = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 加载驱动</span><br>            Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br><br>            <span class="hljs-comment">// 获取连接</span><br>            String url = <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8&amp;characterEncoding=UTF-8&quot;</span>;<br>            String username = <span class="hljs-string">&quot;root&quot;</span>;<br>            String password = <span class="hljs-string">&quot;123456&quot;</span>;<br>            connection = DriverManager.getConnection(url, username, password);<br><br>            <span class="hljs-comment">// 获取预处理 statement</span><br>            String sql = <span class="hljs-string">&quot;select * from user where id = ?&quot;</span>;<br>            preparedStatement = connection.prepareStatement(sql);<br>            preparedStatement.setInt(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>            <span class="hljs-comment">// 执行 sql</span><br>            resultSet = preparedStatement.executeQuery();<br><br>            <span class="hljs-comment">// 遍历结果集封装到 User</span><br>            User user = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>                <span class="hljs-keyword">int</span> id = resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                String uname = resultSet.getString(<span class="hljs-string">&quot;username&quot;</span>);<br>                user = User.builder()<br>                        .id(id)<br>                        .username(uname).build();<br>            &#125;<br>            System.out.println(user);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 释放资源</span><br>            <span class="hljs-keyword">if</span> (resultSet !=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    resultSet.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (preparedStatement !=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    preparedStatement.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection!=<span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.close();<br>                &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red">Tips</font>: mysql5 以上的 Driver 使用 <code>com.mysql.cj.jdbc.Driver</code> 而非 <code>com.mysql.jdbc.Driver</code></p><h3 id="4-JDBC-方式存在的问题"><a href="#4-JDBC-方式存在的问题" class="headerlink" title="4. JDBC 方式存在的问题"></a>4. JDBC 方式存在的问题</h3><ol><li><p>硬编码问题：（解决思路：配置文件）</p><ul><li>数据库配置信息</li><li>sql 语句、设置参数、获取结果集</li></ul></li><li><p>多次操作会频繁创建、释放数据库连接（解决思路：连接池）</p></li><li><p>手动封装结果集较为繁琐（解决思路：反射、内省）</p></li></ol><h2 id="二、-自定义持久层框架"><a href="#二、-自定义持久层框架" class="headerlink" title="二、 自定义持久层框架"></a>二、 自定义持久层框架</h2><blockquote><p>框架端 + 使用端</p></blockquote><h3 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1. 思路分析"></a>1. 思路分析</h3><p><strong>使用端（项目）的工作：</strong></p><pre><code>1. 引入自定义持久层框架的 jar 包2. 编写两部分配置文件：    - sqlMapConfig.xml: 设置数据源并引入 mapper.xml 文件      - mapper.xml: sql 语句的编写</code></pre><p><strong>框架端的工作：</strong></p><pre><code>本质就是对 JDBC 代码进行了封装:    1. 加载配置文件：根据配置文件的路径，加载配置文件成字节输入流保存储在内存中      创建 Resources 类，方法：InputStrem getResourceAsStream(String path)    2. 创建两个 JavaBean（容器对象），存放的就是配置文件解析出来的内容：        Configuration: 核心配置类，存放 sqlMapConfig.xml 解析出来的内容        MappedStatement: 映射配置类，存放 mapper.xml 解析出来的内容    3. 解析配置文件：dom4j 类        创建类：SqlSessionFactoryBuilder 方法：build(InputStream in)        第一：使用 dom4j 解析配置文件，将解析出来的内容封装到容器对象        第二：创建 SqlSessionFactory 对象 -&gt; 生产 SqlSession（会话对象）：工厂模式    4. 创建 SqlSessionFactory 接口及实现类 DefaultSqlSessionFactory        第一：openSession()：生产 SqlSession        5. 创建 SqlSession 接口及 DefaultSqlSession        定义数据库的 crud 操作：selectList() selectOne() update() delete()    6. 创建 Executor 接口及实现类 SimpleExecutor 实现类        query(Configuration conf, MappedStatement ms, Object... params)：执行的就是 JDBC 代码</code></pre><h3 id="2-新建使用端项目"><a href="#2-新建使用端项目" class="headerlink" title="2. 新建使用端项目"></a>2. 新建使用端项目</h3><h4 id="2-1-创建-sqlMapConfig-xml"><a href="#2-1-创建-sqlMapConfig-xml" class="headerlink" title="2.1 创建 sqlMapConfig.xml"></a>2.1 创建 sqlMapConfig.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--配置数据源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClass&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbcUrl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-comment">&lt;!--引入mapper文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper.xml&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="2-2-创建-mapper-xml"><a href="#2-2-创建-mapper-xml" class="headerlink" title="2.2 创建 mapper.xml"></a>2.2 创建 mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectOne&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;pro.fengjian.pojo.User&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pro.fengjian.pojo.User&quot;</span>&gt;</span><br>        select * from user where id = #&#123;id&#125; and username=#&#123;username&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;pro.fengjian.pojo.User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-新建框架端项目"><a href="#3-新建框架端项目" class="headerlink" title="3. 新建框架端项目"></a>3. 新建框架端项目</h3><h4 id="3-1-引入依赖"><a href="#3-1-引入依赖" class="headerlink" title="3.1 引入依赖"></a>3.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- mysql 驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.25<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数据库连接池 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 日志相关 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 解析 xml --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dom4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- xpath 语法 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxen<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 代码简略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-新建相关类来保存从使用端读取的配置文件信息"><a href="#3-2-新建相关类来保存从使用端读取的配置文件信息" class="headerlink" title="3.2 新建相关类来保存从使用端读取的配置文件信息"></a>3.2 新建相关类来保存从使用端读取的配置文件信息</h4><p>配置信息类：Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Configuration</span> </span>&#123;<br><br>    <span class="hljs-comment">// 数据源</span><br>    <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-comment">// map 集合</span><br>    <span class="hljs-keyword">private</span> Map&lt;String, MappedStatement&gt; mappedStatementMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>sql 映射类：MappedStatement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> config;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MappedStatement</span> </span>&#123;<br><br>    <span class="hljs-comment">// id</span><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <br>    <span class="hljs-comment">// sql 语句</span><br>    <span class="hljs-keyword">private</span> String sql;<br><br>    <span class="hljs-comment">// 参数类型</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; parameterType;<br><br>    <span class="hljs-comment">// 返回值类型</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; resultType;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-3-读取配置文件到流："><a href="#3-3-读取配置文件到流：" class="headerlink" title="3.3 读取配置文件到流："></a>3.3 读取配置文件到流：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> config;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Resources</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title">getResourcesAsStream</span><span class="hljs-params">(String path)</span> </span>&#123;<br><br>        InputStream resourceAsStream = Resources.class.getClassLoader().getResourceAsStream(path);<br><br>        <span class="hljs-keyword">return</span> resourceAsStream;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-4-解析-sqlMapConfig-xml-文件封装到-Configuration-类"><a href="#3-4-解析-sqlMapConfig-xml-文件封装到-Configuration-类" class="headerlink" title="3.4 解析 sqlMapConfig.xml 文件封装到 Configuration 类"></a>3.4 解析 sqlMapConfig.xml 文件封装到 Configuration 类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> config;<br><br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<br><span class="hljs-keyword">import</span> io.Resources;<br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> pojo.Configuration;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLConfigureBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">XMLConfigureBuilder</span><span class="hljs-params">(Configuration configuration)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.configuration = configuration;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Configuration <span class="hljs-title">parseConfiguration</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> DocumentException, PropertyVetoException </span>&#123;<br><br>        Document document = <span class="hljs-keyword">new</span> SAXReader().read(inputStream);<br><br>        <span class="hljs-comment">// &lt;configuration&gt;</span><br>        Element rootElement = document.getRootElement();<br>        List&lt;Element&gt; propertyElements = rootElement.selectNodes(<span class="hljs-string">&quot;//property&quot;</span>);<br><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-keyword">for</span> (Element propertyElement : propertyElements) &#123;<br>            String name = propertyElement.attributeValue(<span class="hljs-string">&quot;name&quot;</span>);<br>            String value = propertyElement.attributeValue(<span class="hljs-string">&quot;value&quot;</span>);<br>            properties.put(name, value);<br>        &#125;<br><br>        <span class="hljs-comment">// 连接池</span><br>        ComboPooledDataSource comboPooledDataSource = <span class="hljs-keyword">new</span> ComboPooledDataSource();<br>        comboPooledDataSource.setDriverClass(properties.getProperty(<span class="hljs-string">&quot;driverClass&quot;</span>));<br>        comboPooledDataSource.setJdbcUrl(properties.getProperty(<span class="hljs-string">&quot;jdbcUrl&quot;</span>));<br>        comboPooledDataSource.setUser(properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>));<br>        comboPooledDataSource.setPassword(properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br><br>        <span class="hljs-comment">// 填充 Configuration</span><br>        configuration.setDataSource(comboPooledDataSource);<br><br>        <span class="hljs-comment">// mapper 部分</span><br>        List&lt;Element&gt; mapperElements = rootElement.selectNodes(<span class="hljs-string">&quot;//mapper&quot;</span>);<br>        XMLMapperBuilder xmlMapperBuilder = <span class="hljs-keyword">new</span> XMLMapperBuilder(configuration);<br>        <span class="hljs-keyword">for</span> (Element mapperElement : mapperElements) &#123;<br>            String mapperPath = mapperElement.attributeValue(<span class="hljs-string">&quot;resource&quot;</span>);<br>            InputStream resourcesAsStream = Resources.getResourcesAsStream(mapperPath);<br>            xmlMapperBuilder.parse(resourcesAsStream);<br>        &#125;<br>        <span class="hljs-keyword">return</span> configuration;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-5-解析-mapper-xml-文件-封装到-MappedStatement-和-Configuration"><a href="#3-5-解析-mapper-xml-文件-封装到-MappedStatement-和-Configuration" class="headerlink" title="3.5 解析 mapper.xml 文件 封装到 MappedStatement 和 Configuration"></a>3.5 解析 mapper.xml 文件 封装到 MappedStatement 和 Configuration</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> config;<br><br><span class="hljs-keyword">import</span> org.dom4j.Document;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.dom4j.Element;<br><span class="hljs-keyword">import</span> org.dom4j.io.SAXReader;<br><span class="hljs-keyword">import</span> pojo.Configuration;<br><span class="hljs-keyword">import</span> pojo.MappedStatement;<br><br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XMLMapperBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">XMLMapperBuilder</span><span class="hljs-params">(Configuration configuration)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.configuration = configuration;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">parse</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> DocumentException, ClassNotFoundException </span>&#123;<br><br>        Document document = <span class="hljs-keyword">new</span> SAXReader().read(inputStream);<br><br>        <span class="hljs-comment">// &lt;mapper&gt;</span><br>        Element rootElement = document.getRootElement();<br><br>        String namespace = rootElement.attributeValue(<span class="hljs-string">&quot;namespace&quot;</span>);<br><br>        List&lt;Element&gt; selectNodes = document.selectNodes(<span class="hljs-string">&quot;//select&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element element : selectNodes) &#123;<br>            String id = element.attributeValue(<span class="hljs-string">&quot;id&quot;</span>);<span class="hljs-comment">// id 值</span><br>            String parameterType = element.attributeValue(<span class="hljs-string">&quot;parameterType&quot;</span>);<span class="hljs-comment">// 参数类型</span><br>            String resultType = element.attributeValue(<span class="hljs-string">&quot;resultType&quot;</span>);<span class="hljs-comment">// 返回值类型</span><br><br>            <span class="hljs-comment">// 获取参数和返回值类型</span><br>            Class&lt;?&gt; parameterTypeClass = <span class="hljs-keyword">this</span>.getClassType(parameterType);<br>            Class&lt;?&gt; resultTypeClass = <span class="hljs-keyword">this</span>.getClassType(resultType);<br><br>            <span class="hljs-comment">// statementId</span><br>            String statementId = namespace + <span class="hljs-string">&quot;.&quot;</span> + id;<br>            <span class="hljs-comment">// sql</span><br>            String sql = element.getTextTrim();<br>            <span class="hljs-comment">// 封装到 MappedStatement</span><br>            MappedStatement mappedStatement = <span class="hljs-keyword">new</span> MappedStatement();<br>            mappedStatement.setId(id);<br>            mappedStatement.setParameterType(parameterTypeClass);<br>            mappedStatement.setResultType(resultTypeClass);<br>            mappedStatement.setSql(sql);<br>            <span class="hljs-comment">// 填充 Configuration</span><br>            configuration.getMappedStatementMap().put(statementId,mappedStatement);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; getClassType(String className) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">return</span> Class.forName(className);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-6-构建者模式构建-SqlSessionFactory"><a href="#3-6-构建者模式构建-SqlSessionFactory" class="headerlink" title="3.6 构建者模式构建 SqlSessionFactory"></a>3.6 构建者模式构建 SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sqlSession;<br><br><span class="hljs-keyword">import</span> config.XMLConfigureBuilder;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> pojo.Configuration;<br><br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SqlSessionFactoryBuilder</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SqlSessionFactoryBuilder</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.configuration = <span class="hljs-keyword">new</span> Configuration();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title">build</span><span class="hljs-params">(InputStream inputStream)</span> <span class="hljs-keyword">throws</span> DocumentException, PropertyVetoException, ClassNotFoundException </span>&#123;<br><br>        <span class="hljs-comment">// 1. 解析配置文件，封装到 Configuration</span><br>        XMLConfigureBuilder xmlConfigureBuilder = <span class="hljs-keyword">new</span> XMLConfigureBuilder(configuration);<br>        Configuration configuration = xmlConfigureBuilder.parseConfiguration(inputStream);<br><br>        <span class="hljs-comment">// 2. 创建 SqlSessionFactory</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> DefaultSqlSessionFactory(configuration);<br>        <span class="hljs-keyword">return</span> sqlSessionFactory;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="3-7-sqlSessionFactory-开启-sqlSession"><a href="#3-7-sqlSessionFactory-开启-sqlSession" class="headerlink" title="3.7 sqlSessionFactory 开启 sqlSession"></a>3.7 sqlSessionFactory 开启 sqlSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> sqlSession;<br><br><span class="hljs-keyword">import</span> pojo.Configuration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultSqlSessionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SqlSessionFactory</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultSqlSessionFactory</span><span class="hljs-params">(Configuration configuration)</span> </span>&#123;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SqlSession <span class="hljs-title">openSession</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DefaultSqlSession(configuration);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-8-sqlSession-编写-sql-方法"><a href="#3-8-sqlSession-编写-sql-方法" class="headerlink" title="3.8 sqlSession 编写 sql 方法"></a>3.8 sqlSession 编写 sql 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sqlSession;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br><br>    &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">selectList</span><span class="hljs-params">(String statementId, Object... param)</span></span>;<br><br>    &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">selectOne</span><span class="hljs-params">(String statementId, Object... param)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-9-defaultSqlSession"><a href="#3-9-defaultSqlSession" class="headerlink" title="3.9 defaultSqlSession"></a>3.9 defaultSqlSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sqlSession;<br><br><span class="hljs-keyword">import</span> pojo.Configuration;<br><span class="hljs-keyword">import</span> pojo.MappedStatement;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DefaultSqlSession</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SqlSession</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Configuration configuration;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DefaultSqlSession</span><span class="hljs-params">(Configuration configuration)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.configuration = configuration;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行器对象</span><br>    <span class="hljs-keyword">private</span> Executor simpleExecutor = <span class="hljs-keyword">new</span> SimpleExecutor();<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">selectList</span><span class="hljs-params">(String statementId, Object... param)</span> </span>&#123;<br>        MappedStatement mappedStatement = configuration.getMappedStatementMap().get(statementId);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.simpleExecutor.query(configuration, mappedStatement, param);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">selectOne</span><span class="hljs-params">(String statementId, Object... param)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用 selectList</span><br>        List&lt;Object&gt; objects = <span class="hljs-keyword">this</span>.selectList(statementId, param);<br>        <span class="hljs-keyword">if</span> (objects.size() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> (T) objects.get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;期望查询条数 1 条，但返回多条!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3-10-Executor-执行器，实际-sql-操作类"><a href="#3-10-Executor-执行器，实际-sql-操作类" class="headerlink" title="3.10 Executor 执行器，实际 sql 操作类"></a>3.10 Executor 执行器，实际 sql 操作类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> sqlSession;<br><br><span class="hljs-keyword">import</span> pojo.BoundSql;<br><span class="hljs-keyword">import</span> pojo.Configuration;<br><span class="hljs-keyword">import</span> pojo.MappedStatement;<br><span class="hljs-keyword">import</span> utils.GenericTokenParser;<br><span class="hljs-keyword">import</span> utils.ParameterMapping;<br><span class="hljs-keyword">import</span> utils.ParameterMappingTokenHandler;<br><br><span class="hljs-keyword">import</span> java.beans.IntrospectionException;<br><span class="hljs-keyword">import</span> java.beans.PropertyDescriptor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Executor</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Connection connection;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-function">List&lt;E&gt; <span class="hljs-title">query</span><span class="hljs-params">(Configuration configuration, MappedStatement mappedStatement, Object[] param)</span> <span class="hljs-keyword">throws</span> SQLException, NoSuchFieldException, IllegalAccessException, InstantiationException, IntrospectionException, InvocationTargetException </span>&#123;<br><br>        <span class="hljs-comment">// 获取连接</span><br>        connection = configuration.getDataSource().getConnection();<br><br>        <span class="hljs-comment">// 对 mapper 中的 sql 进行解析</span><br>        <span class="hljs-comment">// 1. 将 #&#123;xx&#125; -&gt; ?</span><br>        <span class="hljs-comment">// 2. 封装参数列表 #&#123;id&#125; #&#123;username&#125; 中的 id username 等</span><br>        BoundSql boundSql = <span class="hljs-keyword">this</span>.getBoundSql(mappedStatement.getSql());<br>        String finalSql = boundSql.getSqlText();<br><br>        <span class="hljs-comment">// 设置 sql 参数，获取 preparedStatement</span><br>        PreparedStatement preparedStatement = connection.prepareStatement(finalSql);<br>        List&lt;ParameterMapping&gt; parameterMappingList = boundSql.getParameterMappingList();<br>        <span class="hljs-comment">// 参数类型</span><br>        Class&lt;?&gt; parameterType = mappedStatement.getParameterType();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterMappingList.size(); i++) &#123;<br>            String name = parameterMappingList.get(i).getContent();<br>            Field declaredField = parameterType.getDeclaredField(name);<br>            declaredField.setAccessible(<span class="hljs-keyword">true</span>);<br>            Object o = declaredField.get(param[<span class="hljs-number">0</span>]);<span class="hljs-comment">// 参数 user</span><br>            preparedStatement.setObject(i + <span class="hljs-number">1</span>, o);<br>        &#125;<br><br>        <span class="hljs-comment">// 执行 sql，封装结果集</span><br>        ResultSet resultSet = preparedStatement.executeQuery();<br>        Class&lt;?&gt; resultType = mappedStatement.getResultType();<br>        List&lt;E&gt; result = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">while</span> (resultSet.next()) &#123;<br>            E e = (E) resultType.newInstance();<br>            ResultSetMetaData metaData = resultSet.getMetaData();<br>            <span class="hljs-keyword">int</span> columnCount = metaData.getColumnCount();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>                <span class="hljs-comment">// 属性名</span><br>                String columnName = metaData.getColumnName(i);<br>                <span class="hljs-comment">// 属性值</span><br>                Object value = resultSet.getObject(columnName);<br>                <span class="hljs-comment">// 创建属性描述器，为属性增加写读方法</span><br>                PropertyDescriptor propertyDescriptor = <span class="hljs-keyword">new</span> PropertyDescriptor(columnName, resultType);<br>                <span class="hljs-comment">// 获取写方法</span><br>                Method writeMethod = propertyDescriptor.getWriteMethod();<br>                <span class="hljs-comment">// 写入值</span><br>                writeMethod.invoke(e, value);<br>            &#125;<br>            result.add(e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> BoundSql <span class="hljs-title">getBoundSql</span><span class="hljs-params">(String sql)</span> </span>&#123;<br>        <span class="hljs-comment">// 标记处理类：主要配合通用标记解析器 GenericTokenParser 类完成对配置文件等的</span><br>        <span class="hljs-comment">// 解析工作，其中 TokenHandler 主要完成处理</span><br>        ParameterMappingTokenHandler parameterMappingTokenHandler = <span class="hljs-keyword">new</span> ParameterMappingTokenHandler();<br><br>        <span class="hljs-comment">// GenericTokenParser：通用的标记解析器，完成了代码片段中占位符的解析，然后再根据</span><br>        <span class="hljs-comment">// 给定的标记解析器（TokenHandler）进行表达式的处理</span><br>        <span class="hljs-comment">// openToken closeToken handler</span><br>        GenericTokenParser genericTokenParser = <span class="hljs-keyword">new</span> GenericTokenParser(<span class="hljs-string">&quot;#&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, parameterMappingTokenHandler);<br>        String parse = genericTokenParser.parse(sql);<br><br>        List&lt;utils.ParameterMapping&gt; parameterMappings = parameterMappingTokenHandler.getParameterMappings();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BoundSql(parse,parameterMappings);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font color="red">Tips:</font><br>getDeclaredFiled 仅能获取类本身的属性成员（包括私有、共有、保护）<br>getField 仅能获取类(及其父类可以自己测试) public属性成员</p><h4 id="3-11-解析类"><a href="#3-11-解析类" class="headerlink" title="3.11 解析类"></a>3.11 解析类</h4><p>GenericTokenParser:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    Copyright 2009-2017 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> *    you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> *    You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> *    See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> *    limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericTokenParser</span> </span>&#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String openToken; <span class="hljs-comment">//开始标记</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String closeToken; <span class="hljs-comment">//结束标记</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenHandler handler; <span class="hljs-comment">//标记处理器</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GenericTokenParser</span><span class="hljs-params">(String openToken, String closeToken, TokenHandler handler)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.openToken = openToken;<br>    <span class="hljs-keyword">this</span>.closeToken = closeToken;<br>    <span class="hljs-keyword">this</span>.handler = handler;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 解析$&#123;&#125;和#&#123;&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> text</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   * 该方法主要实现了配置文件、脚本等片段中占位符的解析、处理工作，并返回最终需要的数据。</span><br><span class="hljs-comment">   * 其中，解析工作由该方法完成，处理工作是由处理器handler的handleToken()方法来实现</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">parse</span><span class="hljs-params">(String text)</span> </span>&#123;<br>    <span class="hljs-comment">// 验证参数问题，如果是null，就返回空字符串。</span><br>    <span class="hljs-keyword">if</span> (text == <span class="hljs-keyword">null</span> || text.isEmpty()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 下面继续验证是否包含开始标签，如果不包含，默认不是占位符，直接原样返回即可，否则继续执行。</span><br>    <span class="hljs-keyword">int</span> start = text.indexOf(openToken, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (start == -<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> text;<br>    &#125;<br><br>   <span class="hljs-comment">// 把text转成字符数组src，并且定义默认偏移量offset=0、存储最终需要返回字符串的变量builder，</span><br>    <span class="hljs-comment">// text变量中占位符对应的变量名expression。判断start是否大于-1(即text中是否存在openToken)，如果存在就执行下面代码</span><br>    <span class="hljs-keyword">char</span>[] src = text.toCharArray();<br>    <span class="hljs-keyword">int</span> offset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">final</span> StringBuilder builder = <span class="hljs-keyword">new</span> StringBuilder();<br>    StringBuilder expression = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">while</span> (start &gt; -<span class="hljs-number">1</span>) &#123;<br>     <span class="hljs-comment">// 判断如果开始标记前如果有转义字符，就不作为openToken进行处理，否则继续处理</span><br>      <span class="hljs-keyword">if</span> (start &gt; <span class="hljs-number">0</span> &amp;&amp; src[start - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\\&#x27;</span>) &#123;<br>        builder.append(src, offset, start - offset - <span class="hljs-number">1</span>).append(openToken);<br>        offset = start + openToken.length();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//重置expression变量，避免空指针或者老数据干扰。</span><br>        <span class="hljs-keyword">if</span> (expression == <span class="hljs-keyword">null</span>) &#123;<br>          expression = <span class="hljs-keyword">new</span> StringBuilder();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          expression.setLength(<span class="hljs-number">0</span>);<br>        &#125;<br>        builder.append(src, offset, start - offset);<br>        offset = start + openToken.length();<br>        <span class="hljs-keyword">int</span> end = text.indexOf(closeToken, offset);<br>        <span class="hljs-keyword">while</span> (end &gt; -<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">////存在结束标记时</span><br>          <span class="hljs-keyword">if</span> (end &gt; offset &amp;&amp; src[end - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\\&#x27;</span>) &#123;<span class="hljs-comment">//如果结束标记前面有转义字符时</span><br>            <span class="hljs-comment">// this close token is escaped. remove the backslash and continue.</span><br>            expression.append(src, offset, end - offset - <span class="hljs-number">1</span>).append(closeToken);<br>            offset = end + closeToken.length();<br>            end = text.indexOf(closeToken, offset);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不存在转义字符，即需要作为参数进行处理</span><br>            expression.append(src, offset, end - offset);<br>            offset = end + closeToken.length();<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (end == -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// close token was not found.</span><br>          builder.append(src, start, src.length - start);<br>          offset = src.length;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">//首先根据参数的key（即expression）进行参数处理，返回?作为占位符</span><br>          builder.append(handler.handleToken(expression.toString()));<br>          offset = end + closeToken.length();<br>        &#125;<br>      &#125;<br>      start = text.indexOf(openToken, offset);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (offset &lt; src.length) &#123;<br>      builder.append(src, offset, src.length - offset);<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ParameterMapping:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> utils;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterMapping</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ParameterMapping</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getContent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br>&#125;<br><br>```java<br><span class="hljs-keyword">package</span> utils;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterMappingTokenHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">TokenHandler</span> </span>&#123;<br><span class="hljs-keyword">private</span> List&lt;ParameterMapping&gt; parameterMappings = <span class="hljs-keyword">new</span> ArrayList&lt;ParameterMapping&gt;();<br><br><span class="hljs-comment">// context是参数名称 #&#123;id&#125; #&#123;username&#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">handleToken</span><span class="hljs-params">(String content)</span> </span>&#123;<br>parameterMappings.add(buildParameterMapping(content));<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;?&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> ParameterMapping <span class="hljs-title">buildParameterMapping</span><span class="hljs-params">(String content)</span> </span>&#123;<br>ParameterMapping parameterMapping = <span class="hljs-keyword">new</span> ParameterMapping(content);<br><span class="hljs-keyword">return</span> parameterMapping;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;ParameterMapping&gt; <span class="hljs-title">getParameterMappings</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> parameterMappings;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParameterMappings</span><span class="hljs-params">(List&lt;ParameterMapping&gt; parameterMappings)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.parameterMappings = parameterMappings;<br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>TokenHandler: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    Copyright 2009-2015 the original author or authors.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment"> *    you may not use this file except in compliance with the License.</span><br><span class="hljs-comment"> *    You may obtain a copy of the License at</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *       http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *    Unless required by applicable law or agreed to in writing, software</span><br><span class="hljs-comment"> *    distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="hljs-comment"> *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment"> *    See the License for the specific language governing permissions and</span><br><span class="hljs-comment"> *    limitations under the License.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Clinton Begin</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TokenHandler</span> </span>&#123;<br>  <span class="hljs-function">String <span class="hljs-title">handleToken</span><span class="hljs-params">(String content)</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.Resources;<br><span class="hljs-keyword">import</span> org.dom4j.DocumentException;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> pro.fengjian.User;<br><span class="hljs-keyword">import</span> sqlSession.SqlSession;<br><span class="hljs-keyword">import</span> sqlSession.SqlSessionFactory;<br><span class="hljs-keyword">import</span> sqlSession.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.beans.IntrospectionException;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IPersistenceTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIPersistence</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException, PropertyVetoException, ClassNotFoundException, IllegalAccessException, IntrospectionException, InstantiationException, SQLException, InvocationTargetException, NoSuchFieldException </span>&#123;<br><br>        InputStream inputStream = Resources.getResourcesAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        User user = User.builder().id(<span class="hljs-number">1</span>).username(<span class="hljs-string">&quot;jack&quot;</span>).build();<br>        user = sqlSession.selectOne(<span class="hljs-string">&quot;UserMapper.selectOne&quot;</span>,user);<br>        System.out.println(user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-使用代理模式进行优化"><a href="#5-使用代理模式进行优化" class="headerlink" title="5. 使用代理模式进行优化"></a>5. 使用代理模式进行优化</h3><p>自定义持久层框架存在的问题：</p><pre><code>1. Dao 层使用自定义持久层框架，代码重复，整个操作过程模板重复（加载配置文件、创建 SqlSessionFactory、生产 sqlSession）2. satementId 存在硬编码，每次查询时还需要重复编写 statementId,比如 `UserMapper.selectOne`</code></pre><p>解决思路：</p><pre><code>1. 使用代理模式生成 Dao 层接口的代理实现类，代理对象调用接口中的任意方法，都会执行 invoke 方法2. 约定 statementId = 接口全路径 + 方法名</code></pre><p>SqlSession 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMappper</span><span class="hljs-params">(Class&lt;?&gt; mapperClass)</span></span>;<br></code></pre></td></tr></table></figure><p>DefaultSqlSession 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getMapper</span><span class="hljs-params">(Class&lt;?&gt; mapperClass)</span> </span>&#123;<br>    <span class="hljs-comment">// 使用 jdk 动态代理为 Dao 接口生成代理对象并返回，使用代理对象调用接口中的任意方法，都是执行 invoke 方法</span><br>    Object proxyInstance = Proxy.newProxyInstance(DefaultSqlSession.class.getClassLoader(), <span class="hljs-keyword">new</span> Class[]&#123;mapperClass&#125;, <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>            <span class="hljs-comment">// 底层都是执行 jdbc 代码 // 根据不同情况调用 selectOne 或 selectList 方法</span><br>            <span class="hljs-comment">// 准备参数 1: statementId：sql 语句唯一标识：namespace.id</span><br>            <span class="hljs-comment">// 约定：namespace 为接口全路径，id 为方法名</span><br>            String methodName = method.getName();<br>            String className = method.getDeclaringClass().getName();<br>            String statementId = className + <span class="hljs-string">&quot;.&quot;</span> + methodName;<br><br>            <span class="hljs-comment">// 准备参数 2： params ： args</span><br>            <span class="hljs-comment">// 根据方法返回值判断是调用 selectList 还是 selectOne，selectList 返回值包含泛型化符号：&lt;&gt;</span><br>            <span class="hljs-comment">// 获取被调用方法返回值类型</span><br>            Type genericReturnType = method.getGenericReturnType();<br>            <span class="hljs-comment">// 判断是否进行了泛型类型参数化</span><br>            <span class="hljs-keyword">if</span> (genericReturnType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>                List&lt;Object&gt; objects = selectList(statementId, args);<br>                <span class="hljs-keyword">return</span> objects;<br>            &#125;<br>            <span class="hljs-keyword">return</span> selectOne(statementId, args);<br>        &#125;<br>    &#125;);<br><br><br>    <span class="hljs-keyword">return</span> (T) proxyInstance;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testIPersistence</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> DocumentException, PropertyVetoException, ClassNotFoundException, IllegalAccessException, IntrospectionException, InstantiationException, SQLException, InvocationTargetException, NoSuchFieldException </span>&#123;<br><br>    InputStream inputStream = Resources.getResourcesAsStream(<span class="hljs-string">&quot;sqlMapConfig.xml&quot;</span>);<br>    SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>    SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>    User user = User.builder()<br>            .id(<span class="hljs-number">1</span>)<br>            .username(<span class="hljs-string">&quot;jack&quot;</span>)<br>            .build();<br>    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);<br>    user = userMapper.selectOne(user);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><font color="red">Tips:</font> 本节源码地址 <a href="https://github.com/fengjian2705/ipersistence-test">ipersistence-test</a> | <a href="https://github.com/fengjian2705/ipersistence">ipersistence</a></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>同步与异步、阻塞与非阻塞</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E4%B8%8E%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
    
    <content type="html"><![CDATA[<blockquote><p>一个误解：同步就是阻塞，异步就是非阻塞</p></blockquote><ol><li><p><strong>同步阻塞</strong>： 客户端发送请求给服务端，此时服务端处理任务时间很久，则客户端就被服务端堵塞了，所以客户端会一直等待服务端的响应，此时客户端不能做其它的事，服务端也不会接受其他客户端的请求。这种通信机制比较简单粗暴，但是效率不高。</p></li><li><p><strong>同步非阻塞</strong>： 客户端发送请求给服务端，此时服务端处理任务时间很久，这个时候虽然客户端会一直等待响应，但是服务端可以处理其他的请求，过一会回来处理的。这种方式很高效，一个服务端可以处理很多请求，不会在因为任务没有处理完而堵着，所以这是非阻塞的。</p></li><li><p><strong>异步阻塞</strong>： 客户端发送请求给服务端，此时服务端处理任务时间很久，但是客户端不会等待服务器响应，它可以做其他的任务，等服务器处理完毕后再把结果返回给客户端，客户端得到回调后再处理服务端的响应。这种方式可以避免客户端一直处于等待的状态，优化了用户体验，其实就是类似于网页里发起的ajax异步请求。</p></li><li><p><strong>异步非阻塞</strong>： 客户端发送请求给服务端，此时服务端处理任务时间很久，这个时候的任务虽然处理时间会很久，但是客户端可以做其他的任务，因为他是异步回调函数里处理响应；同时服务端是非阻塞的，所以服务端可以去处理其他的任务，如此，这个模式就显得非常的高效</p><p>以上四点，除了第三点，其余的分别为BIO/NIO/AIO !</p></li></ol><p>用现实中的例子来解释：BIO/NIO/AIO</p><ol><li><p><strong>BIO</strong>： 我去上厕所，这个时候坑位都满了，我必须等待坑位释放了，我才能上吧？！此时我啥都不干，站在厕所里盯着，过了一会有人出来了，我就赶紧蹲上</p></li><li><p><strong>NIO</strong>： 我去上厕所，这个时候坑位都满了，没关系，哥不急，我出去抽根烟，过会回来看看有没有空位，如果有我就蹲，如果没有我出去接着抽烟或者玩会手</p></li><li><p><strong>异步阻塞</strong>： 我去上厕所，这个时候坑位都满了，没事我等着，等有了新的空位，让他通知我就行，通知了我，我就蹲上去。</p></li><li><p><strong>AIO</strong>： 我去上厕所，这个时候坑位都满了，没事，我一点也不急，我去厕所外面抽根烟再玩玩手机，等有新的坑位释放了，会有人通知我的，通知我了，我就蹲上去了。</p><p>从这个生活实例中能可以看得出来：<br><strong>同步</strong> 就是我需要自己每隔一段时间，以轮训的方式去看看有没有空的坑位；<br><strong>异步</strong> 则是有人拉完茅坑会通知你，通知你后你再回去蹲；<br><strong>阻塞</strong> 就是在等待的过程中，你不去做其他任何事情，干等着；<br><strong>非阻塞</strong> 就是你再等待的过程中可以去做其他的事，比如抽烟、喝酒、烫头、玩手机。</p></li></ol><p><strong>小结</strong>： 异步 的优势显而易见，大大优化用户体验， <code>非阻塞</code>使得系统资源开销远远小于<code>阻塞</code>模式，因为系统不需要创建新的进程(或线程)，大大地节省了系统多出来的系统资源可以给其他的中间件去服务了。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>持久层框架:mybatis</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6mybatis/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p><code>MyBatis</code> 是⼀款优秀的基于 ORM 的半⾃动轻量级持久层框架，它⽀持定制化 SQL、存储过程以及⾼级映<br>射。MyBatis 避免了⼏乎所有的JDBC代码和⼿动设置参数以及获取结果集。MyBatis 可以使⽤简单的<br>XML或注解来配置和映射原⽣类型、接⼝和 Java 的 POJO （Plain Old Java Objects,普通⽼式 Java 对象）<br>为数据库中的记录。</p><p><strong>Tips:</strong> <a href="https://mybatis.org/mybatis-3/">官网地址</a></p><h2 id="2-快速使用"><a href="#2-快速使用" class="headerlink" title="2. 快速使用"></a>2. 快速使用</h2><blockquote><p>使用步骤：① 添加依赖 - ② 创建表 - ③ 创建实体 - ④ 创建 mapper 文件 - ⑤ 创建核心配置文件 sqlMapConfig.xml - ⑥ 编写测试类</p></blockquote><h3 id="2-1-引入依赖"><a href="#2-1-引入依赖" class="headerlink" title="2.1 引入依赖"></a>2.1 引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-quickstart<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mysql 驱动类--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- mybatis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.13.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- log4j 日志 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-定义实体类"><a href="#2-2-定义实体类" class="headerlink" title="2.2 定义实体类"></a>2.2 定义实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-新建实体类对应的表"><a href="#2-3-新建实体类对应的表" class="headerlink" title="2.3 新建实体类对应的表"></a>2.3 新建实体类对应的表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  `username` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">8</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><h3 id="2-4-核心配置文件"><a href="#2-4-核心配置文件" class="headerlink" title="2.4 核心配置文件"></a>2.4 核心配置文件</h3><h4 id="2-4-1-SqlConfig-xml"><a href="#2-4-1-SqlConfig-xml" class="headerlink" title="2.4.1 SqlConfig.xml"></a>2.4.1 SqlConfig.xml</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;<br>&lt;!DOCTYPE configuration<br>        PUBLIC <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br>        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;<br>&lt;configuration&gt;<br>    &lt;environments <span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>        &lt;environment id=<span class="hljs-string">&quot;development&quot;</span>&gt;<br>            &lt;transactionManager type=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;<br>            &lt;dataSource type=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;<br>                &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;username&quot;</span> value=<span class="hljs-string">&quot;root&quot;</span>/&gt;<br>                &lt;property name=<span class="hljs-string">&quot;password&quot;</span> value=<span class="hljs-string">&quot;123456&quot;</span>/&gt;<br>            &lt;/dataSource&gt;<br>        &lt;/environment&gt;<br>    &lt;/environments&gt;<br>    &lt;mappers&gt;<br>        &lt;mapper resource=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;<br>    &lt;/mappers&gt;<br>&lt;/configuration&gt;<br></code></pre></td></tr></table></figure><h4 id="2-4-2-mapper-xml"><a href="#2-4-2-mapper-xml" class="headerlink" title="2.4.2 mapper.xml"></a>2.4.2 mapper.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;tech.fengjian.pojo.User&quot;</span>&gt;</span><br>        select *<br>        from User<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-5-编写dao"><a href="#2-5-编写dao" class="headerlink" title="2.5 编写dao"></a>2.5 编写dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDao</span> </span>&#123;<br><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        List&lt;User&gt; userList = sqlSession.selectList(<span class="hljs-string">&quot;UserMapper.findAll&quot;</span>);<br>        sqlSession.close();<br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="red">Tips：</font></strong> UserDao 的方式有一个冗余的部分<code>UserMapper.findAll</code>，每增加一个方法，都需要指定 Mapper 和 方法；mybatis利用代理模式做了优化，约定如下：</p><p>1）编写接口，接口全路径即 namespace<br>2）接口方法即 sql 的 id<br>3）接口方法返回值即 sql 的 resultType<br>4）接口方法的参数即 sql 的 parameterType</p><p>所以我们可以修改 UserDao 代码为 UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-测试"><a href="#2-6-测试" class="headerlink" title="2.6 测试"></a>2.6 测试</h3><h4 id="2-6-1-UserDao-方式（传统写法）"><a href="#2-6-1-UserDao-方式（传统写法）" class="headerlink" title="2.6.1 UserDao 方式（传统写法）"></a>2.6.1 UserDao 方式（传统写法）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        UserDao userDao = <span class="hljs-keyword">new</span> UserDao();<br>        List&lt;User&gt; userList = userDao.findAll();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-6-2-UserMapper-接口方式（推荐）"><a href="#2-6-2-UserMapper-接口方式（推荐）" class="headerlink" title="2.6.2 UserMapper 接口方式（推荐）"></a>2.6.2 UserMapper 接口方式（推荐）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = mapper.findAll();<br>        <span class="hljs-keyword">for</span> (User user : userList) &#123;<br>            System.out.println(user);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-7-mybatis-核心配置文件详解"><a href="#2-7-mybatis-核心配置文件详解" class="headerlink" title="2.7 mybatis 核心配置文件详解"></a>2.7 mybatis 核心配置文件详解</h3><blockquote><p>mybatis 核心配置文件中的标签是有顺序的！！！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fengjian2705/cdn/img/mybatis/mybatis03.jpg" alt="mybatis配置一览"></p><h4 id="2-7-1-properties-标签"><a href="#2-7-1-properties-标签" class="headerlink" title="2.7.1  properties 标签"></a>2.7.1  properties 标签</h4><p>习惯将数据源单独抽出到一个配置文件，使用<code>properties</code>标签就可以加载额外的 properties 文件</p><p>jdbc.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.mysql.driver</span> = <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-meta">jdbc.mysql.url</span> = <span class="hljs-string">jdbc:mysql://localhost:3306/mybatis</span><br><span class="hljs-meta">jdbc.mysql.user</span> = <span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.mysql.password</span> = <span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><p>那么相应的 SqlMapConfig.xml 修改后如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--外部配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.user&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-7-2-typeAlias-标签"><a href="#2-7-2-typeAlias-标签" class="headerlink" title="2.7.2 typeAlias 标签"></a>2.7.2 typeAlias 标签</h4><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tech.fengjian.pojo.User&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tech.fengjian.pojo&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置后，mapper.xml 中的类型则可以简写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>       select *<br>       from User<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">Tips:</font> 别名的使用不区分大小写！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>       select *<br>       from User<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>跟</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;uSEr&quot;</span>&gt;</span><br>       select *<br>       from User<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>是一样的！</p><h4 id="2-7-3-environments-标签"><a href="#2-7-3-environments-标签" class="headerlink" title="2.7.3 environments 标签"></a>2.7.3 environments 标签</h4><p>MyBatis 可以配置成适应多种环境，例如，开发、测试和生产环境需要有不同的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.driver&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.url&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.user&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.mysql.password&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol><li><p>注意一些关键点:</p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul></li><li><p>事务管理器（transactionManager）</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置几乎没做什么。</p></li></ul></li><li><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><ul><li><p>UNPOOLED– 这个数据源的实现会每次请求时打开和关闭连接。</p></li><li><p>POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。</p></li><li><p>JNDI – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</p></li></ul></li></ol><h4 id="2-7-4-mappers-标签"><a href="#2-7-4-mappers-标签" class="headerlink" title="2.7.4 mappers 标签"></a>2.7.4 mappers 标签</h4><p>SQL 映射器：告诉 MyBatis 到哪里去找到 sql 语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件</p><ol><li><p>使用相对于类路径（classpath）的资源引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用完全限定资源定位符（URL）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/BlogMapper.xml&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/PostMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用映射器接口实现类的完全限定类名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>将包内的映射器接口全部注册为映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">Tips:</font> 方式 3 和方式 4 要求 mapper.xml 文件目录同 mapper 接口包路径一致，编译后都在同一个 calsses 路径下</p></li></ol><h2 id="3-复杂映射查询"><a href="#3-复杂映射查询" class="headerlink" title="3. 复杂映射查询"></a>3. 复杂映射查询</h2><h3 id="3-1-一对一"><a href="#3-1-一对一" class="headerlink" title="3.1 一对一"></a>3.1 一对一</h3><p>需求： 查询订单及订单所属用户信息（一个订单只能属于一个用户）</p><p>订单表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> orders(<br>    id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">primary</span> key auto_increment <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;主键ID&#x27;</span>,<br>    ordertime <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;下单时间&#x27;</span>,<br>    total <span class="hljs-keyword">double</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;订单金额&#x27;</span>,<br>    uid <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> comment <span class="hljs-string">&#x27;用户ID&#x27;</span>);<br>    <br></code></pre></td></tr></table></figure><p>用户表：</p><h4 id="3-1-1-实体类"><a href="#3-1-1-实体类" class="headerlink" title="3.1.1 实体类"></a>3.1.1 实体类</h4><ol><li>User</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>Order</li></ol><p>OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;tech.fengjian.OrderMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tech.fengjian.Order&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_time&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;order_time&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;tech.fengjian.User&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uid&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;orderMap&quot;</span>&gt;</span><br>        select * from `order` o,user u where o.uid=u.id;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-1-2-Mapper-接口"><a href="#3-1-2-Mapper-接口" class="headerlink" title="3.1.2 Mapper 接口"></a>3.1.2 Mapper 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderMapper</span> </span>&#123;<br><br>    <span class="hljs-function">List&lt;Order&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-一对多"><a href="#3-2-一对多" class="headerlink" title="3.2 一对多"></a>3.2 一对多</h3><p>查询用户及用户的订单：</p><h4 id="3-2-1-实体类"><a href="#3-2-1-实体类" class="headerlink" title="3.2.1 实体类"></a>3.2.1 实体类</h4><ol><li>User</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; order_list;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>Order</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> Date order_time;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> total;<br><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getOrder_time</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> order_time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrder_time</span><span class="hljs-params">(Date order_time)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.order_time = order_time;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotal</span><span class="hljs-params">(<span class="hljs-keyword">double</span> total)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.total = total;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUser</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.user = user;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Order&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, order_time=&quot;</span> + order_time +<br>                <span class="hljs-string">&quot;, total=&quot;</span> + total +<br>                <span class="hljs-string">&quot;, user=&quot;</span> + user +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;tech.fengjian.UserMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tech.fengjian.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;order_list&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;tech.fengjian.Order&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;oid&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;order_time&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;order_time&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;total&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;total&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span>&gt;</span><br>        select *,o.id oid from user u left join `order` o on u.id=o.uid<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-多对多"><a href="#3-3-多对多" class="headerlink" title="3.3 多对多"></a>3.3 多对多</h3><p>查询用户及拥有的角色：</p><p>涉及的表 user role user_role(中间表)</p><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;tech.fengjian.User&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;role_list&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;tech.fengjian.Role&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;rid&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAllUserWithRole&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userRoleMap&quot;</span>&gt;</span><br>    select u.*,r.*,r.id rid from user u left join user_role ur on u.id=ur.userid<br>                                        inner join role r on ur.roleid=r.id;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4. 缓存"></a>4. 缓存</h2><h3 id="一级缓存：基于-sqlSession"><a href="#一级缓存：基于-sqlSession" class="headerlink" title="一级缓存：基于 sqlSession"></a>一级缓存：基于 sqlSession</h3><ol><li>同一个 sqlSession 两次查询，mybatis 会直接从缓存中获取</li><li>若两次查询中间涉及增、删、改，则缓存失效（sqlSession 执行了 commit 操作）</li></ol><h3 id="二级缓存：基于-Mapper-文件的-namespace"><a href="#二级缓存：基于-Mapper-文件的-namespace" class="headerlink" title="二级缓存：基于 Mapper 文件的 namespace"></a>二级缓存：基于 Mapper 文件的 namespace</h3><ol><li>二级缓存需要手动开启</li><li>若两次查询中间涉及增、删、改，则缓存失效（sqlSession 执行了 commit 操作）</li></ol><h2 id="5-插件"><a href="#5-插件" class="headerlink" title="5. 插件"></a>5. 插件</h2><p>mybatis 插件 涉及四大组件：Executor、StatementHandler、ParameterHandler、ResultSetHandler</p><h3 id="5-1-自定义插件"><a href="#5-1-自定义插件" class="headerlink" title="5.1 自定义插件"></a>5.1 自定义插件</h3><h4 id="5-1-1-定义插件"><a href="#5-1-1-定义插件" class="headerlink" title="5.1.1 定义插件"></a>5.1.1 定义插件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @作者 风间</span><br><span class="hljs-comment"> * @创建时间 2022/4/18 08:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.Executor;<br><span class="hljs-keyword">import</span> org.apache.ibatis.mapping.MappedStatement;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.*;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.ResultHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.RowBounds;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(</span><br><span class="hljs-meta">                type = Executor.class,</span><br><span class="hljs-meta">                method = &quot;query&quot;,</span><br><span class="hljs-meta">                args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;</span><br><span class="hljs-meta">        )</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Interceptor</span> </span>&#123;<br><br>    <span class="hljs-comment">// 增强逻辑书写部分</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;对query方法进行增强&quot;</span>);<br>        <span class="hljs-keyword">return</span> invocation.proceed();<br>    &#125;<br><br>    <span class="hljs-comment">// 将自定义插件放入拦截器链</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">plugin</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;增强的目标对象：&quot;</span>+target);<br>        <span class="hljs-keyword">return</span> Plugin.wrap(target,<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 自定义插件初始化属性</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setProperties</span><span class="hljs-params">(Properties properties)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;初始化属性：&quot;</span>+properties);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="5-1-2-注册插件"><a href="#5-1-2-注册插件" class="headerlink" title="5.1.2 注册插件"></a>5.1.2 注册插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--插件注册--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;tech.fengjian.MyPlugin&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;key2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-2-通用-mapper"><a href="#5-2-通用-mapper" class="headerlink" title="5.2 通用 mapper"></a>5.2 通用 mapper</h3><blockquote><p>提供一些通用的 sql 以便快速开发</p></blockquote><h4 id="5-2-1-引入依赖"><a href="#5-2-1-引入依赖" class="headerlink" title="5.2.1 引入依赖"></a>5.2.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><br></code></pre></td></tr></table></figure><h4 id="5-2-2-注册插件"><a href="#5-2-2-注册插件" class="headerlink" title="5.2.2 注册插件"></a>5.2.2 注册插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;tk.mybatis.mapper.mapperhelper.MapperInterceptor&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通⽤Mapper接⼝，多个通⽤接⼝⽤逗号隔开 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mappers&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tk.mybatis.mapper.common.Mapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-3-插件使用"><a href="#5-2-3-插件使用" class="headerlink" title="5.2.3 插件使用"></a>5.2.3 插件使用</h4><ol><li>实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> javax.persistence.Transient;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @作者 风间</span><br><span class="hljs-comment"> * @创建时间 2022/4/17 20:55</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> List&lt;Order&gt; order_list;<br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> List&lt;Role&gt; role_list;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Integer id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsername</span><span class="hljs-params">(String username)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Order&gt; <span class="hljs-title">getOrder_list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> order_list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOrder_list</span><span class="hljs-params">(List&lt;Order&gt; order_list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.order_list = order_list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Role&gt; <span class="hljs-title">getRole_list</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> role_list;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRole_list</span><span class="hljs-params">(List&lt;Role&gt; role_list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.role_list = role_list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, order_list=&quot;</span> + order_list +<br>                <span class="hljs-string">&quot;, role_list=&quot;</span> + role_list +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><font color="red">提示：</font></strong></p><p>不需要查询的字段使用 <code>@Transient</code> 注解标记</p><ol start="2"><li>Mapper 接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian;<br><br><span class="hljs-keyword">import</span> tk.mybatis.mapper.common.Mapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @作者 风间</span><br><span class="hljs-comment"> * @创建时间 2022/4/17 21:43</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br><br>   <br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> tech.fengjian.User;<br><span class="hljs-keyword">import</span> tech.fengjian.UserMapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @作者 风间</span><br><span class="hljs-comment"> * @创建时间 2022/4/17 21:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1</span>);<br>        List&lt;User&gt; userList = mapper.select(user);<br>        System.out.println(userList);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-3-分页插件"><a href="#5-3-分页插件" class="headerlink" title="5.3 分页插件"></a>5.3 分页插件</h3><h4 id="5-3-1-引入依赖"><a href="#5-3-1-引入依赖" class="headerlink" title="5.3.1 引入依赖"></a>5.3.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsqlparser<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2-注册插件"><a href="#5-3-2-注册插件" class="headerlink" title="5.3.2 注册插件"></a>5.3.2 注册插件</h4><blockquote><p>分页插件应先于通用 mapper 插件注册，注意注册顺序</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dialect&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mysql&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-3-2-测试"><a href="#5-3-2-测试" class="headerlink" title="5.3.2 测试"></a>5.3.2 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> tech.fengjian.User;<br><span class="hljs-keyword">import</span> tech.fengjian.UserMapper;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @作者 风间</span><br><span class="hljs-comment"> * @创建时间 2022/4/17 21:19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;SqlMapConfig.xml&quot;</span>);<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br>        PageHelper.startPage(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>);<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; orderList = mapper.findAll();<br>        PageInfo&lt;User&gt; userPageInfo = <span class="hljs-keyword">new</span> PageInfo&lt;User&gt;(orderList);<br>        System.out.println(userPageInfo.getTotal());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-mybatis-plus-的使用"><a href="#6-mybatis-plus-的使用" class="headerlink" title="6. mybatis-plus 的使用"></a>6. mybatis-plus 的使用</h2><blockquote><p>MyBatis-Plus（简称 MP）是⼀个 MyBatis 的增强⼯具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提⾼效率⽽⽣</p></blockquote><p><strong><font color="red">提示：</font></strong><br>引入 mybatis-plus 后不要再次引入 mybatis 及 mybatis-spring 依赖，以免版本问题导致异常问题</p><h3 id="6-1-急速入门-SpringBoot项目"><a href="#6-1-急速入门-SpringBoot项目" class="headerlink" title="6.1 急速入门( SpringBoot项目 )"></a>6.1 急速入门( SpringBoot项目 )</h3><h4 id="6-1-1-引入依赖"><a href="#6-1-1-引入依赖" class="headerlink" title="6.1.1 引入依赖"></a>6.1.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-1-2-编写实体类"><a href="#6-1-2-编写实体类" class="headerlink" title="6.1.2 编写实体类"></a>6.1.2 编写实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-1-3-编写-mapper"><a href="#6-1-3-编写-mapper" class="headerlink" title="6.1.3 编写 mapper"></a>6.1.3 编写 mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6-1-4-扫描-mapper"><a href="#6-1-4-扫描-mapper" class="headerlink" title="6.1.4 扫描 mapper"></a>6.1.4 扫描 mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;tech.fengjian.springbootmybatisplus.mapper&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootMybatisPlusApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(SpringbootMybatisPlusApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-5-测试"><a href="#6-1-5-测试" class="headerlink" title="6.1.5 测试"></a>6.1.5 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootMybatisPlusApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; userList = userMapper.selectList(<span class="hljs-keyword">null</span>);<br>        System.out.println(userList);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-常用的一些注解释义"><a href="#6-2-常用的一些注解释义" class="headerlink" title="6.2 常用的一些注解释义"></a>6.2 常用的一些注解释义</h3><p><code>@TableName(&quot;tb_user&quot;)</code>: 若数据库表名与实体类名称不一致，可以手动指定表名</p><p><code>@TableId(type = IdType.AUTO)</code>: 主键 id 生成策略</p><ul><li>AUTO (自增)</li><li>NONE (未设置)</li><li>INPUT (用户输入)</li><li>ID_WORKER (全局唯一)</li><li>UUID (全局唯一)</li><li>ID_WORKER_STR (全局唯一)</li></ul><p><code>@TableField</code>:</p><ul><li>对象中的属性名和字段名不⼀致的问题（⾮驼峰)</li><li>对象中的属性字段在表中不存在的问题</li><li>字段不加⼊查询字段</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableField(select = false)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@TableField(value = &quot;username&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-基本配置"><a href="#6-3-基本配置" class="headerlink" title="6.3 基本配置"></a>6.3 基本配置</h3><h4 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h4><ol><li>configLocation 指定配置文件位置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.config-location</span> = <span class="hljs-string">classpath:mybatis-config.xml</span><br></code></pre></td></tr></table></figure><ol start="2"><li>mapperLocations 指定 mapper 文件位置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.mapper-locations</span> = <span class="hljs-string">classpath*:mybatis/*.xml</span><br></code></pre></td></tr></table></figure><h4 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h4><ol><li>mapUnderscoreToCamelCase: 自动转驼峰，默认 true</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#关闭⾃动驼峰映射，该参数不能和mybatis-plus.config-location同时存在</span><br><span class="hljs-meta">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><ol start="2"><li>cacheEnabled： 开启缓存，默认 true</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.configuration.cache-enabled</span>=<span class="hljs-string">false</span><br></code></pre></td></tr></table></figure><h3 id="DB-配置"><a href="#DB-配置" class="headerlink" title="DB 配置"></a>DB 配置</h3><ol><li>idType: 全局默认主键类型，不用每个实体类配置了</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.global-config.db-config.id-type</span>=<span class="hljs-string">auto</span><br></code></pre></td></tr></table></figure><ol start="2"><li>tablePrefix：全局表前缀</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.global-config.db-config.table-prefix</span>=<span class="hljs-string">tb_</span><br></code></pre></td></tr></table></figure><h3 id="6-4-QueryWrapper-条件构造器"><a href="#6-4-QueryWrapper-条件构造器" class="headerlink" title="6.4 QueryWrapper 条件构造器"></a>6.4 QueryWrapper 条件构造器</h3><h4 id="6-4-1-基本比较"><a href="#6-4-1-基本比较" class="headerlink" title="6.4.1 基本比较"></a>6.4.1 基本比较</h4><p><code>allEq</code>:</p><p>方法重载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">allEq(Map&lt;R, V&gt; params)<br>allEq(Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br>allEq(<span class="hljs-keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br></code></pre></td></tr></table></figure><p>参数说明：<br>params ： key 数据库字段，value 查询的值<br>null2IsNull： 是否将 params 中的 null 值转为 sql 中的 is null，false 表示忽略<br>condition： true 则进行条件构造，false 不进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params)<br>allEq(BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span> null2IsNull)<br>allEq(<span class="hljs-keyword">boolean</span> condition, BiPredicate&lt;R, V&gt; filter, Map&lt;R, V&gt; params, <span class="hljs-keyword">boolean</span><br>null2IsNull)<br></code></pre></td></tr></table></figure><p>参数说明：<br>filter： 对 params 进行过滤</p><p><code>eq</code>: =</p><p><code>ne</code>: &lt;&gt;</p><p><code>gt</code>: &gt;</p><p><code>ge</code>: &gt;=</p><p><code>lt</code>: &lt;</p><p><code>le</code>: &lt;=</p><p><code>between</code>: between 值 1 and 值 2</p><p><code>notBetween</code>: not between 值 1 and 值 2</p><p><code>in</code>: 字段 in （值1，值2,…）</p><p><code>notin</code>: 字段 not in (值1，值2，…)</p><p><strong><font color="red">提示：</font></strong></p><p>LambdaQueryWrapper 支持链式调用！！！</p><h4 id="6-4-2-模糊查询"><a href="#6-4-2-模糊查询" class="headerlink" title="6.4.2 模糊查询"></a>6.4.2 模糊查询</h4><p><code>like</code>: like(‘name’,’jack’) -&gt; name like ‘%jack%’<br><code>notlike</code>: notlike(‘name’,’jack’) -&gt; name not like ‘%jack%’<br><code>likeleft</code>: likeleft(‘name’,’jack’) -&gt; name like ‘%jack’<br><code>likeright</code>: likeright(‘name’,’jack’) -&gt; name like ‘jack%’</p><h4 id="6-4-2-排序"><a href="#6-4-2-排序" class="headerlink" title="6.4.2 排序"></a>6.4.2 排序</h4><p><code>orderBy</code>: orderBy(true, true, “id”, “name”) —&gt; order by id ASC,name ASC<br><code>orderByDesc</code>: orderByAsc(“id”, “name”) —&gt; order by id ASC,name ASC<br><code>orderByAsc</code>: orderByDesc(“id”, “name”) —&gt; order by id DESC,name DESC</p><h4 id="6-4-3-or-and"><a href="#6-4-3-or-and" class="headerlink" title="6.4.3 or and"></a>6.4.3 or and</h4><p>多条件默认 and 连接，使用 or() 则使用 or 拼接sql</p><h4 id="6-4-4-select-指定查询字段"><a href="#6-4-4-select-指定查询字段" class="headerlink" title="6.4.4 select 指定查询字段"></a>6.4.4 select 指定查询字段</h4><p>select(‘name’,’age’) 指定查询的字段，默认是全字段</p><h3 id="6-5-常用插件"><a href="#6-5-常用插件" class="headerlink" title="6.5 常用插件"></a>6.5 常用插件</h3><h4 id="6-5-1-插件注册"><a href="#6-5-1-插件注册" class="headerlink" title="6.5.1 插件注册"></a>6.5.1 插件注册</h4><ol><li>方式一：注入到 Spring 容器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MyInterceptor <span class="hljs-title">myInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MyInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>方式二：mybatis 核心配置文件中注册</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span> <span class="hljs-attr">interceptor</span>=<span class="hljs-string">&quot;com.lagou.mp.plugins.MyInterceptor&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="6-5-2-执行分析插件"><a href="#6-5-2-执行分析插件" class="headerlink" title="6.5.2 执行分析插件"></a>6.5.2 执行分析插件</h4><blockquote><p>开发环境使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 执行分析插件，阻断全表更新、删除操作</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SqlExplainInterceptor <span class="hljs-title">sqlExplainInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    SqlExplainInterceptor sqlExplainInterceptor = <span class="hljs-keyword">new</span> SqlExplainInterceptor();<br>    List&lt;ISqlParser&gt; sqlParserList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-comment">// 攻击 sql 阻断解析器，加入解析链</span><br>    sqlParserList.add(<span class="hljs-keyword">new</span> BlockAttackSqlParser());<br>    sqlExplainInterceptor.setSqlParserList(sqlParserList);<br>    <span class="hljs-keyword">return</span> sqlExplainInterceptor;<br>&#125;   <br></code></pre></td></tr></table></figure><p>当执⾏全表更新时，会抛出异常，这样有效防⽌了⼀些误操作.</p><h4 id="6-5-3-性能分析插件"><a href="#6-5-3-性能分析插件" class="headerlink" title="6.5.3 性能分析插件"></a>6.5.3 性能分析插件</h4><blockquote><p>开发环境使用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 性能分析插件</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PerformanceInterceptor <span class="hljs-title">performanceInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>    PerformanceInterceptor performanceInterceptor = <span class="hljs-keyword">new</span> PerformanceInterceptor();<br>    performanceInterceptor.setFormat(<span class="hljs-keyword">true</span>);<br>    performanceInterceptor.setMaxTime(<span class="hljs-number">1</span>);<span class="hljs-comment">// 单位：ms</span><br>    <span class="hljs-keyword">return</span> performanceInterceptor;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-4-乐观锁插件"><a href="#6-5-4-乐观锁插件" class="headerlink" title="6.5.4 乐观锁插件"></a>6.5.4 乐观锁插件</h4><ul><li>取出记录时，获取当前version</li><li>更新时，带上这个version</li><li>执⾏更新时， set version = newVersion where version = oldVersion</li><li>如果version不对，就更新失败</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 乐观锁插件</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> OptimisticLockerInterceptor <span class="hljs-title">optimisticLockerInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OptimisticLockerInterceptor();<br>    &#125;<br></code></pre></td></tr></table></figure><p>数据表增加 <code>version</code> 字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> `version` <span class="hljs-type">int</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NULL</span> AFTER `email`;<br>UPDATE `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">SET</span> `version`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>实体类增加 <code>@Version</code> 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br></code></pre></td></tr></table></figure><h3 id="6-5-Sql-注入器，扩充-BaseMapper"><a href="#6-5-Sql-注入器，扩充-BaseMapper" class="headerlink" title="6.5 Sql 注入器，扩充 BaseMapper"></a>6.5 Sql 注入器，扩充 BaseMapper</h3><blockquote><p>BaseMapper 提供的默认方法不够用了，自己搞</p></blockquote><p>原理：mybatis-plus 利用 AbstractSqlInjector 将 BaseMapper 中方法注入到了 mybatis 中</p><h4 id="6-5-1-MyBaseMapper"><a href="#6-5-1-MyBaseMapper" class="headerlink" title="6.5.1 MyBaseMapper"></a>6.5.1 MyBaseMapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">MyBaseMapper</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function">List&lt;T&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-2-MySqlInjector"><a href="#6-5-2-MySqlInjector" class="headerlink" title="6.5.2 MySqlInjector"></a>6.5.2 MySqlInjector</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MysqlInjector</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DefaultSqlInjector</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;AbstractMethod&gt; <span class="hljs-title">getMethodList</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;AbstractMethod&gt; methodList = <span class="hljs-keyword">super</span>.getMethodList();<br>        methodList.add(<span class="hljs-keyword">new</span> FindAll());<br>        <span class="hljs-keyword">return</span> methodList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-3-FindAll"><a href="#6-5-3-FindAll" class="headerlink" title="6.5.3 FindAll"></a>6.5.3 FindAll</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FindAll</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractMethod</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title">injectMappedStatement</span><span class="hljs-params">(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo tableInfo)</span> </span>&#123;<br><br>        String sqlMethod = <span class="hljs-string">&quot;findAll&quot;</span>;<br>        String sql = <span class="hljs-string">&quot;select * from &quot;</span> + tableInfo.getTableName();<br>        SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.addSelectMappedStatement(mapperClass, sqlMethod, sqlSource, modelClass, tableInfo);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-5-4-添加到-Spring-容器"><a href="#6-5-4-添加到-Spring-容器" class="headerlink" title="6.5.4 添加到 Spring 容器"></a>6.5.4 添加到 Spring 容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InjectorConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MysqlInjector <span class="hljs-title">mysqlInjector</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MysqlInjector();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font color="red">提示:</font></strong></p><p>如果直接继承AbstractSqlInjector的话，原有的BaseMapper中的⽅法将失效，所以我们选择继承<br>DefaultSqlInjector进⾏扩展.</p><h3 id="6-6-逻辑删除"><a href="#6-6-逻辑删除" class="headerlink" title="6.6 逻辑删除"></a>6.6 逻辑删除</h3><ol><li>修改表结构,添加 <code>deleted</code> 字段</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>`<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> `deleted` <span class="hljs-type">int</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;1代表删除，0代表未删除&#x27;</span><br>AFTER `version`;<br></code></pre></td></tr></table></figure><ol start="2"><li>实体类添加 <code>@TableLogic</code> 注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br></code></pre></td></tr></table></figure><ol start="3"><li>新增配置，指定逻辑删除字段的值</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 逻辑已删除值(默认为 1)</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 逻辑未删除值(默认为 0)</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><h3 id="6-7-基于-mapper-接口的-idea-插件"><a href="#6-7-基于-mapper-接口的-idea-插件" class="headerlink" title="6.7 基于 mapper 接口的 idea 插件"></a>6.7 基于 mapper 接口的 idea 插件</h3><p>mybatisx 实现：</p><p>1）java 与 XML 代码互跳<br>2）自动生成 statement</p><p><strong>完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日志框架之 Logback</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B9%8Blogback/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B9%8Blogback/</url>
    
    <content type="html"><![CDATA[<h2 id="纷杂の日志框架"><a href="#纷杂の日志框架" class="headerlink" title="纷杂の日志框架"></a>纷杂の日志框架</h2><p>   日志门面：JCL SLF4J Jboss-Logging</p><p>   日志实现：JUL Log4j Log4j2 Logbck</p><h2 id="真假猴王"><a href="#真假猴王" class="headerlink" title="真假猴王"></a>真假猴王</h2><p>SLF4J、Log4j、Logbck 均出自一人之手 <code>Ceki Gülcü</code>，而 Log4j2 则是 apache 开发的，Logback 才是真正意义上的 ‘Log4j2’，是 Log4j 的升级版。</p><h2 id="溯源"><a href="#溯源" class="headerlink" title="溯源"></a>溯源</h2><blockquote><p>官网地址：<a href="https://logback.qos.ch/">传送门</a></p></blockquote><h2 id="Logback-构成模块"><a href="#Logback-构成模块" class="headerlink" title="Logback 构成模块"></a>Logback 构成模块</h2><p>Logback 项目由三个模块构成：logback-core, logback-classic and logback-access，其中:</p><ul><li><p>logback-core 是 logback-classic 和 logback-access 的基础</p></li><li><p>logback-classic 则实现了 SLF4J API，从而可以方便的将日志实现从 Logback 切换为 JUL 或者 Log4j</p></li><li><p>logback-access 则整合了 Servlet 容器（比如 Tomcat、Jetty ），提供了 HTTP 方式访问日志功能</p></li></ul><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><ol><li><p>引入依赖 logback-classic.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p> logback-classic 依赖 logback-core 和 slf4j，这里只需要引入 logback-classic 即可</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/fengjian2705/cdn/img/logback/logback003.jpg" alt="logback-classic"></p><ol start="2"><li><p>代码中打印日志，通过 slf4j 的 api 进行日志打印，底层日志实现是透明的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pro.fengjian;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Logger logger = LoggerFactory.getLogger(<span class="hljs-string">&quot;pro.fengjian.HelloWorld1&quot;</span>);<br>        logger.debug(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>假设配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ， 创 建一 个 最小 化配 置 。最 小化 配置 由 一个 关联 到 根 logger 的ConsoleAppender 组成。<br>输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的 PatternLayoutEncoder 进行格式化。还有，根 logger 默认级别是 DEBUG。</p><p> 控制台输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">00</span>:<span class="hljs-number">52</span>:<span class="hljs-number">06.711</span> [main] DEBUG pro.fengjian.HelloWorld1 - Hello world.<br></code></pre></td></tr></table></figure></li></ol><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h3><p>记录器，日志记录的实际执行者，self4j api, 实现于 logback-classic 模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Logger</span> </span>&#123;<br><br>  <span class="hljs-comment">// Printing methods: </span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">trace</span><span class="hljs-params">(String message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(String message)</span></span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">info</span><span class="hljs-params">(String message)</span></span>; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">warn</span><span class="hljs-params">(String message)</span></span>; <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">error</span><span class="hljs-params">(String message)</span></span>; <br>&#125;<br></code></pre></td></tr></table></figure><p>Logger 名称区分大小写，并遵循分层命名规则：比如 com.foo 是 com.foo.bar 的父类</p><p>顶级的 Logger 名为：<code>ROOT</code>，类似于 Java 的 Object，所有的 Logger 都继承顶级 Logger</p><p>Logger 的获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Logger x = LoggerFactory.getLogger(<span class="hljs-string">&quot;wombat&quot;</span>); <br>Logger y = LoggerFactory.getLogger(<span class="hljs-string">&quot;wombat&quot;</span>);<br></code></pre></td></tr></table></figure><p>x,y 是同一个 Logger 对象，通常使用 Logger 所在类的全限定名称来定义一个 Logger</p><h3 id="Logger-context"><a href="#Logger-context" class="headerlink" title="Logger context"></a>Logger context</h3><p>上下文，将不同 Logger 限定在自己的空间内，达到隔离的效果，从而实现某些 Logger 的记录和阻止某些 Logger 的记录</p><h3 id="Logger-level"><a href="#Logger-level" class="headerlink" title="Logger level"></a>Logger level</h3><p>级别，定义于 <code>ch.qos.logback.classic.Level </code> 类，Logger 在定义的同时会被分配相应的级别，级别是有继承关系的，低等级生效的同时，它继承的高级别也会生效<br>目前 Logger 的级别有：</p><p>从低到高： TRACE &lt; DEBUG &lt; INFO &lt;  WARN &lt; ERROR</p><p>顶级 Logger 的级别默认为 DEBUG<br>如果一个 Logger 没有被分配 Level，那最终凭借继承关系，继承其父 Logger 的 Level，比如 x.y 的 Logger 继承 x 的 Level<br>如果没有任何的父 Logger，它将被分配跟顶级Logger 一样的级别 DEBUG</p><h3 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h3><p>附加器 / 添加器，定义于 <code>ch.qos.logback.core.Appender</code> 类，将 Logger 记录的信息输出到指定的位置（比如 控制台、文件、关系型数据库等），一个 Logger 可以对应多个 Appender</p><p>Appender 也具有继承性，Appender 的 Additivity（相加性） 属性默认为 true， 即个 Appender 会将日志输出到自己指定的位置的同时，也会输出到它继承的父类所指定的 Appender</p><p><img src="https://cdn.jsdelivr.net/gh/fengjian2705/cdn/img/logback/logback004.png" alt="appender结构图"></p><ul><li><p>ConsoleAppender</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>/&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <font color="red">提示:</font>若<code>import</code>不好使，直接使用全路径即可</p></li><li><p>FileAppender</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.FileAppender&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;FileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>testFile.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">immediateFlush</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">immediateFlush</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  使用时间定义唯一文件名</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.FileAppender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">timestamp</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bySecond&quot;</span> <span class="hljs-attr">datePattern</span>=<span class="hljs-string">&quot;yyyyMMdd&#x27;T&#x27;HHmmss&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;FileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>log-$&#123;bySecond&#125;.txt<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%logger&#123;35&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>RollingFileAppender</p><p>  TimeBasedRollingPolicy: 基于时间的滚动策略</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>logFile.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;TimeBasedRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>3GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  SizeAndTimeBasedRollingPolicy: 基于时间和空间的滚动策略</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ROLLING&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>mylog.txt<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>mylog-%d&#123;yyyy-MM-dd&#125;.%i.txt<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>60<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>20GB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ROLLING&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>FixedWindowRollingPolicy： 固定窗口滚动策略</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>test.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;FixedWindowRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>tests.%i.log.zip<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">minIndex</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minIndex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxIndex</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">maxIndex</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>5MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;PatternLayoutEncoder&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Layout-amp-amp-Encoder"><a href="#Layout-amp-amp-Encoder" class="headerlink" title="Layout &amp;&amp; Encoder"></a>Layout &amp;&amp; Encoder</h3><p>布局和编码器，将日志信息按照指定的格式输出,从 logback 0.9.19 开始， FileAppender子类需要一个编码器，不再采用 layout。</p><p>PatternLayout：C 语言风格的输出方式</p><p>PatternLayoutEncoder：只是包装了 a PatternLayout</p><p>比如 %-4relative [%thread] %-5level %logger{32} - %msg%n</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">176</span>  [main] DEBUG manual.architecture.HelloWorld2 - Hello world.<br></code></pre></td></tr></table></figure><p>指定输出颜色：%blue(xxx)</p><p>打印自应用程序启动以来经过的时间、日志记录事件的级别、括号之间的调用者线程、它的记录器名称、一个破折号，后面是事件消息和一条新线</p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>Logback 过滤器基于三元逻辑，允许将它们组装或链接在一起以构成任意复杂的过滤策略。它们很大程度上受到 Linux 的 iptables 的启发</p><ul><li><p>自定义过滤器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> chapters.filters;<br>  <br><span class="hljs-keyword">import</span> ch.qos.logback.classic.spi.ILoggingEvent;<br><span class="hljs-keyword">import</span> ch.qos.logback.core.filter.Filter;<br><span class="hljs-keyword">import</span> ch.qos.logback.core.spi.FilterReply;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Filter</span>&lt;<span class="hljs-title">ILoggingEvent</span>&gt; </span>&#123;<br>  <br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> FilterReply <span class="hljs-title">decide</span><span class="hljs-params">(ILoggingEvent event)</span> </span>&#123;    <br>    <span class="hljs-keyword">if</span> (event.getMessage().contains(<span class="hljs-string">&quot;sample&quot;</span>)) &#123;<br>    <span class="hljs-keyword">return</span> FilterReply.ACCEPT;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> FilterReply.NEUTRAL;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  配置自定义过滤器</p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;chapters.filters.SampleFilter&quot;</span> /&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>        %-4relative [%thread] %-5level %logger - %msg%n<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>        <br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>LevelFilter</p><p>LevelFilter根据精确级别匹配过滤事件。如果事件的级别等于配置的级别，则过滤器接受或拒绝该事件，具体取决于onMatch和onMismatch属性的配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>      %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>ThresholdFilter</p><p>过滤低于指定阈值的事件。对于级别等于或高于阈值的事件，在调用其 () 方法时将响应 NEUTRAL 。但是，级别低于阈值的事件将被拒绝</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- deny all events with a level below INFO, that is TRACE and DEBUG --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span><br>          %-4relative [%thread] %-5level %logger&#123;30&#125; - %msg%n<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  <font color="red">提示：</font>配置文件中会根据 Filter 的先后顺序进行过滤</p></li></ul><h2 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h2><p><img src="https://cdn.jsdelivr.net/gh/fengjian2705/cdn/img/logback/logback002.png" alt="配置文件语法"></p><p>Logback 采取下面的步骤进行自我配置：</p><ol><li><p>Logback 尝试在 classpath中找到一个名为 logback-test.xml 的文件。</p></li><li><p>如果没有找到这样的文件，它会检查 类路径中的文件logback.xml ..</p></li><li><p>如果没有找到这样的文件，则 使用服务提供者加载工具（在 JDK 1.6 中引入） 通过查找文件 META-INF\services\ch.qos.logback.classic.spi.Configurator来解析接口 的实现类路径。其内容应指定所需 实现的完全限定类名。 com.qos.logback.classic.spi.ConfiguratorConfigurator</p></li><li><p>如果以上都没有成功，logback 会自动配置自己，BasicConfigurator 这将导致日志输出被定向到控制台。</p></li></ol><p>如果您使用 Maven，并且将 logback-test.xml放在src/test/resources 文件夹下，Maven 将确保它不会包含在生成的工件中。因此，您可以在测试期间使用不同的配置文件，即logback-test.xml，而在生产中使用另一个文件，即logback.xml。</p><p>开发环境使用 logback-test.xml， 生产环境使用 logback.xml</p><p>BaseConfigurator 的最小配置 <code>输出使用 PatternLayoutEncoder模式 %d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- encoders are assigned the type</span><br><span class="hljs-comment">         ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="日志拼接"><a href="#日志拼接" class="headerlink" title="日志拼接"></a>日志拼接</h3><p>bad：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;Entry number: &quot;</span> + i + <span class="hljs-string">&quot; is &quot;</span> + String.valueOf(entry[i]));<br></code></pre></td></tr></table></figure><p>good:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;The entry is &#123;&#125;.&quot;</span>, entry);<br></code></pre></td></tr></table></figure><h3 id="lombok-的日志注解"><a href="#lombok-的日志注解" class="headerlink" title="lombok 的日志注解"></a>lombok 的日志注解</h3><p>bad</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pro.fengjian;<br><br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Logger logger = LoggerFactory.getLogger(<span class="hljs-string">&quot;pro.fengjian.HelloWorld1&quot;</span>);<br>        logger.debug(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>good</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pro.fengjian;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld1</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        log.debug(<span class="hljs-string">&quot;Hello,World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Logback-in-SpringBoot"><a href="#Logback-in-SpringBoot" class="headerlink" title="Logback in SpringBoot"></a>Logback in SpringBoot</h3><ul><li><p>application.properties 中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">logging.pattern.console</span>=<span class="hljs-string">%d - %m%n</span><br><span class="hljs-comment">#logging.file.path=log</span><br><span class="hljs-meta">logging.file.name</span>=<span class="hljs-string">log/init.log</span><br><span class="hljs-meta">logging.level.pro.fengjian</span>=<span class="hljs-string">info</span><br></code></pre></td></tr></table></figure></li><li><p>logback-spring.xml 中配置(推荐)</p><p>日志文件名定义为 logback-spring.xml，spring boot会默认加载此文件，为什么不配置logback.xml,因为logback.xml会先application.properties 加载，而 logback-spring.xml 会后于application.properties 加载，这样我们在 application.properties 中设置日志文件名称和文件路径才能生效。</p></li><li><p>日志要求</p><p>区分 info 和 error 日志，不同级别输出到不同文件</p><p>每天（或者其他指定时间）产生一个日志文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileInfoLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--级别过滤--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件名规则--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!--输出到文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileErrorLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--阈值过滤--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--滚动策略--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--文件名规则--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--输出格式--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <br>    <span class="hljs-comment">&lt;!--root Logger--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileInfoLog&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileErrorLog&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>logback</tag>
      
      <tag>日志框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目部署到云服务器</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="一、购买云服务器"><a href="#一、购买云服务器" class="headerlink" title="一、购买云服务器"></a>一、购买云服务器</h2><p>购买云服务器后，厂商会提供一个公网IP和内网IP，我们需要使用 SSH 工具连接到云服务器，随后就能在命令行中操作 linux 系统。 </p><p>公网IP：123.60.176.118<br>内网IP：192.168.0.12</p><h2 id="二、安装-JDK"><a href="#二、安装-JDK" class="headerlink" title="二、安装 JDK"></a>二、安装 JDK</h2><ol><li>服务器安装JDK之前，先确保有没有默认安装JDK，执行以下命令进行检查： </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">java -version<br></code></pre></td></tr></table></figure><p>如果是自己在虚拟机上安装的 centos7.x 或者 centos6.x ，则会默认帮你安装好OpenJDK<br>需要卸载，卸载步骤如下：</p><ul><li>检查系统安装的OpenJDK</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -qa|grep openjdk -i<br></code></pre></td></tr></table></figure><ul><li>删除检查出来的 openjdk 的安装包并且检查后显示删除完毕</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rpm -e --nodeps 需要删除的软件<br></code></pre></td></tr></table></figure><p>如果是在阿里云或者腾讯云上的centos系统，一般不会自带jdk，但是以上步骤还是建议检查一下，如若发现自带jdk，建议删除后重新安装。<br>安装步骤如下：</p><ol><li>新建jdk安装目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/java<br></code></pre></td></tr></table></figure><h2 id="三、安装-Tomcat"><a href="#三、安装-Tomcat" class="headerlink" title="三、安装 Tomcat"></a>三、安装 Tomcat</h2><h2 id="四、安装-MariaDB"><a href="#四、安装-MariaDB" class="headerlink" title="四、安装 MariaDB"></a>四、安装 MariaDB</h2>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>云服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式会话</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BC%9A%E8%AF%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="1-分布式会话"><a href="#1-分布式会话" class="headerlink" title="1. 分布式会话"></a>1. 分布式会话</h2><h3 id="1-1-什么是会话？"><a href="#1-1-什么是会话？" class="headerlink" title="1.1 什么是会话？"></a>1.1 什么是会话？</h3><p>会话 session 代表的是客户端与服务器的一次交互过程，这个过程可以是连续的也可以是时断时续的.曾经的 servlet 时代（jsp），一旦用户与服务端交互，tomcat 服务器就会为用户创建一个 session，同时前端会有一个 jsessionid，每次交互都会携带。如此一来, 服务器只要在接收到用户请求的时候，就可以拿到 jsessionid，并根据这个 id 在内存中找到对应的会话 session，当拿到 session 会话后，那么我们就可以操作会话了。会话存活期间，我们就能认为用户一直处于正在使用着网站的状态，一旦 session 超期过时，那么就可以认为用户已经离开网站，停止交互了。用户的身份信息，我们也是通过 session 来判断的，在 session 中可以保存不同用户的信息。</p><p>session 的使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/setSession&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">setSession</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    HttpSession session = request.getSession();<br>    session.setAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>, <span class="hljs-string">&quot;new user&quot;</span>);<br>    session.setMaxInactiveInterval(<span class="hljs-number">3600</span>);<br>    session.getAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-无状态会话"><a href="#1-2-无状态会话" class="headerlink" title="1.2 无状态会话"></a>1.2 无状态会话</h3><ul><li><p>HTTP 请求是无状态的，用户向服务端发起多次请求，服务端并不会知道这么多次请求都来自同一个用户，这个就是无状态的。</p></li><li><p>cookie 的出现就是为了有状态的记录用户。</p></li><li><p>常见的，ios 与服务端交互，安卓与服务端交互，前后端分离，小程序端与服务端交互，它们都是通过发起 http 请求来调用接口数据的，每次交互服务端都不会拿到客户端的状态，但我们可以通过手段去处理，比如用户每次发起请求的时候携带一个 userid 或 user-token，如此一来，就能让服务端根据 userid 或 token 来获得相应的数据。每个用户的下一次请求都能被服务器识别为同一个用户。</p></li></ul><h3 id="1-3-有状态会话"><a href="#1-3-有状态会话" class="headerlink" title="1.3 有状态会话"></a>1.3 有状态会话</h3><p>Tomcat 中的会话，就是有状态的，一旦用户和服务端交互，就有会话，会话保存了用户的信息，这样用户就有“状态”了，服务端会和每个客户端都保持着这样的一层关系，这个由容器来管理（也就是 tomcat），这个 session 会话是保存到内存空间里的，如此依赖，当不同的用户访问服务端，那么就能通过会话知道谁是谁了。如果用户不再和服务端交互，那么会话则消失，结束了它的生命周期。如此一来，每个用户其实都会有一个会话被维护，这就是有状态会话。</p><p>场景：在传统项目或者 jsp 项目中使用的最多的 session 都是有状态的，session 的存在就是为了弥补 http 的无状态。</p><p><strong>提示：</strong>tomcat 会话可以通过手段实现多系统之间的状态同步，但是会损耗一定的时间，一旦发生同步那么用户请求就会等待，这种做法不可取。</p><h3 id="1-4-为何使用无状态会话"><a href="#1-4-为何使用无状态会话" class="headerlink" title="1.4 为何使用无状态会话"></a>1.4 为何使用无状态会话</h3><ul><li>有状态的会话都是放在服务器的内存中的，一旦用户会话量多，那么内存就会出现瓶颈。而无状态会话可以采用介质，前端可以使用 cookie（app 可以使用缓存）保存用户 id 或 token，后端比如 redis，相应的用户会话都能放入 redis 中进行管理，如此，对应用部署的服务器就不会造成内存压力。用户在前端发起 http 请求，携带 id 或 token，这样服务器就能根据前端提供的 id 或 token 来识别用户了，可伸缩性就更强了。</li></ul><h3 id="1-5-单-tomcat-会话"><a href="#1-5-单-tomcat-会话" class="headerlink" title="1.5 单 tomcat 会话"></a>1.5 单 tomcat 会话</h3><ol><li><p>先来看下单 tomcat 会话，这个是有状态的，用户首次访问服务端，这时候会话产生，并且会设置 jsessionid 放入 cookie 中，后续每次请求都会携带 jsessionid 以保持用户状态</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/55ce2336efe4a9ff.png" alt="image-20230207211635086"></p></li></ol><h3 id="1-6-动静分离会话"><a href="#1-6-动静分离会话" class="headerlink" title="1.6 动静分离会话"></a>1.6 动静分离会话</h3><ol><li><p>动静分离会话</p><p>用户请求服务端，由于动静分离，前端发起 http 请求，不会携带任何状态，当用户第一次请求以后，我们手动设置一个 token，作为用户会话，放入 redis 中，如此作为 redis-session，并且这个 token 设置后放入前端 cookie 中（app 或 小程序可以放入本地缓存），如此后续交互中，前端只需传递 token 给后端，后端就能识别这个用户来自谁了</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/8e65ee153501f181.png"></p></li></ol><h3 id="1-7-集群分布式系统会话"><a href="#1-7-集群分布式系统会话" class="headerlink" title="1.7 集群分布式系统会话"></a>1.7 集群分布式系统会话</h3><ol><li><p>集群分布式系统会话</p><p>集群或分布式系统本质都是多个系统，假设这里有两个服务器节点，分别是AB系统，它们可以是集群，也可以是分布式系统，一开始用户和 A 系统交互，那么这个时候的用户状态，我们可以保存到 redis 中，作为 A 系统的会话信息，随后用户的请求进入到了 B 系统，那么 B 系统中的会话也同样和 redis 关联，如此 AB 系统的 session 就统一了。当然 cookie 是会随着用户的访问携带过来的。那么这个其实就是分布式会话，通过 redis 来保存用户的状态。</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/07/b83a6669b4b1264b.png" alt="image-20230207212814129"></p></li></ol><h2 id="2-SpringSession-实现用户会话"><a href="#2-SpringSession-实现用户会话" class="headerlink" title="2. SpringSession 实现用户会话"></a>2. SpringSession 实现用户会话</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新增配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">session:</span><br><span class="hljs-attr">store-type:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure></li><li><p>启动类开启 HttpSession</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableRedisHttpSession</span> <span class="hljs-comment">// 开启使用 redis 作为 SpringSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/setSession&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">setSession</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>    HttpSession session = request.getSession();<br>    session.setAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>, <span class="hljs-string">&quot;new user&quot;</span>);<br>    session.setMaxInactiveInterval(<span class="hljs-number">3600</span>);<br>    session.getAttribute(<span class="hljs-string">&quot;userInfo&quot;</span>);<br>    <span class="hljs-comment">//        session.removeAttribute(&quot;userInfo&quot;);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s3.bmp.ovh/imgs/2023/02/09/1926998f9275cd16.png" alt="image-20230209151107074"></p></li></ol><h2 id="3-分布式会话拦截器"><a href="#3-分布式会话拦截器" class="headerlink" title="3.分布式会话拦截器"></a>3.分布式会话拦截器</h2><blockquote><p>基于分布式会话的权限拦截</p></blockquote><ol><li><p>编写拦截器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String REDIS_USER_TOKEN = <span class="hljs-string">&quot;redis_user_token&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisOperator redisOperator;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * controller调用之前</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;进入到拦截器，被拦截... ...&quot;</span>);<br>        String headerUserId = request.getHeader(<span class="hljs-string">&quot;headerUserId&quot;</span>);<br>        String headerUserToken = request.getHeader(<span class="hljs-string">&quot;headerUserToken&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(headerUserId) &amp;&amp; StringUtils.isNotBlank(headerUserToken)) &#123;<br>            String uniqueUserToken = <span class="hljs-keyword">this</span>.redisOperator.get(REDIS_USER_TOKEN + <span class="hljs-string">&quot;:&quot;</span> + headerUserId);<br>            <span class="hljs-keyword">if</span> (StringUtils.isBlank(uniqueUserToken)) &#123;<br>                returnErrorResponse(response,JSONResult.errorMsg(<span class="hljs-string">&quot;请登录... ....&quot;</span>));<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!Objects.equals(headerUserToken, uniqueUserToken)) &#123;<br>                    returnErrorResponse(response,JSONResult.errorMsg(<span class="hljs-string">&quot;账号在异地登录,请重新登录... ....&quot;</span>));<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            returnErrorResponse(response,JSONResult.errorMsg(<span class="hljs-string">&quot;请登录... ....&quot;</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">returnErrorResponse</span><span class="hljs-params">(HttpServletResponse response, JSONResult result)</span> </span>&#123;<br><br>        OutputStream out = <span class="hljs-keyword">null</span>;<br>        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        response.setContentType(<span class="hljs-string">&quot;text/json&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            out = response.getOutputStream();<br>            out.write(JsonUtils.objectToJson(result).getBytes(StandardCharsets.UTF_8));<br>            out.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (out != <span class="hljs-keyword">null</span>) &#123;<br><br>                    out.close();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * controller 之后，渲染视图之前</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> modelAndView</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * controller 之后，渲染视图之后</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ex</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>添加拦截器并指定拦截路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 实现静态资源的映射</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> </span>&#123;<br>        registry.addResourceHandler(<span class="hljs-string">&quot;/**&quot;</span>)<br>                .addResourceLocations(<span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>)  <span class="hljs-comment">// 映射swagger2</span><br>                .addResourceLocations(<span class="hljs-string">&quot;file:/workspaces/images/&quot;</span>);  <span class="hljs-comment">// 映射本地静态资源</span><br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">(RestTemplateBuilder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> builder.build();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserTokenInterceptor <span class="hljs-title">userTokenInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserTokenInterceptor();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;<br>        registry.addInterceptor(userTokenInterceptor())<br>                .addPathPatterns(<span class="hljs-string">&quot;/hello&quot;</span>);<br>        WebMvcConfigurer.<span class="hljs-keyword">super</span>.addInterceptors(registry);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="4-CAS-单点登录"><a href="#4-CAS-单点登录" class="headerlink" title="4. CAS 单点登录"></a>4. CAS 单点登录</h2><h3 id="4-1-相同顶级域名的单点登录-SSO"><a href="#4-1-相同顶级域名的单点登录-SSO" class="headerlink" title="4.1 相同顶级域名的单点登录 SSO"></a>4.1 相同顶级域名的单点登录 SSO</h3><ol><li><p>引子</p><p>单点登录又称之为 Single Sign On，简称 SSO，单点登录可以通过基于用户会话的共享，分为两种：</p><ul><li><p>第一种：基于分布式会话实现</p><p>比如现在有个一级域名为<code>www.fengjian.tech</code>，是教育类网站，这个网站还有其它产品线，可以通过构建二级域名提供服务给用户访问，比如<code>math.fengjian.tech</code>、<code>english.fengjian.tech</code>等等，分别为数学、英语等，用户只需要在其中一个站点登录，那么其它站点也会随之登录。</p></li><li></li></ul></li><li><p>Cookie + Redis 实现 SSO</p><p>基于 redis 的分布式会话可以流窜在后端的各个系统，都可以获取到 redis 中的用户信息。前端通过使用 cookie （可以保证在同域名下的一级、二级获取）保存用户的 userid 和 token，访问后端时进行携带，用户在任意系统登录后，cookie 和 redis 中都会有用户的信息，只要用户不退出，那么就可以随意登录任意站点了。</p><ul><li>顶级域名<code>www.fengjian.tech</code>和<code>*.fengjian.tech</code>的 cookie 是可以共享的，都可以携带到后端</li><li>二级域名自己独立的 cookie 是不能共享的，<code>math.fengjian.tech</code>和<code>english.fengjian.tech</code>的 cookie 无法实现共享，两者互不影响</li></ul></li><li><p>Cookie 共享测试</p><p>打开前端项目：设置域名，必须和 SwitchHosts 中设置的一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">cookieDomain: <span class="hljs-string">&quot;.fengjian.tech&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> math.fengjian.tech<br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> english.fengjian.tech<br></code></pre></td></tr></table></figure></li></ol><h3 id="4-2-不同顶级域名的单点登录SSO"><a href="#4-2-不同顶级域名的单点登录SSO" class="headerlink" title="4.2 不同顶级域名的单点登录SSO"></a>4.2 不同顶级域名的单点登录SSO</h3><p>  <img src="https://s3.bmp.ovh/imgs/2023/02/09/2a53fb01fd676043.png"></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>分布式会话</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>分布式会话</tag>
      
      <tag>单点登录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 核心编程思想（三）：Spring IoC 容器概述</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-IoC-容器概述"><a href="#1-Spring-IoC-容器概述" class="headerlink" title="1. Spring IoC 容器概述"></a>1. Spring IoC 容器概述</h2><table><thead><tr><th>内容</th></tr></thead><tbody><tr><td>Spring IoC 依赖查找</td></tr><tr><td>Spring IoC 依赖注入</td></tr><tr><td>Spring IoC 依赖来源</td></tr><tr><td>Spring IoC 配置元信息</td></tr><tr><td>Spring IoC 容器</td></tr><tr><td>Spring 应用上下文</td></tr><tr><td>使用 Spring IoC 容器</td></tr><tr><td>Spring IoC 容器生命周期</td></tr><tr><td>面试题精选</td></tr></tbody></table><h2 id="2-Spring-IoC-依赖查找"><a href="#2-Spring-IoC-依赖查找" class="headerlink" title="2. Spring IoC 依赖查找"></a>2. Spring IoC 依赖查找</h2><ol><li><p>根据 Bean 名称查找</p><ul><li><p>实时查找</p></li><li><p>延迟查找</p></li></ul></li><li><p>根据 Bean 类型查找</p><ul><li>单个 Bean 对象</li><li>集合 Bean 对象</li></ul></li><li><p>根据 Bean 名称 + 类型查找</p></li><li><p>根据 Java 注解查找</p><ul><li>单个 Bean 对象</li><li>集合 Bean 对象</li></ul></li></ol><h2 id="3-依赖查找实践"><a href="#3-依赖查找实践" class="headerlink" title="3. 依赖查找实践"></a>3. 依赖查找实践</h2><h3 id="3-1-根据-Bean-名称实时查找"><a href="#3-1-根据-Bean-名称实时查找" class="headerlink" title="3.1 根据 Bean 名称实时查找"></a>3.1 根据 Bean 名称实时查找</h3><ol><li><p>新建实体类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.domain;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Long <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(Long id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建 dependency-lookup-context 文件，配置实体类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaIoCation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.thinking.in.spring.ioc.overview.domain.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试类 DependencyLookupDemo.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.dependency.lookup;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.domain.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖查找示例</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-lookup-context.xml&quot;</span>);<br>        User user = (User) beanFactory.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;user = &quot;</span> + user);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h3 id="3-2-根据-Bean-名称延迟查找"><a href="#3-2-根据-Bean-名称延迟查找" class="headerlink" title="3.2  根据 Bean 名称延迟查找"></a>3.2  根据 Bean 名称延迟查找</h3><ol><li><p>面试题：ObjectFactory、BeanFactory、FactoryBean 的区别？</p><p>答：<code>ObjectFactory</code>、<code>BeanFactory</code> 和 <code>FactoryBean</code> 是 Spring 框架中几个常用的工厂类，它们的主要区别如下：</p><ul><li><p><code>ObjectFactory</code> 是一个简单的对象创建工厂，用于实现对象的延迟加载，只有在调用 <code>getObject()</code> 方法时才会创建目标对象。</p></li><li><p><code>BeanFactory</code> 是 Spring IoC 容器的根接口，提供了管理 bean 的机制并支持依赖注入等功能。它可以读取配置文件，并创建和管理 bean 实例。<code>BeanFactory</code> 是最基本的容器，其他的容</p></li></ul><p>器都是对它的扩展。</p><ul><li><code>FactoryBean</code> 是一个特殊的 bean，它实现了 <code>FactoryBean</code> 接口，并通过 <code>getObject()</code> 方法创建和管理其他 bean 实例。它可以用来实现一些复杂的 bean 构建逻辑，也可以用来添加一</li></ul><p>些 AOP 切面处理或提供一些自定义的对象包装等功能。需要注意的是，虽然这三个工厂类都与对象的创建和管理有关，但它们的作用与用法略有不同，不能直接混淆使用。总体来说，<code>ObjectFactory</code> </p><p>主要用于实现延迟加载，<code>BeanFactory</code> 是 Spring IoC 容器的基础，用于管理和创建 bean，而 <code>FactoryBean</code> 则是一个特殊的 bean，用于实现一些特殊的创建逻辑。</p></li><li><p>延迟查找就利用到了<code>ObjectFactory</code>，它有一个 FactoryBean 的实现 <code>ObjectFactoryCreatingFactoryBean</code>,<code>ObjectFactoryCreatingFactoryBean</code> 与 <code>ObjectFactory</code> 之间存</p><p>在一定关系，它们都是在实现 Spring 中的延迟初始化时可以使用的工具类。具体来说，<code>ObjectFactoryCreatingFactoryBean</code> 是 Spring 中的一个工厂 bean 实例，它实现了 <code>FactoryBean</code> </p><p>接口，可以用于创建 <code>ObjectFactory</code> 对象。<code>ObjectFactory</code> 本身是 Spring 中的一个接口，可以用于实现对象的延迟初始化。当 <code>ObjectFactoryCreatingFactoryBean</code> 被注入到其他 bean </p><p>中时，Spring IoC 容器会先创建 <code>ObjectFactoryCreatingFactoryBean</code> 实例，并调用其 <code>getObject()</code> 方法，该方法会创建一个 <code>ObjectFactory</code> 对象，并返回该对象实例。当我们需要使</p><p>用被延迟初始化的 bean 时，我们可以从该 <code>ObjectFactory</code> 实例中获取目标 bean 的实例进行使用。因此，可以使用 <code>ObjectFactoryCreatingFactoryBean</code> 和 <code>ObjectFactory</code> 来实现在 </p><p>Spring 中的延迟初始化。其中，<code>ObjectFactoryCreatingFactoryBean</code> 用于创建 <code>ObjectFactory</code> 实例，而 <code>ObjectFactory</code> 则用于实现对象的延迟初始化。</p></li><li><p>dependency-lookup-context.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaIoCation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.thinking.in.spring.ioc.overview.domain.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;objectFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;targetBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>测试类，lookupInLazy</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.dependency.lookup;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.domain.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖查找示例</span><br><span class="hljs-comment"> * 1. 通过名称的方式来查找</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-lookup-context.xml&quot;</span>);<br>        lookupInLazy(beanFactory);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupInLazy</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>        ObjectFactory&lt;User&gt; objectFacoty = (ObjectFactory&lt;User&gt;) beanFactory.getBean(<span class="hljs-string">&quot;objectFacoty&quot;</span>);<br>        User user = objectFacoty.getObject();<br>        System.out.println(<span class="hljs-string">&quot;延迟查找：&quot;</span> + user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-3-根据-Bean-类型查找单个对象"><a href="#3-3-根据-Bean-类型查找单个对象" class="headerlink" title="3.3 根据 Bean 类型查找单个对象"></a>3.3 根据 Bean 类型查找单个对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.dependency.lookup;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.domain.User;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖查找示例</span><br><span class="hljs-comment"> * 1. 通过名称的方式来查找</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-lookup-context.xml&quot;</span>);<br>        <span class="hljs-comment">// 按照类型查找单个对象</span><br>        lookupByType(beanFactory);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupByType</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>        User user = beanFactory.getBean(User.class);<br>        System.out.println(<span class="hljs-string">&quot;实时查找：&quot;</span>+user);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-4-根据-Bean-类型查找集合-Bean-对象"><a href="#3-4-根据-Bean-类型查找集合-Bean-对象" class="headerlink" title="3.4 根据 Bean 类型查找集合 Bean 对象"></a>3.4 根据 Bean 类型查找集合 Bean 对象</h3><p>ListableBeanFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.dependency.lookup;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.domain.User;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖查找示例</span><br><span class="hljs-comment"> * 1. 通过名称的方式来查找</span><br><span class="hljs-comment"> * 2. 通过类型的方式来查找</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-lookup-context.xml&quot;</span>);<br>        <span class="hljs-comment">// 按照类型查找集合对象</span><br>        lookupCollectionByType(beanFactory);<br>       <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupCollectionByType</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> ListableBeanFactory) &#123;<br>            ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;<br>            Map&lt;String, User&gt; users = listableBeanFactory.getBeansOfType(User.class);<br>            System.out.println(<span class="hljs-string">&quot;查找到所有的 User 集合对象：&quot;</span> + users);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-5-根据-Bean-名称-类型查找"><a href="#3-5-根据-Bean-名称-类型查找" class="headerlink" title="3.5 根据 Bean 名称 + 类型查找"></a>3.5 根据 Bean 名称 + 类型查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User user = beanFactory.getBean(<span class="hljs-string">&quot;user&quot;</span>,User.class);<br></code></pre></td></tr></table></figure><h3 id="3-6-根据-Java-注解查找-Bean-对象"><a href="#3-6-根据-Java-注解查找-Bean-对象" class="headerlink" title="3.6 根据 Java 注解查找 Bean 对象"></a>3.6 根据 Java 注解查找 Bean 对象</h3><ol><li>编写注解 @Super</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Super &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>新增实体类 SuperUser 继承 User</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.domain;<br><br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.annotation.Super;<br><br><span class="hljs-meta">@Super</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperUser</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SuperUser&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;&#125; &quot;</span> + <span class="hljs-keyword">super</span>.toString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>Dependency-lookup-context.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaIoCation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.thinking.in.spring.ioc.overview.domain.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jack&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;superUser&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.thinking.in.spring.ioc.overview.domain.SuperUser&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;user&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">primary</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;苏州&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;objectFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;targetBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;user&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>编写测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.thinking.in.spring.ioc.overview.dependency.lookup;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.annotation.Super;<br><span class="hljs-keyword">import</span> tech.fengjian.thinking.in.spring.ioc.overview.domain.User;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 依赖查找示例</span><br><span class="hljs-comment"> * 1. 通过名称的方式来查找</span><br><span class="hljs-comment"> * 2. 通过类型的方式来查找</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/7 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyLookupDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 配置 XML 文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-lookup-context.xml&quot;</span>);<br>        <span class="hljs-comment">// 通过注解查找对象</span><br>        lookupByAnnotationType(beanFactory);<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupByAnnotationType</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> ListableBeanFactory) &#123;<br>            ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;<br>            Map&lt;String, Object&gt; users = listableBeanFactory.getBeansWithAnnotation(Super.class);<br>            System.out.println(<span class="hljs-string">&quot;查找标注 @Super 所有 User 集合对象：&quot;</span> + users);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="4-依赖注入实践"><a href="#4-依赖注入实践" class="headerlink" title="4. 依赖注入实践"></a>4. 依赖注入实践</h2><ul><li>根据 Bean 名称注入</li><li>根据 Bean 类型注入<ul><li>单个 Bean 对象</li><li>集合 Bean 对象</li></ul></li><li>注入容器内建 Bean 对象</li><li>注入非 Bean 对象</li><li>注入类型<ul><li>实时注入</li><li>延迟注入</li></ul></li></ul><h3 id="4-1-手动配置依赖注入"><a href="#4-1-手动配置依赖注入" class="headerlink" title="4.1 手动配置依赖注入"></a>4.1 手动配置依赖注入</h3><ol><li>新建 UserRepository</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.repository;<br><br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Collection&lt;User&gt; users;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Collection&lt;User&gt; <span class="hljs-title">getUsers</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> users;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsers</span><span class="hljs-params">(Collection&lt;User&gt; users)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.users = users;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>新建 dependency-injection-context.xml</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;<br>&lt;beans xmlns=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span><br>       xmlns:xsi=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br>       xmlns:util=<span class="hljs-string">&quot;http://www.springframework.org/schema/util&quot;</span><br>       xsi:schemaIoCation=<span class="hljs-string">&quot;</span><br><span class="hljs-string">        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="hljs-string">        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd&quot;</span>&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;tech.fengjian.ioc.container.overview.domain.User&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;id&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;jack&quot;</span>/&gt;<br>        &lt;property name=<span class="hljs-string">&quot;age&quot;</span> value=<span class="hljs-string">&quot;18&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;superUser&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;tech.fengjian.ioc.container.overview.domain.SuperUser&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;address&quot;</span> value=<span class="hljs-string">&quot;苏州&quot;</span>/&gt;<br>    &lt;/bean&gt;<br><br>    &lt;bean id=<span class="hljs-string">&quot;userRepository&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;tech.fengjian.ioc.container.overview.repository.UserRepository&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;users&quot;</span>&gt;<br>            &lt;util:list&gt;<br>                &lt;ref bean=<span class="hljs-string">&quot;user&quot;</span>/&gt;<br>                &lt;ref bean=<span class="hljs-string">&quot;superUser&quot;</span>/&gt;<br>            &lt;/util:list&gt;<br>        &lt;/property&gt;<br>    &lt;/bean&gt;<br>&lt;/beans&gt;<br></code></pre></td></tr></table></figure><p><strong>tips:</strong><code>&lt;util:list&gt;</code>使用需要引入<code>xmlns:util=&quot;http://www.springframework.org/schema/util</code>约束头</p><ol start="3"><li>编写测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        UserRepository userRepository = (UserRepository)beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        System.out.println(userRepository.getUsers());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-自动注入依赖"><a href="#4-2-自动注入依赖" class="headerlink" title="4.2 自动注入依赖"></a>4.2 自动注入依赖</h3><p>autowire</p><p>修改 dependency-injection-context.xml 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userRepository&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.ioc.container.overview.repository.UserRepository&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3-注入非-Bean-对象"><a href="#4-3-注入非-Bean-对象" class="headerlink" title="4.3 注入非 Bean 对象"></a>4.3 注入非 Bean 对象</h3><p>比较内建的 BeanFactory 和容器 BeanFactory 的异同</p><ol><li>定义 BeanFactory 属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.repository;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> BeanFactory beanFactory;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanFactory <span class="hljs-title">getBeanFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> beanFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>编写测试代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        UserRepository userRepository = (UserRepository)beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        System.out.println(userRepository.getBeanFactory());<br>        System.out.println(userRepository.getBeanFactory() == beanFactory);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>结果分析：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">org.springframework.beans.factory.support.DefaultListableBeanFactory@22f71333: defining beans [user,superUser,userRepository]; root of factory hierarchy<br>false<br></code></pre></td></tr></table></figure><p>这里我们在 UserRepository 中定义的 BeanFactory 是内建 Bean 对象</p><p>我们看下 BeanFactory 是哪里来的？</p><ul><li>从容器中获取一下，依赖查找</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        BeanFactory bean = beanFactory.getBean(BeanFactory.class);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出异常信息：没有这个 Bean 的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type <span class="hljs-string">&#x27;org.springframework.beans.factory.BeanFactory&#x27;</span> available<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="hljs-number">351</span>)<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:<span class="hljs-number">342</span>)<br>at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:<span class="hljs-number">1126</span>)<br>at tech.fengjian.ioc.container.overview.dependency.injection.DependencyInjectionDemo.main(DependencyInjectionDemo.java:<span class="hljs-number">18</span>)<br><br></code></pre></td></tr></table></figure><h3 id="4-4-实时注入和延迟注入"><a href="#4-4-实时注入和延迟注入" class="headerlink" title="4.4 实时注入和延迟注入"></a>4.4 实时注入和延迟注入</h3><p>ObjectFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.repository;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ObjectFactory&lt;User&gt; objectFactory;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ObjectFactory&lt;User&gt; <span class="hljs-title">getObjectFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> objectFactory;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setObjectFactory</span><span class="hljs-params">(ObjectFactory&lt;User&gt; objectFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.objectFactory = objectFactory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>编写测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        UserRepository userRepository = (UserRepository) beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        ObjectFactory&lt;User&gt; objectFactory = userRepository.getObjectFactory();<br>        System.out.println(objectFactory.getObject());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改一下 UserRepository 中的 ObjectFactory 中的实体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.repository;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> ObjectFactory&lt;ApplicationContext&gt; objectFactory;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ObjectFactory&lt;ApplicationContext&gt; <span class="hljs-title">getObjectFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> objectFactory;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setObjectFactory</span><span class="hljs-params">(ObjectFactory&lt;ApplicationContext&gt; objectFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.objectFactory = objectFactory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再比较下 BeanFactory 和 ObjectFactory 中的 Bean 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        UserRepository userRepository = (UserRepository) beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        System.out.println(userRepository.getObjectFactory().getObject() == beanFactory);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果为 true</p><h2 id="5-依赖注入来源"><a href="#5-依赖注入来源" class="headerlink" title="5. 依赖注入来源"></a>5. 依赖注入来源</h2><ul><li>自定义 Bean</li><li>容器內建 Bean 对象</li><li>容器內建依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.core.env.Environment;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        <span class="hljs-comment">// 依赖来源一：自定义 Bean</span><br>        UserRepository userRepository = (UserRepository) beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        <span class="hljs-comment">// 依赖来源二：依赖注入（内建依赖）</span><br>        System.out.println(userRepository.getBeanFactory());<br>        <span class="hljs-comment">// 依赖来源三：容器内建 Bean</span><br>        Environment environment = beanFactory.getBean(Environment.class);<br>        System.out.println(<span class="hljs-string">&quot;获取 Environment 类型的 Bean：&quot;</span> + environment);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-配置元信息"><a href="#6-配置元信息" class="headerlink" title="6. 配置元信息"></a>6. 配置元信息</h2><ul><li>Bean 定义配置<ul><li>基于 XML 文件<br>基于 Properties 文件<br>基于 Java 注解<br>基于 JavaAPI (专题讨论)</li></ul></li><li>IoC 容器配置<ul><li>基于 XML 文件</li><li>基于 Java 注解</li><li>基于 JavaAPI (专题讨论)</li></ul></li><li>外部化属性配置<ul><li>基于 Java 注解(@Value…)</li></ul></li></ul><h2 id="7-IoC-容器之谜"><a href="#7-IoC-容器之谜" class="headerlink" title="7. IoC 容器之谜"></a>7. IoC 容器之谜</h2><p>BeanFactory 和 ApplicationContext 谁才是 IoC 容器？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.repository;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ObjectFactory;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserRepository</span> </span>&#123;<br><br> <br>    <span class="hljs-keyword">private</span> BeanFactory beanFactory;<span class="hljs-comment">// 内建非 Bean 对象</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> BeanFactory <span class="hljs-title">getBeanFactory</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> beanFactory;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.dependency.injection;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.BeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.repository.UserRepository;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;依赖注入示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/8</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DependencyInjectionDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 配置 XML 配置文件</span><br>        <span class="hljs-comment">// 启动 Spring 应用上下文</span><br>        BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br>        UserRepository userRepository = (UserRepository)beanFactory.getBean(<span class="hljs-string">&quot;userRepository&quot;</span>);<br>        System.out.println(userRepository.getBeanFactory());<br>        System.out.println(userRepository.getBeanFactory() == beanFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么 <code>userRepository.getBeanFactory() == beanFactory</code>不成立？</p><p>简单来看他们是两个对象，当然不同。</p><p>官方文档描述：</p><p>The <a href="https://docs.spring.io/spring-framework/docs/5.3.28-SNAPSHOT/javadoc-api/org/springframework/beans/factory/BeanFactory.html"><code>BeanFactory</code></a> interface provides an advanced configuration mechanism capable of managing any type of object. <a href="https://docs.spring.io/spring-framework/docs/5.3.28-SNAPSHOT/javadoc-api/org/springframework/context/ApplicationContext.html"><code>ApplicationContext</code></a> is a sub-interface of <code>BeanFactory</code>.It adds:</p><ul><li>Easier integration with Spring’s AOP features</li><li>Message resource handling (for use in internationalization)</li><li>Event publication</li><li>Application-layer specific contexts such as the <code>WebApplicationContext</code> for use in web applications.</li></ul><p>In short, the <code>BeanFactory</code> provides the configuration framework and basic functionality, and the <code>ApplicationContext</code> adds more enterprise-specific functionality. The <code>ApplicationContext</code> is a complete superset of the <code>BeanFactory</code> and is used exclusively in this chapter in descriptions of Spring’s IoC container. For more information on using the <code>BeanFactory</code> instead of the <code>ApplicationContext,</code> see the section covering the <a href="https://docs.spring.io/spring-framework/docs/5.3.28-SNAPSHOT/reference/html/core.html#beans-beanfactory"><code>BeanFactory</code> API</a></p><p>译：<code>BeanFactory</code> 接口提供了一个高级配置机制，能够管理任何类型的对象。<code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。<code>ApplicationContext</code> 增加了：</p><ul><li><p>更易于集成 Spring 的 AOP 特性</p></li><li><p>消息资源处理（用于国际化）</p></li><li><p>事件发布</p></li><li><p>应用程序层特定的上下文，例如 WebApplicationContext 用于 Web 应用程序。</p></li></ul><p>简而言之，BeanFactory 提供配置框架和基本功能，ApplicationContext 添加了更多企业特定功能。ApplicationContext 是 BeanFactory 的完整超集，在 Spring 的 IoC 容器描述中专门使用。有关使用 BeanFactory 而不是 ApplicationContext 的详细信息，请参阅涵盖 BeanFactory API 的部分。</p><p>他说是管理是对象，他说并没有说管理是 Bean，依赖来源并不只是限于 Bean，所以他对象是描述得非常精确的。</p><p>再来看看我们编写的测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanFactory beanFactory = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>我们为什么这么写，<code>ClassPathXmlApplicationContext</code>就是<code>ApplicationContext</code>,<code>ApplicationContext</code> is <code>BeanFactory</code>，这里也可以定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;classpath:META-INF/dependency-injection-context.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p>那也就是说其实比较的是 userRepository.getBeanFactory() 和 ApplicationContext对象，为什么不等于呢，这里的 ApplicationContext 他是一种设计模式：</p><p>ClassPathXmlApplicationContext &lt;- AbstractXmlApplicationContext &lt;- AbstractRefreshableConfigApplicationContext &lt;- AbstractRefreshableApplicationContext &lt;-</p><p>AbstractApplicationContext &lt;- <code>ConfigurableApplicationContext</code></p><p><strong>tips：</strong>&lt;- 代表继承</p><p>ConfigurableXxx 是一种可写的方式，他有 getBeanFactory 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">ConfigurableListableBeanFactory <span class="hljs-title">getBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IllegalStateException</span>;<br></code></pre></td></tr></table></figure><p><code>ConfigurableApplicationContext</code> &lt;- <code>ApplicationContext</code> &lt;- <code>BeanFactory</code>，也就是 ConfigurableApplicationContext 就是 BeanFactory 了，为什么还多此一举的提供一个</p><p>getBeanFactory()方法来返回一个 BeanFactory 呢？</p><p>我们来进一步看一下 getBeanFactory() 方法的内部实现，AbstractRefreshableApplicationContext 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** Bean factory for this context. */</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> DefaultListableBeanFactory beanFactory;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> ConfigurableListableBeanFactory <span class="hljs-title">getBeanFactory</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanFactoryMonitor) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.beanFactory == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalStateException(<span class="hljs-string">&quot;BeanFactory not initialized or already closed - &quot;</span> +<br>                    <span class="hljs-string">&quot;call &#x27;refresh&#x27; before accessing beans via the ApplicationContext&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.beanFactory;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个 BeanFactory 其实是一个组合的，就相当于说我这个代码其实是把这个 BeanFactory 的实现 DefaultListableBeanFactory 组合进来了，并不是完全的抽象继承了父类。</p><p>也就是在上下文里面的实现它是组合了一个方式，同时在接口上又是继承的关系，这种方式有点像代理，再看一下 getBean() 方法的实现，在 AbstractApplicationContext 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">getBean</span><span class="hljs-params">(Class&lt;T&gt; requiredType)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    assertBeanFactoryActive();<br>    <span class="hljs-keyword">return</span> getBeanFactory().getBean(requiredType);<br>&#125;<br></code></pre></td></tr></table></figure><p>先 getBeanFactory() 获取 BeanFactory 对象，然后去 getBean()，相当于用代理对象（组合对象）去获取这个东西。<br>也就是说 BeanFactory 其实是一个<strong>底层的 IoC 容器</strong>，ApplicationContext 是在这基础上增加了一些他的特性。    </p><h2 id="8-Spring-应用上下文"><a href="#8-Spring-应用上下文" class="headerlink" title="8. Spring 应用上下文"></a>8. Spring 应用上下文</h2><p>ApplicationContext 除了 IoC 容器角色,还有提供:</p><ul><li>面向切面(AOP)</li><li>配置元信息(Configuration Metadata)</li><li>资源管理(Resources)</li><li>事件(Events)</li><li>国际化(i18n)</li><li>注解(Annotations)</li><li>Environment抽象(Environment Abstraction)</li></ul><h2 id="9-使用-IoC-容器"><a href="#9-使用-IoC-容器" class="headerlink" title="9. 使用 IoC 容器"></a>9. 使用 IoC 容器</h2><ul><li>BeanFactory 是 Spring 底层 IoC 容器</li><li>ApplicationContext 是具备应用特性的 BeanFactory 超集</li></ul><h3 id="9-1-XML-场景下底层-IoC-容器：BeanFactory"><a href="#9-1-XML-场景下底层-IoC-容器：BeanFactory" class="headerlink" title="9.1 XML 场景下底层 IoC 容器：BeanFactory"></a>9.1 XML 场景下底层 IoC 容器：BeanFactory</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.container;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* &lt;h1&gt;&#123;<span class="hljs-doctag">@link</span> BeanFactory&#125; 作为 IoC 容器示例&lt;/h1&gt;</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment">* <span class="hljs-doctag">@since</span> 2023/5/9</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanFactoryAsIoCContainerDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建 BeanFactory 容器</span><br>        DefaultListableBeanFactory beanFactory = <span class="hljs-keyword">new</span> DefaultListableBeanFactory();<br>        XmlBeanDefinitionReader reader = <span class="hljs-keyword">new</span> XmlBeanDefinitionReader(beanFactory);<br>        <span class="hljs-comment">// XML 配置文件 classpath 路径</span><br>        String IoCation = <span class="hljs-string">&quot;META-INF/dependency-injection-context.xml&quot;</span>;<br>        <span class="hljs-comment">// 加载配置，返回加载到的 Bean 个数</span><br>        <span class="hljs-keyword">int</span> loadBeanDefinitions = reader.loadBeanDefinitions(IoCation);<br>        System.out.println(loadBeanDefinitions);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解析：DefaultListableBeanFactory 是 IoC 的底层容器，XmlBeanDefinitionReader 是 XML 方式的 Bean 定义的一个读取器，观察他的构造方法：需要一个 BeanDefinitionRegistry 接口类型</p><p>的参数，DefaultListableBeanFactory 这个类呢又实现了 BeanDefinitionRegistry 接口，所以可以利用 XmlBeanDefinitionReader 和 DefaultListableBeanFactory 来加载 Bean 的配置。</p><p>一句话可以总结为：从 IoCation 的位置把配置好的 Bean 加载到 DefaultListableBeanFactory 定义的 IoC 容器中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">XmlBeanDefinitionReader</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(registry);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-2-注解场景下-ApplicationContext-作为-IoC-容器"><a href="#9-2-注解场景下-ApplicationContext-作为-IoC-容器" class="headerlink" title="9.2 注解场景下 ApplicationContext 作为 IoC 容器"></a>9.2 注解场景下 ApplicationContext 作为 IoC 容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.container.overview.container;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.ListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.support.DefaultListableBeanFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> tech.fengjian.ioc.container.overview.domain.User;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &lt;h1&gt;&#123;<span class="hljs-doctag">@link</span> org.springframework.beans.factory.BeanFactory&#125;作为 IoC 容器示例&lt;/h1&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 风间</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2023/5/9</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationApplicationContextAsIoCContainerDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        <span class="hljs-comment">// 创建 ApplicationContext 容器</span><br>        AnnotationConfigApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext();<br>        <span class="hljs-comment">// 将当前类 AnnotationApplicationContextAsIoCContainerDemo 作为配置类（Configuration Class）</span><br>        applicationContext.register(AnnotationApplicationContextAsIoCContainerDemo.class);<br>        <span class="hljs-comment">// 启动应用上下文</span><br>        applicationContext.refresh();<br>        <span class="hljs-comment">// 依赖查找集合对象</span><br>        lookupCollectionByType(applicationContext);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">user</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setId(<span class="hljs-number">1l</span>);<br>        user.setName(<span class="hljs-string">&quot;jack&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lookupCollectionByType</span><span class="hljs-params">(AnnotationConfigApplicationContext beanFactory)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> ListableBeanFactory) &#123;<br>            ListableBeanFactory listableBeanFactory = (ListableBeanFactory) beanFactory;<br>            Map&lt;String, User&gt; users = listableBeanFactory.getBeansOfType(User.class);<br>            System.out.println(<span class="hljs-string">&quot;查找到的所有 User 集合对象：&quot;</span> + users);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10-IoC-容器生命周期"><a href="#10-IoC-容器生命周期" class="headerlink" title="10. IoC 容器生命周期"></a>10. IoC 容器生命周期</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>我们先看下 applicationContext.refresh() 方法，字面意思是重新刷新，实际意义呢是启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;<br>        <span class="hljs-comment">// Prepare this context for refreshing.</span><br>        prepareRefresh();<br><br>        <span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span><br>        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();<br><br>        <span class="hljs-comment">// Prepare the bean factory for use in this context.</span><br>        prepareBeanFactory(beanFactory);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span><br>            postProcessBeanFactory(beanFactory);<br><br>            <span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br>            invokeBeanFactoryPostProcessors(beanFactory);<br><br>            <span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br>            registerBeanPostProcessors(beanFactory);<br><br>            <span class="hljs-comment">// Initialize message source for this context.</span><br>            initMessageSource();<br><br>            <span class="hljs-comment">// Initialize event multicaster for this context.</span><br>            initApplicationEventMulticaster();<br><br>            <span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span><br>            onRefresh();<br><br>            <span class="hljs-comment">// Check for listener beans and register them.</span><br>            registerListeners();<br><br>            <span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br>            finishBeanFactoryInitialization(beanFactory);<br><br>            <span class="hljs-comment">// Last step: publish corresponding event.</span><br>            finishRefresh();<br>        &#125;<br><br>        <span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br>            <span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br>                        <span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>            &#125;<br><br>            <span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>            destroyBeans();<br><br>            <span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>            cancelRefresh(ex);<br><br>            <span class="hljs-comment">// Propagate exception to caller.</span><br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br><br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br>            <span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>            resetCommonCaches();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>synchronized (this.startupShutdownMonitor)</code>：首先他加了一把锁，这个锁为什么要加，因为任何一个 ApplicationContext 可以在任意的代码里去进行创建，那也可以多线程创建，Spring 的设计者也不知道你是不是处于一个线程安全还是非安全的情况。</li><li><code>prepareRefresh</code>:准备刷新，做一些前期准备工作,<ul><li>记录启动时间</li><li>初始化 PropertySources </li><li>和校验有关的一些东西 getEnvironment().validateRequiredProperties()</li><li>earlyApplicationListeners</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareRefresh</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// Switch to active.</span><br><span class="hljs-keyword">this</span>.startupDate = System.currentTimeMillis();<br><span class="hljs-keyword">this</span>.closed.set(<span class="hljs-keyword">false</span>);<br><span class="hljs-keyword">this</span>.active.set(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br><span class="hljs-keyword">if</span> (logger.isTraceEnabled()) &#123;<br>logger.trace(<span class="hljs-string">&quot;Refreshing &quot;</span> + <span class="hljs-keyword">this</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>logger.debug(<span class="hljs-string">&quot;Refreshing &quot;</span> + getDisplayName());<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Initialize any placeholder property sources in the context environment.</span><br>initPropertySources();<br><br><span class="hljs-comment">// Validate that all properties marked as required are resolvable:</span><br><span class="hljs-comment">// see ConfigurablePropertyResolver#setRequiredProperties</span><br>getEnvironment().validateRequiredProperties();<br><br><span class="hljs-comment">// Store pre-refresh ApplicationListeners...</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.earlyApplicationListeners == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">this</span>.earlyApplicationListeners = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(<span class="hljs-keyword">this</span>.applicationListeners);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Reset IoCal application listeners to pre-refresh state.</span><br><span class="hljs-keyword">this</span>.applicationListeners.clear();<br><span class="hljs-keyword">this</span>.applicationListeners.addAll(<span class="hljs-keyword">this</span>.earlyApplicationListeners);<br>&#125;<br><br><span class="hljs-comment">// Allow for the collection of early ApplicationEvents,</span><br><span class="hljs-comment">// to be published once the multicaster is available...</span><br><span class="hljs-keyword">this</span>.earlyApplicationEvents = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>obtainFreshBeanFactory：用于创建一个新的、空的 <code>BeanFactory</code>，要使用此方法必须先调用 <code>refresh()</code> 方法刷新应用程序上下文。该方法将创建一个基本的 <code>DefaultListableBeanFactory</code> 实例，如果需要可以自定义实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> ConfigurableListableBeanFactory <span class="hljs-title">obtainFreshBeanFactory</span><span class="hljs-params">()</span> </span>&#123;<br>refreshBeanFactory();<br><span class="hljs-keyword">return</span> getBeanFactory();<br>&#125;<br></code></pre></td></tr></table></figure><p>​    看下 <code>refreshBeanFactory</code> 方法，在 <code>AbstractRefreshableApplicationContext</code> 类中，创建了 <code>DefaultListableBeanFactory</code>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">refreshBeanFactory</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>    <span class="hljs-keyword">if</span> (hasBeanFactory()) &#123;<br>        destroyBeans();<br>        closeBeanFactory();<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        DefaultListableBeanFactory beanFactory = createBeanFactory();<br>        beanFactory.setSerializationId(getId());<br>        customizeBeanFactory(beanFactory);<br>        loadBeanDefinitions(beanFactory);<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.beanFactoryMonitor) &#123;<br>            <span class="hljs-keyword">this</span>.beanFactory = beanFactory;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ApplicationContextException(<span class="hljs-string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><code>prepareBeanFactory(beanFactory)</code> 方法，一大段操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">prepareBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;<br><span class="hljs-comment">// Tell the internal bean factory to use the context&#x27;s class loader etc.</span><br>beanFactory.setBeanClassLoader(getClassLoader());<br>beanFactory.setBeanExpressionResolver(<span class="hljs-keyword">new</span> StandardBeanExpressionResolver(beanFactory.getBeanClassLoader()));<br>beanFactory.addPropertyEditorRegistrar(<span class="hljs-keyword">new</span> ResourceEditorRegistrar(<span class="hljs-keyword">this</span>, getEnvironment()));<br><br><span class="hljs-comment">// Configure the bean factory with context callbacks.</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> ApplicationContextAwareProcessor(<span class="hljs-keyword">this</span>));<br>beanFactory.ignoreDependencyInterface(EnvironmentAware.class);<br>beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);<br>beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);<br>beanFactory.ignoreDependencyInterface(MessageSourceAware.class);<br>beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);<br><br><span class="hljs-comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span><br><span class="hljs-comment">// MessageSource registered (and found for autowiring) as a bean.</span><br>beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);<br>beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="hljs-keyword">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="hljs-keyword">this</span>);<br>beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="hljs-keyword">this</span>);<br><br><span class="hljs-comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span><br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> ApplicationListenerDetector(<span class="hljs-keyword">this</span>));<br><br><span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span><br><span class="hljs-keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> LoadTimeWeaverAwareProcessor(beanFactory));<br><span class="hljs-comment">// Set a temporary ClassLoader for type matching.</span><br>beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));<br>&#125;<br><br><span class="hljs-comment">// Register default environment beans.</span><br><span class="hljs-keyword">if</span> (!beanFactory.containsIoCalBean(ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsIoCalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());<br>&#125;<br><span class="hljs-keyword">if</span> (!beanFactory.containsIoCalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;<br>beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们说<code>Environment</code>对象为什么能够通过依赖查找的方式可以查得到，就是受到这段 registerSingleton 代码的注入进去，为什么我们可以得到<code>BeanFactory</code>这个对象，因为这里通过registerResolvableDependency 可以把 BeanFactory 作为一个非 Bean 的方式来进行注入</p><ul><li><p>postProcessBeanFactory、invokeBeanFactoryPostProcessors：进一步初始化动作，这里相当于交给你去做，相当于 BeanFactory 扩展点，制定你的 Factory 来实现</p></li><li><p>registerBeanPostProcessors：对 Bean 进行调整</p></li><li><p>initMessageSource：国际化</p></li><li><p>initApplicationEventMulticaster：事件广播</p></li><li><p>registerListeners：注册监听器</p></li><li><p>finishBeanFactoryInitialization：初始化完成 </p></li></ul><p>总结一下 ApplicationContext 启动过程中的一些基本操作：</p><p>第一个：创建 BeanFactory -&gt; 进行初步的初始化 -&gt; 加入一些内建的 Bean 对象或者 Bean 依赖以及加上一些内建的非 Bean 依赖</p><p>第二个：BeanFactory的扩展点，通过执行 BeanFactoryPostProcessor，你可以定义成 Bean，可以添加到容器</p><p>第三个：对 Bean 的一些修改或者扩展，通过执行 BeanPostProcessor，这里只是注册，具体的调用是在 BeanFactory 中进行操作的</p><p>接下来就会进行国际化、事件注册，那资源操作在哪里呢，ResourceLoader</p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><p>applicationContext.close() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>.startupShutdownMonitor) &#123;<br>        doClose();<br>        <span class="hljs-comment">// If we registered a JVM shutdown hook, we don&#x27;t need it anymore now:</span><br>        <span class="hljs-comment">// We&#x27;ve already explicitly closed the context.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.shutdownHook != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().removeShutdownHook(<span class="hljs-keyword">this</span>.shutdownHook);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (IllegalStateException ex) &#123;<br>                <span class="hljs-comment">// ignore - VM is already shutting down</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看 doClose 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doClose</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Check whether an actual close attempt is necessary...</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.active.get() &amp;&amp; <span class="hljs-keyword">this</span>.closed.compareAndSet(<span class="hljs-keyword">false</span>, <span class="hljs-keyword">true</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>            logger.debug(<span class="hljs-string">&quot;Closing &quot;</span> + <span class="hljs-keyword">this</span>);<br>        &#125;<br><br>        LiveBeansView.unregisterApplicationContext(<span class="hljs-keyword">this</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Publish shutdown event.</span><br>            publishEvent(<span class="hljs-keyword">new</span> ContextClosedEvent(<span class="hljs-keyword">this</span>));<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            logger.warn(<span class="hljs-string">&quot;Exception thrown from ApplicationListener handling ContextClosedEvent&quot;</span>, ex);<br>        &#125;<br><br>        <span class="hljs-comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.lifecycleProcessor != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">this</span>.lifecycleProcessor.onClose();<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                logger.warn(<span class="hljs-string">&quot;Exception thrown from LifecycleProcessor on context close&quot;</span>, ex);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// Destroy all cached singletons in the context&#x27;s BeanFactory.</span><br>        destroyBeans();<br><br>        <span class="hljs-comment">// Close the state of this context itself.</span><br>        closeBeanFactory();<br><br>        <span class="hljs-comment">// Let subclasses do some final clean-up if they wish...</span><br>        onClose();<br><br>        <span class="hljs-comment">// Reset IoCal application listeners to pre-refresh state.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.earlyApplicationListeners != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">this</span>.applicationListeners.clear();<br>            <span class="hljs-keyword">this</span>.applicationListeners.addAll(<span class="hljs-keyword">this</span>.earlyApplicationListeners);<br>        &#125;<br><br>        <span class="hljs-comment">// Switch to inactive.</span><br>        <span class="hljs-keyword">this</span>.active.set(<span class="hljs-keyword">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>销毁 Bean，关闭 BeanFactory，还可以进一步的自定义操作 onClose() 做一些动作。</p><h2 id="11-面试题"><a href="#11-面试题" class="headerlink" title="11. 面试题"></a>11. 面试题</h2><p><strong><font color="green" size="2">沙雕面试题</font></strong>-什么是 Spring IoC 容器？</p><p>答：Spring Framework implementation of the Inversion of Control (IoC) principle. IoCis also known as dependency injection (DI). It is a process whereby </p><p>objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory imethod,or properties </p><p>that are set on the object instance after it is constructed or returned from a factory method. The containerthen injects those dependencies when it creates </p><p>the bean.</p><p>Spring Framework 是一种实现控制反转（IoC）原则的框架，IoC 也被称为依赖注入（DI）。它是一种过程，其中对象通过构造函数参数、工厂方法的参数或在构造对象后或从工厂方法返回后设置在对象实例上</p><p>的属性来定义其依赖项（即其与其他对象的配合工作）。容器然后在创建 Bean 时注入这些依赖项。</p><p><strong><font color="orange" size="2">996面试题</font></strong>-BeanFactory 和 FactoryBean 的区别？</p><p>答：BeanFactory是IoC底层容器 FactoryBean 是创建 Bean 的一种方式,帮助实现复杂的初始化逻辑，看下代码说明：</p><p>Interface to be implemented by objects used within a BeanFactory which are themselves factories for individual objects. If a bean implements this interface,it</p><p> is used as a factory for an object to expose, not directly as a bean instance that will be exposed itself.</p><p>这是一个接口去实现一个 Object，然后这个 Object 中有几个特性，这个特性其实就是为了帮助你去暴露一个 Bean，他这个 Bean 呢通常来说不是一个正常的 Bean，或者说不是一个能够简单处理的 Bean。</p><p>我们看下之前的 User 对象，他是非常简单的 POJO,他就是一个默认的构造器参数通过反射的方式进行调用。但是现实情况可能没这么简单，假设 User 这个对象是第三方来进行创建的，这个时候咋办呢，没办法</p><p>通过反射的方式直接去获取这个对象进行初始化，因此你可以通过 BeanFactory 的方式来进行操作：</p><p>getObject 是主要逻辑，这个方法会被容器调用，这个容器怎么知道这个方法要被调用呢，这个前提就是 getObjectType，这个 getObjectType 去决定哪个对象要去做，如果对象的类型相同怎么办，就通过</p><p>是不是单例（isSingleton）的方式来进行区分，如果每次去获取的时候都是同一个对象的话，如果 isSingleton 是 true（默认），他返回的是同一个对象，否则的话呢就不是同一个对象。</p><p>那 getObject 是不是每次都会被调用，答案是否定的。</p><p>也就是说 FactoryBean 是解决复杂场景下 Bean 的初始化或者构造问题，那么创建的 Bean 是不是还会经过 Bean 的生命周期呢？后续揭秘</p><p><strong><font color="red" size="2">劝退面试题</font></strong>-Spring IoC 容器启动时做了哪些准备?？</p><p>答：IoC 配置元信息读取和解析、IoC 容器生命周期、Spring 事件发布、国际化等,更多答案将在后续专题章节逐一讨论</p><p><strong>本节完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring 核心编程思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 核心编程思想（二）：重新认识 IoC</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-重新认识-IoC"><a href="#1-重新认识-IoC" class="headerlink" title="1. 重新认识 IoC"></a>1. 重新认识 IoC</h2><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>IoC 发展简介</td><td>包括 IoC 的定义以及它的一个简史</td></tr><tr><td>IoC 主要实现策略</td><td>其实 IoC 不只是我们所看到的包括 Martin Fowler 或者是像 Spring 官方的它的一个讨论</td></tr><tr><td>IoC 容器的职责</td><td>有多方解读来进行说明</td></tr><tr><td>IoC 容器的实现</td><td>包括了我们的开源实现和传统实现</td></tr><tr><td>传统 IoC 容器实现</td><td>着重介绍就是一种关于Java Beans 对 IoC 的容器的一个实现</td></tr><tr><td>轻量级 IoC 容器</td><td>如何定义以及它给我们带来的好处，有什么值得我们学习的地方</td></tr><tr><td>依赖查找 VS 依赖注入</td><td>为什么我们说Spring框架里面会偏好于依赖注入而非依赖查找</td></tr><tr><td>构造器注入 VS Setter注入</td><td>关于构造器注入和 Setter 方法注入的一个区别和优势</td></tr><tr><td>面试题精选</td><td>-</td></tr></tbody></table><h2 id="2-IoC-发展简介"><a href="#2-IoC-发展简介" class="headerlink" title="2. IoC 发展简介"></a>2. IoC 发展简介</h2><h3 id="2-1-什么是-IoC"><a href="#2-1-什么是-IoC" class="headerlink" title="2.1 什么是 IoC?"></a>2.1 什么是 IoC?</h3><p>In software engineering, inversion of control (IoC) is a programmiing principle. IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-wvritten portions of a computer program receive the flow of control from a generic framework. Asoftware architecture with this design inverts</p><p>control as compared to traditional procedural programming: in traaditional programming, the custom code that expresses the purpose of the program calls into </p><p>reusable libraries to take care of generic tasks, but with inversion of control, it is the framework that calls into the custom,or task-specific,code.</p><p>在软件工程中，控制反转（IoC）是一种编程原则。与传统的控制流相比，IoC 反转了控制流。在 IoC 中，计算机程序的自定义部分从通用框架接收控制流。具有这种设计的软件架构与传统的过程式编程相比，控</p><p>制被反转了：在传统的编程中，表达程序目的的自定义代码调用可重用库来处理通用任务，但是在控制反转中，是框架调用自定义或特定任务的代码。</p><p>​                                                                                                       来源:<a href="https://en.wikipedia.org/wiki/Inversion_of_control">https://en.wikipedia.org/wiki/Inversion_of_control</a></p><h3 id="2-2-发展简介"><a href="#2-2-发展简介" class="headerlink" title="2.2 发展简介"></a>2.2 发展简介</h3><p>1983 年,Richard E. Sweet 在《The Mesa Programming Environment》中提出”Hollywood Principle”(好莱坞原则)</p><p>1988 年,Ralph E.Johnson&amp;Brian Foote在《Designing ReusableClasses》中提出”Inversion of control”(控制反转)</p><p>1996 年,Michael Mattson 在《Object-Oriented Frameworks, Asurvey of methodological issues》中将 “Inversion of control” 命名为 “Hollywood principle”</p><p><font color="red">2004 年,Martin Fowler 在《Inversion of Control Containers andthe Dependency Injectionpattern》中提出了自己对 IoC 以及 DI 的理解</font></p><p>2005 年,Martin Fowler 在《Inversion of Control》对 IoC 做出进一步的说明</p><h2 id="3-IoC-主要实现策略"><a href="#3-IoC-主要实现策略" class="headerlink" title="3. IoC 主要实现策略"></a>3. IoC 主要实现策略</h2><ul><li><p>维基百科(<a href="https://en.wikipedia.org/wiki/Inversion_of_control">https://en.wikipedia.org/wiki/Inversion_of_control</a>)</p><p>Implementation techniques小节的定义:</p><p>“In object-oriented programming, there are several basic techniquees to implement inversion of control. These are:</p><ul><li>Using a service IoCator pattern：服务定位模式，这种模式是 JavaEE 里面所定义的一种模式，通常通过 JNDI 这种技术获取 JavaEE 的组件，比如说获取 EJB 组件或者 DataSource 这样的东西</li><li>Using dependency injection, for example：依赖注入<ul><li>Constructor injection：构造器注入</li><li>Parameter injection：参数注入</li><li>Setter injection：set 方法注入</li><li>Interface injection：接口注入</li></ul></li><li>Using a contextualized lookup：上下文依赖查询，由另外一种技术来进行实现，比如说在 Java 里面有 Java Beans 这样的技术，Java Beans 里面有一个通用的上下文叫做 bean context，这种里面既可以传输我的 Bean 也可以来管理我的Bean的层次性</li><li>Using template method design pattern：关于模板方法的一个设计模式，这种设计模式在Spring里面大量地会用到，比如说是SpringJDBC里面会用到，JDBC Template这样的实现会给我们一种类似于比如说Statement这样的Callback这种Callback能够帮助我们实现地更为抽象，当我们去实现这样的接口的时候我们不需要关心Callback从哪来，那么也实现了一种反转控制的方式</li><li>Using strategy design pattern:策略模式”</li></ul></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>》提到的主要实现策略:</p><p>“IoC is a broad concept that can be implemented in different ways. There are two main types:</p><p><strong>Dependency Lookup（依赖查找）</strong>: The container provides callbacks to components, and a lookup context. This is</p><p>the EJB and Apache Avalon approach. It leaves the onus each component to use container APls</p><p>look up resources and collaborators. The Inversion of Control is limited to the container invoking</p><p>callback methods that application code can use to obtain resources.</p><p><strong>Dependency Injection（依赖注入）</strong>: Components do no look up; they provide plain Java methods enabling the</p><p>container to resolve dependencies. The container is wholly responsible for wiring up components,</p><p>passing resolved objects in to JavaBean properties or constructors. Use of JavaBean properties is</p><p>called Setter Injection; use of constructor arguments is called Constructor Injection.”</p></li></ul><h2 id="4-IoC-容器的职责"><a href="#4-IoC-容器的职责" class="headerlink" title="4. IoC 容器的职责"></a>4. IoC 容器的职责</h2><ol><li>维基百科(<a href="https://en.wikipedia.org/wiki/Inversion_of_control">https://en.wikipedia.org/wiki/Inversion_of_control</a>)</li></ol><p>在Overview小节中提到:</p><p>“Inversion of control serves the following design purposes:</p><ul><li>To decouple（解耦） the execution of a task from implementation.</li><li>To focus a module on the task it is designed for.</li><li>To free modules from assumptions about how other systems do what they do and instead rely on<br>contracts.</li><li>To prevent side effects when replacing a module.</li></ul><p>Inversion of control is sometimes facetiously referred to as the ‘Hollywood Principle: Don’t call us, we’ll<br>call you’.”</p><ul><li>通用职责</li><li>依赖处理<ul><li>依赖查找</li><li>依赖注入</li></ul></li><li>生命周期管理<ul><li>容器</li><li>托管的资源(JavaBeans 或其他资源)</li></ul></li><li>配置<ul><li>容器</li><li>外部化配置</li><li>托管的资源(JavaBeans 或其他资源)</li></ul></li></ul><h2 id="5-IoC-容器的实现"><a href="#5-IoC-容器的实现" class="headerlink" title="5. IoC 容器的实现"></a>5. IoC 容器的实现</h2><ul><li>主要实现<ul><li>Java SE<ul><li>Java Beans</li><li>Java ServiceLoader SPl</li><li>JNDI (Java Naming and Directory Interface)</li></ul></li><li>Java EE<ul><li>EJB (Enterprise Java Beans)</li><li>Servlet</li></ul></li><li>开源<ul><li>Apache Avalon (<a href="http://avalon.apache.org/closed.html">http://avalon.apache.org/closed.html</a>)</li><li>PicoContainer (<a href="http://picocontainer.com/">http://picocontainer.com/</a>)</li><li>Google Guice (<a href="https://github.com/google/guice">https://github.com/google/guice</a>)</li><li>Spring Framework (<a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a>)</li></ul></li></ul></li></ul><h2 id="6-传统-IoC-容器实现：Java-Beans"><a href="#6-传统-IoC-容器实现：Java-Beans" class="headerlink" title="6. 传统 IoC 容器实现：Java Beans"></a>6. 传统 IoC 容器实现：Java Beans</h2><ul><li><p>特性</p><ul><li>依赖查找</li><li>生命周期管理</li><li>配置元信息</li><li>事件</li><li>自定义</li><li>资源管理</li><li>持久化</li></ul></li><li><p>规范</p><ul><li>JavaBeans: <a href="https://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html">https://www.oracle.com/technetwork/java/javase/tech/index-jsp-138795.html</a></li><li>BeanContext: <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/beans/spec/beancontext.htm">https://docs.oracle.com/javase/8/docs/technotes/guides/beans/spec/beancontext.htm</a></li></ul></li><li><p>Java Beans 实战</p><p>通常来说对于 Java Bean 的理解可以认为是一个简单的 POJO，但是对 Java Bean 的理解可以了解得更多</p><ul><li><p>新建 maven 项目 java-beans-demo</p></li><li><p>新建 Person 类 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.java.beans;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述人的 POJO 类</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * POJO: Setter/Getter方法</span><br><span class="hljs-comment"> * Java Beans：可写方法(Writable)/可读方法(Readable)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">// Property</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建 BeanInfoDemo 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> tech.fengjian.ioc.java.beans;<br><br><span class="hljs-keyword">import</span> java.beans.BeanInfo;<br><span class="hljs-keyword">import</span> java.beans.IntrospectionException;<br><span class="hljs-keyword">import</span> java.beans.Introspector;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> java.beans.BeanInfo&#125; 示例</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanInfoDemo</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IntrospectionException </span>&#123;<br><br>        <span class="hljs-comment">// 通过 Java Beans 自省操作定义 BeanInfo</span><br>        BeanInfo beanInfo = Introspector.getBeanInfo(Person.class);<br><br>        Arrays.stream(beanInfo.getPropertyDescriptors()).forEach(propertyDescriptor -&gt; &#123;<br>            System.out.println(propertyDescriptor);<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>关于 BeanInfo 的解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.beans;<br><br><span class="hljs-keyword">import</span> java.awt.Image;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanInfo</span> </span>&#123;<br><br>    <span class="hljs-function">BeanDescriptor <span class="hljs-title">getBeanDescriptor</span><span class="hljs-params">()</span></span>;<br><br>    EventSetDescriptor[] getEventSetDescriptors();<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDefaultEventIndex</span><span class="hljs-params">()</span></span>;<br><br>    PropertyDescriptor[] getPropertyDescriptors();<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getDefaultPropertyIndex</span><span class="hljs-params">()</span></span>;<br><br>    MethodDescriptor[] getMethodDescriptors();<br><br>    BeanInfo[] getAdditionalBeanInfo();<br><br>    <span class="hljs-function">Image <span class="hljs-title">getIcon</span><span class="hljs-params">(<span class="hljs-keyword">int</span> iconKind)</span></span>;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个类里会有一些描述：</p><ul><li><p>BeanDescriptor getBeanDescriptor();</p><p>Bean 的 Descriptor，那么 Bean 的 Descriptor 这里主要是指的一些Bean的基本的描述</p></li><li><p>EventSetDescriptor[] getEventSetDescriptors();</p><p>关于事件上的描述，那么这事件就包括我的事件的一个处理的方法</p></li><li><p>PropertyDescriptor[] getPropertyDescriptors();</p><p>还有就是关于我的 Property 描述器或者描述符，描述我们定义的写方法和读方法</p></li></ul></li><li><p>上面 BeanInfoDemo 输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">java.beans.PropertyDescriptor[name=age; propertyType=<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Integer</span></span>; readMethod=<span class="hljs-keyword">public</span> java.lang.Integer tech.fengjian.ioc.java.beans.Person.getAge(); writeMethod=<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> tech.fengjian.ioc.java.beans.Person.setAge(java.lang.Integer)]<br>java.beans.PropertyDescriptor[name=<span class="hljs-class"><span class="hljs-keyword">class</span></span>; propertyType=<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">Class</span></span>; readMethod=<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> java.lang.Class java.lang.Object.getClass()]<br>java.beans.PropertyDescriptor[name=name; propertyType=<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>.<span class="hljs-title">lang</span>.<span class="hljs-title">String</span></span>; readMethod=<span class="hljs-keyword">public</span> java.lang.String tech.fengjian.ioc.java.beans.Person.getName(); writeMethod=<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> tech.fengjian.ioc.java.beans.Person.setName(java.lang.String)]<br></code></pre></td></tr></table></figure><p>输出了 age、class、name 三个 Property 描述信息。这里多出了一个 class，这个是 Object 类中的 getClass 方法，跟定义 BeanInfo 的方法参数有关，若指定 stopClass 为 Object有，那么 class 就不会输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BeanInfo beanInfo = Introspector.getBeanInfo(Person.class,Object.class);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="7-轻量级-IoC-容器"><a href="#7-轻量级-IoC-容器" class="headerlink" title="7. 轻量级 IoC 容器"></a>7. 轻量级 IoC 容器</h2><ul><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>》认为轻量级容器的特征:</p><p>A container that can manage application code.能够管理到我的应用代码，并不是说我们是个代码的托管工具，它是说我们的容器可以管理代码运行，比如说可以控制代码的一个启停。</p><p>A container that is quick to start up.说它能够快速地启动。</p><p>A container that doesn’t require any special deployment steps to deploy objects within it.它不需要一些特殊的配置</p><p>A container that has such a light footprint and minimal API dependencies that it can be run in a variety of environments.容器它能够达到一些比较轻量级的内存占用,以及最小化的 API 的一个依赖</p><p>A container that sets the bar for adding a managed object so low in terms of deployment effort and performance. overhead that it’s possible to deploy and</p><p>manage fine-grained objects, as well as coarse-grained components.</p><p>容器就需要一些可以管控的这么一个渠道去部署和管理一些细粒度的对象甚至是一些粗粒度的组件，主要它是要达到一些部署上的一个效率以及相关的性能上面的一个开销，那么是它对相当于容器的一个补充说明。</p></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>》认为轻量级容器的好处：</p><p>Escaping the monolithic container 释放掉一些容器，就所谓的聚式或者是单体这样的容器，monolithic 这种单词就是聚式或者说我们的单体应用</p><p>Maximizing codereusability 要实现最大化的一个代码的复用</p><p>Greater object orientation 更大程度上面的面向对象</p><p>Greater productivity 更大化的一个产品化</p><p>Better testability 更好的可测试性</p></li></ul><h2 id="8-依赖查找-VS-依赖注入"><a href="#8-依赖查找-VS-依赖注入" class="headerlink" title="8. 依赖查找 VS 依赖注入"></a>8. 依赖查找 VS 依赖注入</h2><p>从 5 个纬度来进行对比：没有绝对的好与坏，只有相对的合理</p><table><thead><tr><th>类型</th><th>依赖处理</th><th>实现便利性</th><th>代码侵入性</th><th>API 依赖性</th><th>可读性</th></tr></thead><tbody><tr><td>依赖查找</td><td>主动获取</td><td>相对繁琐</td><td>侵入业务逻辑</td><td>依赖容器 API</td><td>良好</td></tr><tr><td>依赖注入</td><td>被动提供</td><td>相对便利</td><td>低侵入性</td><td>不依赖容器 API</td><td>一般</td></tr></tbody></table><h2 id="9-构造器注入-VS-Setter注入"><a href="#9-构造器注入-VS-Setter注入" class="headerlink" title="9. 构造器注入 VS Setter注入"></a>9. 构造器注入 VS Setter注入</h2><ul><li><p>Spring Framework 对构造器注入与 Setter 的论点:</p><p>“The Spring team generally <font color="red">advocates constructor injection</font>, as it lets you implement application components as immutable objects and ensures that required </p><p>dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state. As a side note, a large number of constructor arguments a bad code smell, implying that the class likely has too many responsibilities and should be refactored</p><p>to better address proper separation of concerns.</p><p>Spring 团队通常倡导使用构造函数注入（constructor injection），因为它可以让你把应用组件实现为不可变对象，并确保必需的依赖项不为空。此外，构造函数注入的组件总是以完全初始化的状态返回给客户端代码（调用方）。一个额外的说明是，大量的构造函数参数是一种不好的代码气味，意味着这个类可能有太多的职责，应该进行重构，以更好地实现关注点分离。</p><p><font color="red"> Setter injection should primarily only be used for optional dependencies</font> that can be assigned reasonable default values within </p><p>the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods</p><p>make objects of that class amenable to reconfiguration or re-injection later Management through JMX MBeans is therefore a compelling use case for setter</p><p>injection.”</p><p>Setter 注入应主要仅用于可以在类内分配合理默认值的可选依赖项。否则，在代码使用该依赖项的所有地方都必须执行非空检查。 Setter 注入的一个好处是，setter 方法使得那个类的对象容易在以后进行重新配置或重新注入。因此，通过JMX MBeans进行管理是 Setter 注入的一个很好的用例。</p></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>)认为 Setter 注入的优点:</p><p>“<font color="red">Advantages of Setter Injection</font> include:</p><ul><li><p>JavaBean properties are <font color="red">well supported</font> in IDES.</p></li><li><p>JavaBean properties are <font color="red">self-documenting</font>.</p></li><li><p>JavaBean properties are inherited by subclasses without the need for any code</p></li><li><p>It’s possible to use <font color="red">the standard JavaBeans property-editor machinery for type conversions</font> if necessary</p></li><li><p>Many existing JavaBeans can be used within a JavaBean-oriented IoC container without modification</p></li><li><p>If there is a corresponding getter for each setter (making the property readable, as well as writable), it is possible to ask</p></li></ul><p>the component for its current configuration state. This is particularly useful if we want to persist that state: for example,</p><p>in an XML form or in a database. With Constructor Injection, there’s no way to find the current state.</p><ul><li>Setter Injection works well for objects that have default values, meaning that not all properties need to be supplied at</li></ul><p>runtime.”</p><p>Setter 注入的优点包括：</p><ul><li><p>JavaBean 属性在 IDE 中获得很好的支持。</p></li><li><p>JavaBean 属性是自我记录的。</p></li><li><p>JavaBean 属性被子类继承，无需任何代码。</p></li><li><p>如有必要，可以使用标准的 JavaBeans 属性编辑器机制进行类型转换。</p></li><li><p>许多现有的 JavaBeans 可以在 JavaBean 导向的 IoC 容器中使用而无需修改。</p></li><li><p>如果每个 setter 都有相应的 getter（使属性可读和可写），则可以询问组件其当前配置状态。如果想要保存该状态，这非常有用，例如在XML表单或数据库中。使用构造函数注入，没有办法找到当前状态。</p></li><li><p>Setter 注入适用于具有默认值的对象，这意味着不需要在运行时提供所有属性。</p></li></ul></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>》认为 Setter 注入的缺点:</p><p>“<font color="red">Disadvantages</font> include:</p><p>The order in which setters are called is not expressed in any contract. Thus, we sometimes need to invoke a method after the last setter has been called to initialize the component. Spring provides the <code>org.springframework.beans.factory.InitializingBean</code> interface for this; it also provides the ability to invoke an arbitrary init method. However, this contract must be documented to ensure correct use outside a container. Not all the necessary setters may have been called before use. The object can thus be left partially configured.”</p><p>缺点包括：</p><p>在任何契约中都没有表达调用 setter 的顺序。因此，我们有时需要在最后一个 setter 被调用之后调用方法来初始化组件。Spring 提供了<code>org.springframework.beans.factory.InitializingBean</code> 接口和调用任意初始化方法的能力。然而，这个契约必须被记录以确保在容器之外正确使用。在使用之前可能没有调用所有必要的setter，因此对象可能会部分配置不完整。</p></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>》认为构造器注入的优点:<br>“<font color="red">Advantages of Constructor Injection</font> include:</p><ul><li>Each managed object is guaranteed to be in a consistent state-fully configured-before it can be invoked in any<br>business methods. This is the primary motivation of Constructtor Injection. (However, it is possible to achieve the<br>same result with JavaBeans via dependency checking, as Spring can optionally perform.) There’s no need for<br>initialization methods.</li><li>There may be slightly less code than results from the useof multiple JavaBean methods, although will be no<br>difference in complexity.”</li></ul></li><li><p>《Expert One-on-One<sup>TM</sup> J2EE<sup>TM</sup> Development without EJB<sup>TM</sup>)认为构造器注入的缺点:<br>“<font color="red">Disadvantages</font> include:</p><ul><li>Although also a Java-language feature, multi-argument coonstructors are probably less common in existing code thause<br>of JavaBean properties.</li><li>Java constructor arguments don’t have names visible by introspection</li><li>Constructor argument lists are less well supported by IDEs tharJavaBean setter methods.</li><li>Long constructor argument lists and large constructor bodies can become unwieldy</li><li>Concrete inheritance can become problematic.</li><li>Poor support for optional properties, compared to JavaBeaans</li><li>Unittesting can be slightly more difficult</li><li>When collaborators are passed in on object construction, it becomes impossible to change the reference held in the<br>object.”</li></ul></li></ul><h2 id="10-面试题"><a href="#10-面试题" class="headerlink" title="10. 面试题"></a>10. 面试题</h2><p><strong><font color="green" size="2">沙雕面试题</font></strong>-什么是 IoC？</p><p>答:</p><p>简单地说,IoC 是反转控制,类似于好莱坞原则,主要有依赖查找和依赖注入实现，</p><p>进一步说的话：按照IoC的定义很多方面都是IoC,我们常说的比如说 JavaBeans 是 IoC 的一个容器实现、Servlet 的容器也是 IoC 的实现，因为 Servlet 可以去依赖或者反向地通过 JNDI 的方式进行得到一些外部的一些资源包括 DataSource 或者相关的 EJB 的组件，与此同时像是 Spring Framework 或者 PicoContainer 的依赖注入的框架也能够帮助我们去实现我们的IoC。同时除此之外这些东西是我们比较常见的一个 IoC 的实现策略。按照它这个定义如果是反转控制那东西就多了去了，包括我们说消息其实也算，因为消息其实是被动的我们如果说我们传统的调用链路是一个主动拉的模式那么 IoC 其实是一种推的模式，那么推的模式在消息事件以及各种这样类似于这种反向的观察者模式的扩展都属于 IoC 那么这东西就无穷无尽了，那么它如果仅仅关注于依赖注入比如说通过构造器注入或 Setter 注入，那么它其中有什么好处。</p><p><strong><font color="orange" size="2">996面试题</font></strong>-依赖查找和依赖注入的区别？</p><p>答:依赖查找是主动或手动的依赖查找方式,通常需要依赖容器或标准 API 实现。而依赖注入则是手动或自动依赖绑定的方式,无需依赖特定的容器和 API。</p><p><strong><font color="red" size="2">劝退面试题</font></strong>-Spring 作为 IoC 容器有什么优势？</p><p>答:<br>典型的 IoC 管理,依赖查找和依赖注入</p><p>AOP 抽象</p><p>事务抽象</p><p>事件机制</p><p>SPI 扩展</p><p>强大的第三方整合</p><p>易测试性</p><p>更好的面向对象</p><p><strong>本节完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring 核心编程思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>玩转 vue3</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/vue3/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/vue3/</url>
    
    <content type="html"><![CDATA[<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><h3 id="版本要求"><a href="#版本要求" class="headerlink" title="版本要求"></a>版本要求</h3><p>vue3.2 版本：vue-cli 版本 4.5.13 以上</p><h3 id="首次安装"><a href="#首次安装" class="headerlink" title="首次安装"></a>首次安装</h3><p>安装 node，版本要求 v12以上，安装 node 后自带 npm</p><p>安装 nrm，镜像源管理，nrm use xxx 切换镜像源</p><p>npm install nrm -g</p><p>npm install -g @vue/cli</p><h3 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h3><p>vue -V 检查版本</p><p>vue update -g @vue/cli</p><h3 id="vue-cli-创建项目"><a href="#vue-cli-创建项目" class="headerlink" title="vue-cli 创建项目"></a>vue-cli 创建项目</h3><p>vue create vue3-demo</p><p>step 1:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Vue CLI v5.0.1<br>? Please pick a preset:<br>  Default ([Vue 3] babel, eslint)<br>  Default ([Vue 2] babel, eslint)<br>❯ Manually select features // 手动配置<br></code></pre></td></tr></table></figure><p>step 2:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">Vue CLI v5.0.1<br>? Please pick a preset: Manually select features<br>? Check the features needed <span class="hljs-keyword">for</span> your project: (Press &lt;space&gt; to select, &lt;a&gt; to t<br>oggle all, &lt;i&gt; to invert selection, and &lt;enter&gt; to proceed)<br> ◉ Babel // 使用 babel<br> ◯ TypeScript<br> ◯ Progressive Web App (PWA) Support<br> ◉ Router // 添加 vue-router<br> ◉ Vuex // 添加 vuex<br> ◉ CSS Pre-processors // 使用 css 预处理器<br> ◉ Linter / Formatter // 代码格式化<br> ◯ Unit Testing<br>❯◯ E2E Testing<br></code></pre></td></tr></table></figure><p>step 3:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">Vue CLI v5.0.1<br>? Please pick a preset: Manually select features<br>? Check the features needed <span class="hljs-keyword">for</span> your project: Babel, Router, Vuex, CSS Pre-proce<br>ssors, Linter<br>? Choose a version of Vue.js that you want to start the project with (Use arrow<br>keys)<br>❯ 3.x // 选择 vue 3.0 版本<br>  2.x<br></code></pre></td></tr></table></figure><p>step 4:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>Vue CLI v5.0.1<br>? Please pick a preset: Manually select features<br>? Check the features needed <span class="hljs-keyword">for</span> your project: Babel, Router, Vuex, CSS Pre-proce<br>ssors, Linter<br>? Choose a version of Vue.js that you want to start the project with 3.x<br>? Use <span class="hljs-built_in">history</span> mode <span class="hljs-keyword">for</span> router? (Requires proper server setup <span class="hljs-keyword">for</span> index fallback<br><span class="hljs-keyword">in</span> production) (Y/n) n // 不使用 <span class="hljs-built_in">history</span> 模式的路由<br><br></code></pre></td></tr></table></figure><p>step 5:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported<br>by default): (Use arrow keys)<br>❯ Sass/SCSS (with dart-sass) // 使用基于 dart-sass 的 scss 预处理器<br>  Less<br>  Stylus<br><br></code></pre></td></tr></table></figure><p>step 6:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">? Pick a linter / formatter config: (Use arrow keys)<br>  ESLint with error prevention only<br>  ESLint + Airbnb config<br>❯ ESLint + Standard config 使用 ESLint 标准化格式代码方案<br>  ESLint + Prettier<br></code></pre></td></tr></table></figure><p>step 7:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i<br>&gt; to invert selection, and &lt;enter&gt; to proceed)<br> ◉ Lint on save<br>❯◉ Lint and fix on commit // 保存时 &amp;&amp; 提交时，都进行 lint<br></code></pre></td></tr></table></figure><p>step 8:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">? Where <span class="hljs-keyword">do</span> you prefer placing config <span class="hljs-keyword">for</span> Babel, ESLint, etc.? (Use arrow keys)<br>❯ In dedicated config files // 单独的配置文件<br>  In package.json<br><br></code></pre></td></tr></table></figure><p>step 9:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">? Where <span class="hljs-keyword">do</span> you prefer placing config <span class="hljs-keyword">for</span> Babel, ESLint, etc.? In dedicated confi<br>g files<br>? Save this as a preset <span class="hljs-keyword">for</span> future projects? (y/N) n // 不存储预设<br></code></pre></td></tr></table></figure><p>step 10: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm run serve // 运行项目<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>vue3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue3</tag>
      
      <tag>elementPlus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring拾遗</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%8B%BE%E9%81%97/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%8B%BE%E9%81%97/</url>
    
    <content type="html"><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><ol><li><p>当一个类中既有构造方法，又有 set 方法时，依赖注入会失败，因为 spring 优先使用构造方法实现 DI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">IUserService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> IUserDao userDao;<br><br>    <span class="hljs-comment">// 构造方法的存在会导致注入失败</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserServiceImpl</span><span class="hljs-params">(IUserDao userDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUserDao</span><span class="hljs-params">(IUserDao userDao)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.userDao.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tech.fengjian.service.impl.UserServiceImpl&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;userDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;userDao&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>spring整合junit4</p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><span class="hljs-comment">// 指定运行器</span><br><span class="hljs-meta">@ContextConfiguration(classes = SpringConfig.class)</span><span class="hljs-comment">// 指定spring容器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountServiceTest</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSave</span><span class="hljs-params">()</span> </span>&#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>动态代理</p><ul><li><p>jdk 动态代理</p><p>基于接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JDK动态代理工厂类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDKProxyFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 采用动态代理技术来生成目标类的代理对象</span><br><span class="hljs-comment">     * ClassLoader loader：类加载器，借助被代理对象获取类加载器</span><br><span class="hljs-comment">     * Class&lt;?&gt;[] interfaces：被代理类所需实现的全部接口</span><br><span class="hljs-comment">     * InvocationHandler h：当代理对象调用接口中的任意方法时，那么会执行 InvocationHandler中的invoke方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AccountService <span class="hljs-title">createAccountServiceJDKProxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        AccountService accountServiceProxy = (AccountService) Proxy.newProxyInstance(accountService.getClass().getClassLoader(), accountService.getClass().getInterfaces(), <span class="hljs-keyword">new</span> InvocationHandler() &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * proxy：当前代理对象的引用</span><br><span class="hljs-comment">             * method：被调用的目标方法的引用</span><br><span class="hljs-comment">             * args：被调用的目标方法所用到的参数</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>                <span class="hljs-comment">// 被代理对象的原方法执行</span><br>                System.out.println(<span class="hljs-string">&quot;目标方法执行之前...&quot;</span>);<br>                method.invoke(accountService, args);<br>                System.out.println(<span class="hljs-string">&quot;目标方法执行之后...&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> accountServiceProxy;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>cglib 动态代理</p><p>基于父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 该类就是采用cglib动态代理来对目标类（AccountServiceImpl）进行方法（transfer）的动态增强（添加上事务控制）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CglibProxyFactory</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AccountService accountService;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AccountService <span class="hljs-title">createAccountServiceCglibProxy</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 参数1：目标类的字节码对象</span><br><span class="hljs-comment">         * 参数2：动作类，当代理对象调用目标对象中的原方法时，那么会执行intercept方法</span><br><span class="hljs-comment">         */</span><br>        AccountService accountServiceProxy = (AccountService) Enhancer.create(accountService.getClass(), <span class="hljs-keyword">new</span> MethodInterceptor() &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * o：代表生成的代理对象 method：调用目标方法的引用 objects：方法入参 methodProxy：代理方法</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">intercept</span><span class="hljs-params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>                method.invoke(accountService, objects);<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">return</span> accountServiceProxy;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring 核心编程思想（一）：Spring Framework 总览</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/spring%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Spring-Framework-总览"><a href="#1-Spring-Framework-总览" class="headerlink" title="1. Spring Framework 总览"></a>1. Spring Framework 总览</h2><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>准备工作</td><td>学习 Spring Framework 需要哪些前期铺垫</td></tr><tr><td>特性总览</td><td>了解 Spring Framework 提供了哪些功能特性</td></tr><tr><td>版本特性</td><td>关于版本分布与特性之间的关系</td></tr><tr><td>模块化设计</td><td>Spring 如何从单一的模块划分成不同的模块</td></tr><tr><td>对 Java 语言特性的运用</td><td>Spring 每个版本的语言支持</td></tr><tr><td>对 JDK API 实践</td><td>Spring 对 Java API 的整合和实践</td></tr><tr><td>对 Java EE API 的整合</td><td>Spring 对 Java EE 的整合，比如 Servlet 规范、JPA 规范等等</td></tr><tr><td>编程模型</td><td>Spring 是如何实践和实现 Java 编程模型的一个示范</td></tr><tr><td>核心价值</td><td>Spring 对我们日常开发和一些架构学习中带来哪些重要特性</td></tr><tr><td>面试题精选</td><td>-</td></tr></tbody></table><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul><li><strong>心态</strong></li></ul><p>​    戒骄戒躁 谨慎豁达 如履薄冰</p><ul><li><strong>方法</strong></li></ul><p>​    基础：夯实基础，了解动态</p><p>​    思考：保持怀疑，验证一切</p><p>​    分析：不拘小节，观其大意</p><p>​    实践：思辨结合，学以致用</p><ul><li><strong>工具</strong></li></ul><p>​    JDK: Oracle JDK 8</p><p>​    Spring Framwork：5.2.2.RELEASE</p><p>​    IDE: InteliJ IDEA 2022</p><p>​    MAVEN: 3.2+</p><h2 id="3-特性总览"><a href="#3-特性总览" class="headerlink" title="3. 特性总览"></a>3. 特性总览</h2><h3 id="3-1-核心特性（Core）"><a href="#3-1-核心特性（Core）" class="headerlink" title="3.1 核心特性（Core）"></a>3.1 核心特性（Core）</h3><ul><li><p>IoC 容器(loCContainer)</p></li><li><p>Spring 事件(Events)</p></li><li><p>资源管理(Resources)</p></li><li><p>国际化(i18n)</p></li><li><p>校验(Validation)</p></li><li><p>数据绑定(DataBinding)</p></li><li><p>类型转换(TypeConversion)</p></li><li><p>Spring 表达式(Spring Express Language)</p></li><li><p>面向切面编程(AOP)</p></li></ul><h3 id="3-2-数据存储（Data-Access）"><a href="#3-2-数据存储（Data-Access）" class="headerlink" title="3.2 数据存储（Data Access）"></a>3.2 数据存储（Data Access）</h3><ul><li><p>JDBC</p></li><li><p>事务抽象(Transactions)</p></li><li><p>DAO 支持(DAOSupport)</p></li><li><p>O/R 映射 (O/R Mapping)</p></li><li><p>XML编列(XML Marshalling) </p></li></ul><h3 id="3-3-Web技术-Web"><a href="#3-3-Web技术-Web" class="headerlink" title="3.3 Web技术(Web)"></a>3.3 Web技术(Web)</h3><ul><li>Web Servlet 技术栈</li></ul><p>​    Spring MVC</p><p>​    WebSocket</p><p>​    SockJS</p><ul><li>Web Reactive 技术栈</li></ul><p>​    Spring WebFlux</p><p>​    WebClient</p><p>​    WebSocket</p><h3 id="3-4-技术整合-Integration"><a href="#3-4-技术整合-Integration" class="headerlink" title="3.4 技术整合(Integration)"></a>3.4 技术整合(Integration)</h3><ul><li><p>远程调用(Remoting)</p></li><li><p>Java 消息服务(JMS)</p></li><li><p>Java 连接架构(JCA)</p></li><li><p>Java 管理扩展(JMX)</p></li><li><p>Java 邮件客户端(Email)</p></li><li><p>本地任务(Tasks)</p></li><li><p>本地调度(Scheduling)</p></li><li><p>缓存抽象(Caching)</p></li><li><p>Spring 测试(Testing)</p><p>模拟对象(Mock Objects)</p><p>TestContext 框架(TestContext Framework)</p><p>SpringMVC 测试(SpringMVCTest)</p><p>Web 测试客户端(WebTestClient)</p></li></ul><h2 id="4-版本特性"><a href="#4-版本特性" class="headerlink" title="4. 版本特性"></a>4. 版本特性</h2><p>Java 版本依赖与支持</p><table><thead><tr><th>Spring Framework 版本</th><th>Java 标准版</th><th>Java 企业版</th></tr></thead><tbody><tr><td>1.x</td><td>1.3+</td><td>J2EE 1.3 +</td></tr><tr><td>2.x</td><td>1.4.2+</td><td>J2EE 1.3 +</td></tr><tr><td>3.x</td><td>5+</td><td>J2EE 1.4 和 Java EE 5</td></tr><tr><td>4.x</td><td>6+</td><td>Java EE 6 和 7</td></tr><tr><td>5.x</td><td>8+</td><td>Java EE 7</td></tr></tbody></table><p><strong>tips：</strong></p><ul><li>Java5 之前的 Java 的标准版叫 J2SE，就是 Java2 然后 Standard E这个版本。</li><li>Java5 之前的 Java 的企业版叫 J2EE。</li></ul><h3 id="1-x-版本"><a href="#1-x-版本" class="headerlink" title="1.x 版本"></a>1.x 版本</h3><ol><li><p>为什么从 1.3 开始？</p><p>因为Spring Framework的早期的版本叫什么，interface21，那么这个版本其实就依赖于 Java1.3，Java1.3 引入了一个非常重要的特性是什么，就是动态代理。</p><p>从 Java1.3 开始就会针对接口的方式来进行动态代理，那么这是实现 AOP 的一个很重要的环节，因此 Spring 的第 1 个版本就必须依赖 Java1.3。</p></li><li><p>那么与此同时它支持的 JavaEE 版本是 1.3，这个版本一个简单特性就是 Servlet 的 API 对应的 JavaEE 的版本是 1.3，Servlet 的版本是 2.3 这个版本，2.3 这个版本它在里面会支持 Servlet 事件，那么因此它可以和我们的 Spring的事件来进行一个呼应，他们都是 Java 标准事件的实现。</p></li></ol><h3 id="2-x-版本"><a href="#2-x-版本" class="headerlink" title="2.x 版本"></a>2.x 版本</h3><p>这个版本里面主要是支持了一些包括我们常见的比如说NIO的支持，那么这时候JavaEE的企业版本并没有做太多的更新，它还是支持到了JavaEEJ2EE的1.3这个版本</p><h3 id="3-x-版本"><a href="#3-x-版本" class="headerlink" title="3.x 版本"></a>3.x 版本</h3><p>3.x 其实是比较重大的版本，Spring 从 3 这个版本开始引入到大量的注解，所以它需要的支持的版本是 Java5，因为我们知道 Java5 里面会提升到一些注解，包括注解、枚举这样的东西，所以在 3 里面会引入它大量的注解和枚举。所以这个时候版本的要求最低的Java标准版的要求是Java5。</p><p>那么对应的 JavaEE 的版本，这里是指的是支持的版本，从 J2EE 1.4到 Java EE 5，那么这个版本就这么一个过渡过程。</p><p>那么 3 为什么非常重要，因为3基本上确定了 Spring Framework 的一个内核，这个内核是比较多的，包括比如说注解驱动、事件驱动，包括一些AOP的支持，它都是这个版本做的比较完善。</p><h3 id="4-x-版本和-5-x-版本"><a href="#4-x-版本和-5-x-版本" class="headerlink" title="4.x 版本和 5.x 版本"></a>4.x 版本和 5.x 版本</h3><p>那么4这个版本基本上在3的版本上面增加了一些新的东西，那么主要是一些细节性的东西，包括注解上面的提升，包括利用 Java8 里面的API来进行提升，那么当然它这个4版本并不要求一定是 Java8，那么它最低要求是 Java6 就可以了。那么这是为了照顾到更多的人去使用到 Spring Framework 4这个版本。</p><p>那么与此同时从 SpringFramework 4 开始也是对于 Spring Boot 1.x的一个支持，那么1.x就是说 Spring Boot 的 1 版本，也就说 Spring Boot的 1.x 版本它是基于Spring4来进行开发的，那么 SpringBoot2 是基于 Spring Framework 5 来开发的。所以你会看到它的一个区别点，那么从5开始对应的是Java EE 7。</p><p>其实这个时候从 Spring4 开始，其实 Spring 的翅膀就非常硬了，它对 JavaEE 的支持其实是一种若即若离的那种感觉，所以因此基本上从 4 开始形成了自己的体系，尤其 Spring Boot 起来之后，包括Spring Cloud 出现之后，基本上它的完整的体系就已经生成了。</p><h2 id="5-模块化设计"><a href="#5-模块化设计" class="headerlink" title="5. 模块化设计"></a>5. 模块化设计</h2><p>Spring 大概分了 20 个模块：</p><p>spring-aop：面向接口编程</p><p>spring-aspects：Spring 对 aspects 的支持</p><p>spring-jms：JMS 其实是 Java Message Service 的一个缩写，比如说Java的一个消息服务，那么这里可以对应的比如说 Apache 的 ActiveMQ 或者其他传统的 JavaEE 的消息中间件，那么这部分内容只针对于说我们的 JMS 规范来进行实施的，那么因此它会利用到大量的 JMS 的 API 来进行实现    </p><p>spring-context-indexer</p><p>spring-context-support</p><p>spring-context:</p><p>spring-beans：spring-beans和spring-context合成起来就是Spring IoC的一个重要的核心的实现，无论是 spring-beans 还是 spring-context，都是通过 spring-core 来进行支持的</p><p>spring-core：spring-core就包含了一些关于 Java 语法的特性的支持以及林林总总</p><p>spring-messaging：Spring想统一一下消息服务的一个实现，那么包括了我们说的JMS包括了Kafka，包括 RocketMQ 或者是 RabbitMQ，它都会有一个统一的实现的一个标准，那么这个东西也和JMS也是一样的，JMS 过去是希望通过一套标准的 API 来统一比如说 MQ 或者是比如说 WebLogicMQ 或者是 WebSphereMQ 的一个实现，那么 Spring 它的野心更大，它希望通过它自己 API 来帮助大家实现最简单或者是最好用的一个API的体验</p><p>spring-orm：就是我们比如说 Hibernate、JPA 这种东西的一个进行整合</p><p>spring-oxm：就是我们前面讲的XML编列，就是 marshal 和 unmarshal 这么一个东西，也就说这是XML里面的序列化和反序列化，这个东西是一个新的模块，Spring进行单独的一个维护</p><p>spring-test：这个测试包含了我们前面讲的 Mock 对象，包括我们说的 TestContext，比如说测试上下文，还包括 Spring 的 MVC 的测试，以及WebClient的测试，Web客户端的测试</p><p>spring-tx：tx其实是transaction的缩写，就是我们常讲的就是我们说Spring的事务抽象，这部分其实对于大家来说是非常重点，它是基本上借鉴了 JDBC 的一部分一个事务实现以及 Java EE 尤其是 EJB的一个事务实现，做一个统一的封装</p><p>spring-web：</p><p>spring-webflux：</p><p>spring-webmvc：</p><p>spring-websocket：</p><p>spring-expression：Spring的表达式语言，从 Spring 3 开始进行引入的，那么它类似于像 JSP 里面的 EL 语言</p><p>spring-instrument：这是 Spring 2开始之时对我们的Java的装配，简单讲就是 Java 的 agent 的一个支持</p><p>spring-jcl：那么这个模块是从 Spring 5开始支持的，因为我们知道我们过去运用过另外一个模块，就是关于 commons-logging，commons-logging 是统一了 Java 的 logging，就是 Java 的日志和Log4j 这个日志，那么 Java logging 之后又出现了一个 Loqback，Logback它是个新型的一个日志框架，那么又用到了 SLF4J，SLF4j 就相当于说又把 Java logging、我们的Log4j和我们的 Logback 来进行统一，那么Spring为了解决这个情况,它自己用一套新型的日志框架,那么就是我们说的JCL这个框架,那么这个框架会帮助Spring来统一它的日志管理。</p><p>spring-jdbc：是Spring对JDBC的一个整合</p><h2 id="6-对-Java-语言特性的运用"><a href="#6-对-Java-语言特性的运用" class="headerlink" title="6. 对 Java 语言特性的运用"></a>6. 对 Java 语言特性的运用</h2><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/46524e0cf73a3fbe.png"></p><ul><li><p>2004 是 Spring Framework 发布的年份，所以 Spring 在支持的时候，他在支持第一个版本的时候，他只要支持到 Java 的 1.3，不需要到 1.5，但他要考虑到 1.5 的支持，比如后面我们讲的 Spring 1.2 的版本的时候就开始支持了，比如我们常说的 Java 管理扩展，就是 Java Management Extensions，那么这个版本里面的分布就包括这么一些特性，包括枚举、泛型、注解、封箱或拆箱这么一些特性</p></li><li><p>那么 Java6 其实没有在 Java5 的基础上面做很多支持，只允许在接口上面增加 @Override，这个注解其实是强制要求子类或者子接口要覆盖父类或者父接口里面那个方法，那么过去在类里面是可以打的，那么@Override我们也知道它是新的一个注解的方式，在Java 5里面被引用到了，但是在接口上面是从Java6开始支持的。这部分特性其实在Spring里面体现的并不是非常的多，同时我们用的时候基本上也感知不到</p></li><li><p>对 Java7 主要有两大特点，第1个是 Diamond 语法，Diamond 语法简单是这么个意思，就是在我们用集合的时候我们要用到泛型类型，比如说一个 List，它的集合的元素类型的是 String，那么在newArrayList 的时候。就 new 数组的实现的时候，String 括号里面的东西可写可不写。不写的时候就是Diamond语法，写的时候就非Diamond语法。</p><p>还有一个就是多 Catch，多 Catch 新语法特性就是当你的一个 Exception 就是一个代码在执行的时候可能会遇到多个异常，那么这时候可以用一句话把多个异常来重新捕获那么这个东西在Spring的实现里面也有体现。</p><p>再来就是关于 Try resource，那么我们前面提到的东西一个专业术语叫 ARM（Automatic Resource Management），比如说我们在关闭 IO 的时候我们要调用一个 close 方法，那么通过try-with-resources 语法之后，可以不用强制去调 IO，其实这只是个语法层面的一个变化，底层还是会动态字节码生成一个close方法来调用</p></li><li><p>Java8一个非常显著的特点是支持在Lambda语法以及可重复注解，我们通常来说一个注解只能在一个类或一个方法上面标注一次，那么从 Java8 开始可以一个类或一个方法上面可以标注多个注解，那么这就是所谓的可重复注解。</p><p>还有一个就是类型注解，类型注解是个新的一个注解的方式，那么在Spring里面体现的并不是太多，从Java 9和Java 10开始，Spring Framework 5里面并没有提供Java 9和Java10之后的语法的或者API的支持，因为他考虑到Java9由于模块化的实现之后，其实Java社区产生了一定的分裂，就是说还是保留在Java8版本的可能是一个常态，那么或许Java9或者Java10它这种短期支持版本不太会长存，那么可能会寻找更长支持的版本。</p></li></ul><h3 id="Java5-语法特性"><a href="#Java5-语法特性" class="headerlink" title="Java5 语法特性"></a>Java5 语法特性</h3><table><thead><tr><th>语法特性</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>注解(Annotation)</td><td>1.2 +</td><td>@Transactional</td></tr><tr><td>枚举(Enumeration)</td><td>1.2 +</td><td>Propagation</td></tr><tr><td>for-each语法</td><td>3.0+</td><td>AbstractApplicationContext</td></tr><tr><td>自动装箱(AutoBoxing)</td><td>3.0+</td><td></td></tr><tr><td>泛型(Generic)</td><td>3.0+</td><td>ApplicationListener</td></tr></tbody></table><ul><li>注解(Annotation)：</li></ul><h3 id="Java6-语法特性"><a href="#Java6-语法特性" class="headerlink" title="Java6 语法特性"></a>Java6 语法特性</h3><table><thead><tr><th>语法特性</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>接口 @Override</td><td>4.0 +</td><td></td></tr></tbody></table><h3 id="Java7-语法特性"><a href="#Java7-语法特性" class="headerlink" title="Java7 语法特性"></a>Java7 语法特性</h3><table><thead><tr><th>语法特性</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>Diamond 语法</td><td>5.0 +</td><td>DefaultListableBeanFactory</td></tr><tr><td>try-with-resources 语法</td><td>5.0 +</td><td>ResourceBundleMessageSource</td></tr></tbody></table><h3 id="Java8-语法特性"><a href="#Java8-语法特性" class="headerlink" title="Java8 语法特性"></a>Java8 语法特性</h3><table><thead><tr><th>语法特性</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>Lambda语法</td><td>5.0 +</td><td>PropertyEditorRegistrySupport</td></tr></tbody></table><h2 id="7-对-JDK-API-实践"><a href="#7-对-JDK-API-实践" class="headerlink" title="7. 对 JDK API 实践"></a>7. 对 JDK API 实践</h2><h3 id="7-1-JDK-核心-API"><a href="#7-1-JDK-核心-API" class="headerlink" title="7.1 JDK 核心 API"></a>7.1 JDK 核心 API</h3><table><thead><tr><th>JDK 版本</th><th>核心 API</th></tr></thead><tbody><tr><td>&lt; Java5</td><td>反射(Reflection)<br/>Java Beans<br/>动态代理(Dynamic Proxy)</td></tr><tr><td>Java5</td><td>并发框架(J.U.C)<br/>格式化(Formatter)<br/>Java管理扩展(JMX)<br/>Instrumentation<br/>XML处理(DOM、SAX、XPath、<br/>XSTL)</td></tr><tr><td>Java6</td><td>JDBC 4.0 (JSR 221)<br/>JAXB 2.0 (JSR 222)<br/>可插拔注解处理API(JSR269)<br/>Common Annotations (JSR 250)<br/>Java Compiler API (JSR 199)<br/>Scripting in JVM (JSR 223)</td></tr><tr><td>Java7</td><td>NIO 2 (JSR 203)<br/>Fork/Join框架(JSR 166)<br/>invokedynamic字节码(JSR 292)</td></tr><tr><td>Java8</td><td>Stream API (JSR 335)<br/>CompletableFuture (J.U.C)<br/>Annotation on Java Types (JSR 308)<br/>Date and Time API (JSR 310)<br/>可重复Annotations(JSR 337)<br/>JavaScript运行时(JSR 223)</td></tr><tr><td>Java9</td><td>Reactive Streams Flow API (J.U.C)<br/>Process API Updates (JEP 102)<br/>Variable Handles (JEP 193)<br/>Method Handles (JEP 277)<br/>Spin-Wait Hints (JEP 285)<br/>Stack-Walking API (JEP 259)</td></tr></tbody></table><p>**tips: **JSR 是 Java Specification Request 的缩写，是 Java 规范请求</p><h3 id="7-2-Spring-对-JDK-API-实践"><a href="#7-2-Spring-对-JDK-API-实践" class="headerlink" title="7.2 Spring 对 JDK API 实践"></a>7.2 Spring 对 JDK API 实践</h3><h3 id="lt-Java-5-API"><a href="#lt-Java-5-API" class="headerlink" title="&lt; Java 5 API"></a>&lt; Java 5 API</h3><table><thead><tr><th>API类型</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>反射(Reflection)</td><td>1.0 +</td><td>MethodMatcher</td></tr><tr><td>Java Beans</td><td>1.0 +</td><td>Cachedlntrospection Results</td></tr><tr><td>动态代理(Dynamic Proxy)</td><td>1.0 +</td><td>JdkDynamicAopProxy</td></tr><tr><td>XML 处理(DOM,SAX…)</td><td>1.0 +</td><td>XmlBeanDefinition Reader</td></tr><tr><td>Java管理扩展(JMX)</td><td>1.2 +</td><td>@ManagedResource</td></tr><tr><td>Instrumentation</td><td>2.0 +</td><td>InstrumentationSavingAgent</td></tr><tr><td>并发框架(J.U.C)</td><td>3.0+</td><td>ThreadPoolTaskScheduler</td></tr><tr><td>格式化(Formatter)</td><td>3.0+</td><td>DateFormatter</td></tr></tbody></table><p><strong>tips:</strong> J.U.C 是 java.util.cocurrent 的缩写</p><h3 id="Java-6-API"><a href="#Java-6-API" class="headerlink" title="Java 6 API"></a>Java 6 API</h3><table><thead><tr><th>API类型</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>JDBC 4.0 (JSR 221)</td><td>1.0+</td><td>JdbcTemplate</td></tr><tr><td>Common Annotations (JSR 250)</td><td>2.5+</td><td>CommonAnnotationBeanPostProcessor</td></tr><tr><td>JAXB 2.0 (JSR 222)</td><td>3.0+</td><td>Jaxb2Marshaller</td></tr><tr><td>Scripting in JVM (JSR 223)</td><td>4.2+</td><td>StandardScriptFactory</td></tr><tr><td>可插拔注解处理API(JSR 269)</td><td>5.0+</td><td>@Indexed</td></tr><tr><td>Java Compiler API (JSR 199)</td><td>5.0+</td><td>TestCompiler(单元测试)</td></tr></tbody></table><ul><li><p>JAXB 是 Java API for XML Binding 的缩写，就是说 JavaAPI 去绑定 XML 的实现，里面就会有个 marshal、unmarshal 的操作。</p></li><li><p>由于Spring Boot 大量的支持之后，注解的使用需求出现了急剧性的膨胀，这个事情出现一个问题，注解的实现就来自于两个方面，一个是 ASM，一个是属于标准的 Java 反射，那么无论哪种方式都是在运行时的时候来进行实现的，那么有没有一种方法通过编译时来进行实现，那么方法是有的，那么我们说的 @Indexed 就是在我们传统的 Component 的基础上面，编译时把我的API去做一个相当于说建立索引能够帮助我快速的定位到到底哪个类建了 Component 索引，那么这时候我就可以定位到类而不需要逐一的将所有类进行逐一扫描。我们知道比如说我们说 Spring Framework里面有个标准的注解@ComponentScan，那么 scan 里面会指定一个 basePackages，那么你可以指定一个或多个这样的一个标准路径来进行扫描。那么这个注解打完之后，在编译时的时候它不需要扫描只要读取一个归位的路径得到了一个索引文件然后得到相应的类那么相当于说就减少了一个 scanning，一个运行时时间上操作</p></li></ul><h3 id="Java-7-API"><a href="#Java-7-API" class="headerlink" title="Java 7 API"></a>Java 7 API</h3><p>可以使用Markdown表格来整理这些内容，如下所示：</p><table><thead><tr><th>API类型</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>Fork/Join框架(JSR 166)</td><td>3.1+</td><td>ForkJoinPoolFactoryBean</td></tr><tr><td>NIO 2 (JSR 203)</td><td>4.0+</td><td>Path Resource</td></tr></tbody></table><h3 id="Java-8-API"><a href="#Java-8-API" class="headerlink" title="Java 8 API"></a>Java 8 API</h3><p>可以使用Markdown表格来整理这些内容，如下所示：</p><table><thead><tr><th>API类型</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>Date and Time API (JSR 310)</td><td>4.0+</td><td>DateTimeContext</td></tr><tr><td>可重复Annotations(JSR 337)</td><td>4.0+</td><td>@PropertySources</td></tr><tr><td>Stream API (JSR 335)</td><td>4.2+</td><td>StreamConverter</td></tr><tr><td>CompletableFuture (J.U.C)</td><td>4.2+</td><td>CompletableToListenableFutureAdapter</td></tr></tbody></table><h2 id="8-对-Java-EE-API-的整合"><a href="#8-对-Java-EE-API-的整合" class="headerlink" title="8. 对 Java EE API 的整合"></a>8. 对 Java EE API 的整合</h2><h3 id="8-1-Java-EE-Web-技术相关"><a href="#8-1-Java-EE-Web-技术相关" class="headerlink" title="8.1 Java EE Web 技术相关"></a>8.1 Java EE Web 技术相关</h3><table><thead><tr><th>JSR 规范</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>Servlet + JSP(JSR 035)</td><td>1.0+</td><td>DispatcherServlet, JstlView</td></tr><tr><td>JSTL(JSR 052)</td><td>1.0+</td><td>JstlView</td></tr><tr><td>JavaServer Faces(JSR 127)</td><td>2.0-4.2</td><td>FacesContextUtils</td></tr><tr><td>Portlet(JSR 168)</td><td>2.0-4.2</td><td>DispatcherPortlet</td></tr><tr><td>SOAP(JSR 067)</td><td>2.5+</td><td>SoapFaultException</td></tr><tr><td>WebServices(JSR 109)</td><td>2.5+</td><td>CommonAnnotationBeanPostProcessor</td></tr><tr><td>WebSocket(JSR 356)</td><td>4.0+</td><td>WebSocketHandler</td></tr></tbody></table><ul><li><p>Servlet + JSP(JSR 035)：是 Spring MVC 的一个核心实现标准，那么 Servlet 有 API，JSP 也有 API,这就会涉及两部分内容，通常来说我们最熟悉的就是 DispatcherServlet，他最核心的还是 Servlet API 的一个运用，包括他有很多 FrameworkServlet 的一个知识的扩展。除此之外 DispatcherSerlet 还负责一个事情，就是视图的渲染，包括 JSP 的视图</p></li><li><p>JSTL(JSR 052)：在 JSP 基础上做一些标签的扩展，比如说我们熟悉的 Struts 标签也是个方面</p></li><li><p>JavaServer Faces(JSR 127)：视图渲染技术，通过服务端的方式来保存一些状态</p></li><li><p>Portlet(JSR 168)：和 Servlet 是对应的，Servlet 主要关注 Web 方面，Portlet 主要关注于我们的门户，那么门户其实之前有个单独的实现，就是 JSR168 实现</p></li><li><p>SOAP(JSR 067)：SOAP 协议是 WebService 的一个通讯协议，全称是 Simple Object Access Protocol（简单对象访问协议）</p></li></ul><h3 id="8-2-Java-EE-数据存储相关"><a href="#8-2-Java-EE-数据存储相关" class="headerlink" title="8.2 Java EE 数据存储相关"></a>8.2 Java EE 数据存储相关</h3><table><thead><tr><th>JSR 规范</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>JDO(JSR 12)</td><td>1.0-4.2</td><td>JdoTemplate</td></tr><tr><td>JTA(JSR 907)</td><td>1.0+</td><td>JtaTransactionManager</td></tr><tr><td>JPA(EJB 3.0 JSR 220的成员)</td><td>2.0+</td><td>JpaTransactionManager</td></tr><tr><td>Java Caching API(JSR 107)</td><td>3.2+</td><td>JCacheCache</td></tr></tbody></table><ul><li><p>JDO(JSR 12)：JDO其实是JPA早期的一个或者说一个半成品，它在Spring框架里面从1.0到4.2予以支持，那么对应的代表作就是 JdoTemplate，它和 JdbcTemplate 是类似的，都是那种模板的方式来进行回调，那么这个东西在5.0之后不支持了，这里我们看出来这里从1.0到4.2，4.2其实就4X最后一个版本</p></li><li><p>JTA(JSR 907)：JTA的全称是Java Transaction API，就是 Java 的一个事务API那么它也是个标准，那么这个标准其实早在1.0就已经支持了，其实 Spring 的我们说的事务的抽象其实并不是它自己发明的，而是在前人基础上面来做了一些封装，那么第二个就是我们的JTA这个情况</p></li><li><p>JPA(EJB 3.0 JSR 220的成员)：它是作为 EJB3.0 的一个子成员，比如说EJBJSR220的一个子成员，那么它最新的版本已经到了2.1这个版本，那么JPA我们这里最开始支持的是 JPA1.0 版本，1.0 版本其实是注解驱动的方式进行存储，我们的一个 POJO 就是相当于类似于 Hibernate 的方式进行存储,对应的代表作就是 JpaTransactionManager,一个比较有意思的是在 JTA 里面也是叫 Transaction Manager，在JPA里面也有Transaction Manager，那么就说明什么，它们在事务上面Spring做了统一的封装</p></li><li><p>Java Caching API(JSR 107)：那么就是JSR 107这个API其实是一个NoSQL的一个实现，就说它就是 Key-Value 存储，那么这个版本也是较晚支持的，也就是说在 Spring3.2 开始支持的，那么这里有一个实现，就是说Spring自己有个 Cache 的一个实现，那么结合它的实现来进行统一的实现</p></li></ul><h3 id="8-3-Java-EE-Bean-技术相关"><a href="#8-3-Java-EE-Bean-技术相关" class="headerlink" title="8.3 Java EE Bean 技术相关"></a>8.3 Java EE Bean 技术相关</h3><table><thead><tr><th>JSR 规范</th><th>Spring支持版本</th><th>代表实现</th></tr></thead><tbody><tr><td>JMS(JSR 914)</td><td>1.1+</td><td>JmsTemplate</td></tr><tr><td>EJB 2.0 (JSR 19)</td><td>1.0+</td><td>AbstractStatefulSessionBean</td></tr><tr><td>Dependency Injection for Java(JSR 330)</td><td>2.5+</td><td>AutowiredAnnotationBeanPostProcessor</td></tr><tr><td>Bean Validation(JSR 303)</td><td>3.0+</td><td>LocalValidatorFactoryBean</td></tr></tbody></table><ul><li><p>JMS(JSR 914)：看起来和我们的 Java Bean 没有太大关系，JMS 其实在 EJB 里面有另外一个类似的称呼，叫做消息驱动 Bean，就是 Message Driven 然后 Bean 的一个方式。</p><p>那么JMS它的JSR规范是914，同时它在1.1的时候就开始予以支持了，那么Spring它也支持到JMS的一个1.2的规范。那么我们可以看出来它也是这种Template的方式来进行操作，就是JmsTemplate。那么和我们Jdbc它们俩也是类似的</p></li><li><p>EJB 2.0 (JSR 19)：我们说JMS早期是用到 EJB 里面的，所以 EJB2.0 的时候就已经开始支持了，那么也包括了 EJB 里面主要的有三种，有代表性的一个 Bean，一种是有状态 Bean，就是我们后面看到一个代表实现，这里是AbstractStatefulSession，那么就是有状态 Bean。有一种是无状态 Bean 就是 Stateless，就是说它这种无状态的 Bean。第三种 Bean 就是我们说的消息驱动 Bean，还有第四种，就是说我们把无状态 Bean和有状态 Bean 都分为会话 Bean 就是 SessionBean，那么第三种就是我们的JPA里面的存储的 Bean，就是我们持久化那个 Bean，这是我们前面所提到的事情</p></li><li><p>Dependency Injection for Java(JSR 330)：依赖注入 for API，那么依赖注入for API 其实这个东西也要感谢 Spring，这个地方是 Rod Johnson 来 Leader 这个 JSR 来进行支持的，也就是说他把以往的 Spring 里面的 Autowired 注解变成了 Injected 的注解提交给了JSR官方也是提交给Java的官方，然后他们来进行讨论。那么就成功地引用去了，那么这个实现就说在Spring里面的Autowired实现和Injected实现都放在了AutowiredAnnotationBeanPostProcessor代码里来实现</p></li><li><p>Bean Validation(JSR 303)：它其实也是由Hibernate团队里面的人来进行维护和进行引导的，那么在Spring 3.0版本开始就已经开始支持了，那么这个版本里面就会有一个非常有意思情况，就是说其实它是一个适配情况，就是说它把Spring校验和Bean的校验的规范做了融合，就形成了 LocalValidatorFactoryBean</p></li></ul><p><strong>tips：</strong></p><p>JSR官方网址:<a href="https://jcp.org/">https://jcp.org/</a><br>小马哥JSR收藏:<a href="https://github.com/mercyblitz/jsr">https://github.com/mercyblitz/jsr</a><br>Spring官方文档根路径:<a href="https://docs.spring.io/spring/docs/">https://docs.spring.io/spring/docs/</a></p><h2 id="9-编程模型"><a href="#9-编程模型" class="headerlink" title="9. 编程模型"></a>9. 编程模型</h2><h3 id="9-1-面向对象编程"><a href="#9-1-面向对象编程" class="headerlink" title="9.1 面向对象编程"></a>9.1 面向对象编程</h3><p>面向对象编程</p><p>契约接口:Aware、BeanPostProcessor…</p><p>设计模式:观察者模式、组合模式、模板模式…</p><p>对象继承:Abstract*类</p><ul><li><p>Aware 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Aware</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Aware 接口其实是 Spring3.1 提供的一个新的接口，那么它比较核心的一个接口是什么，就是 ApplicationContextAware</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.Aware;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ApplicationContextAware</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Aware</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Aware 它就是一个模式，就是说它每一种前面是它的一个类型，那么它要 Aware 什么东西，就会显示 ApplicationContextAware，这种方式会有一个 Set 的方法，那么会把对应的类型传递过来。</p><p>那么同理可得 BeanFactory，那么这里会把BeanFactory给做回来，那么当然还有其他几种，那么这种方式就是一个接口的方式，那么这个也称为 Aware 接口回调。</p><p>那么每当我的 Bean 去实现接口的时候，回调这么一个对象给我，就是传个对象给我们来进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanFactoryAware</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Aware</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>BeanPostProcessor 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.beans.factory.config;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.BeansException;<br><span class="hljs-keyword">import</span> org.springframework.lang.Nullable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-function"><span class="hljs-keyword">default</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br><span class="hljs-keyword">return</span> bean;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>那么这个接口也是我们经常用到的，就是关于 Bean 的一个生命周期的后置处理，那么包括 Beforelnitialization</p></li><li><p>观察者模式</p><p>ApplicationEvent 就是一个观察者模式的扩展，那么它是基于Java的标准事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.springframework.context;<br><br><span class="hljs-keyword">import</span> java.util.EventObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ApplicationEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventObject</span> </span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">7099057708183571937L</span>;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> timestamp;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ApplicationEvent</span><span class="hljs-params">(Object source)</span> </span>&#123;<br><span class="hljs-keyword">super</span>(source);<br><span class="hljs-keyword">this</span>.timestamp = System.currentTimeMillis();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTimestamp</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.timestamp;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>EventObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">java</span>.<span class="hljs-title">io</span>.<span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">5516075349620653480L</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">transient</span> Object  source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">EventObject</span><span class="hljs-params">(Object source)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (source == <span class="hljs-keyword">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;null source&quot;</span>);<br><br>        <span class="hljs-keyword">this</span>.source = source;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;[source=&quot;</span> + source + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>他有一个简单的实现：SimpleApplicationEventMulticaster，multicastEvent 方法就是一个观察者模式，通过事件的方式让我的监听器进行状态的回调或者说一个事件的处理。</p></li><li><p>组合模式</p><p>CompositeCacheManager 多个缓存进行合并</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CompositeCacheManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">CacheManager</span>, <span class="hljs-title">InitializingBean</span> </span>&#123;<br></code></pre></td></tr></table></figure></li><li><p>模板模式</p></li></ul><p>​    JdbcTemplate</p><ul><li><p>对象继承</p><p>AbstractApplicationContext、AbstractBeanFactory</p></li></ul><h3 id="9-2-面向切面编程"><a href="#9-2-面向切面编程" class="headerlink" title="9.2 面向切面编程"></a>9.2 面向切面编程</h3><p>动态代理:JdkDynamicAopProxy</p><p>字节码提升:ASM、CGLib、AspectJ…</p><h3 id="9-3-面向元编程"><a href="#9-3-面向元编程" class="headerlink" title="9.3 面向元编程"></a>9.3 面向元编程</h3><p>注解:模式注解(@Component、@Service、@Respository…)</p><p>配置:Environment抽象、PropertySources、BeanDefinition…</p><p>泛型:GenericTypeResolver、ResolvableType…</p><h3 id="9-4-函数驱动"><a href="#9-4-函数驱动" class="headerlink" title="9.4 函数驱动"></a>9.4 函数驱动</h3><p>函数接口:ApplicationEventPublisher<br>Reactive: Spring WebFlux</p><h3 id="9-5-模块驱动"><a href="#9-5-模块驱动" class="headerlink" title="9.5 模块驱动"></a>9.5 模块驱动</h3><p>Maven Artifacts<br>OSGI Bundles<br>Java 9 Automatic Modules<br>Spring @Enable*</p><h2 id="10-Spring-核心价值"><a href="#10-Spring-核心价值" class="headerlink" title="10. Spring 核心价值"></a>10. Spring 核心价值</h2><img src="https://s3.bmp.ovh/imgs/2023/05/06/2d88c4e345076d6a.png"  /><h2 id="11-面试题"><a href="#11-面试题" class="headerlink" title="11. 面试题"></a>11. 面试题</h2><p><strong><font color="green" size="2">沙雕面试题</font></strong>-什么是 Spring Framework？</p><ul><li><p>官方介绍</p><p>The Spring Framework provides a comprehensive programmingand configuration model for modern Java-based</p><p>enterprise applications - on any kind of deployment platforrm.</p><p>Spring 框架提供现代基于 Java 的企业应用程序的全面编程和配置模型，适用于任何类型的部署平台。</p><p>A key element of Spring is infrastructural support at the appplication level: Spring focuses on the “plumbing” of enterprisse</p><p>applications so that teams can focus on application-level buusiness logic, without unnecessary ties to specific deployment</p><p>environments.</p><p>Spring 的一个关键要素是应用程序级别的基础设施支持：Spring 专注于企业应用程序的“管道”，使团队可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境产生不必要的联系。</p></li><li><p><strong>官方文档描述</strong></p><p>Spring makes it easy to create Java enterprise applicattions</p><p>It provides everything you need to embrace the Java language iin</p><p>an enterprise environment, with support for Groovy and Koflin as</p><p>alternative languages on the JVM, and with the flexibility to</p><p>create many kinds of architectures depending on an</p><p>application’s needs.</p><p>Spring 使创建 Java 企业应用程序变得简单。它提供了您在企业环境中使用 Java 语言所需的一切支持，同时还支持在 JVM 上使用 Groovy 和 Kotlin 等备选语言，并具有根据应用程序需求创建多种架</p><p>构的灵活性。</p></li></ul><p><strong><font color="orange" size="2">996面试题</font></strong>-Spring Framework有哪些核心模块？</p><ul><li><p>spring-core:Spring 基础 API 模块,如资源管理,泛型处理</p></li><li><p>spring-beans:Spring Bean 相关,如依赖查找,依赖注入</p></li><li><p>spring-aop:SpringAOP 处理,如动态代理,AOP 字节码提升</p></li><li><p>spring-context:事件驱动、注解驱动,模块驱动等</p></li><li><p>spring-expression:Spring 表达式语言模块</p></li></ul><p><strong><font color="red" size="2">劝退面试题</font></strong>-Spring Framework 的优势和不足是什么？</p><p><strong>本节完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>spring 核心编程思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/nginx/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/nginx/</url>
    
    <content type="html"><![CDATA[<h2 id="一、传统方式安装"><a href="#一、传统方式安装" class="headerlink" title="一、传统方式安装"></a>一、传统方式安装</h2><ol><li><p>去官网 <a href="http://nginx.org/">http://nginx.org/</a> 下载对应的 nginx 包，推荐使用稳定版本</p></li><li><p>上传 nginx 到 linux 系统</p></li><li><p>安装依赖环境</p><p>(1) 安装 gcc 环境：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc-c++<br></code></pre></td></tr></table></figure><p>(2) 安装 PCRE 库，用于解析正则表达式:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y pcre pcre-devel<br></code></pre></td></tr></table></figure><p>(3) zlib 压缩和解压缩依赖</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y zlib zlib-devel <br></code></pre></td></tr></table></figure><p>(4) SSL 安全的加密的套接字协议层，用于 HTTP 安全传输，也就是 https</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y openssl openssl-devel<br></code></pre></td></tr></table></figure></li><li><p>解压，需要注意，解压后得到的是源码，源码需要编译后才能安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf nginx-1.16.1.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>编译之前，先创建nginx临时目录，如果不创建，在启动nginx的过程中会报错</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /var/temp/nginx -p<br></code></pre></td></tr></table></figure></li><li><p>在nginx目录，输入如下命令进行配置，目的是为了创建makefile文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">./configure --prefix=/usr/local/nginx \<br> --pid-path=/var/run/nginx/nginx.pid \<br> --lock-path=/var/lock/nginx.lock \<br> --error-log-path=/var/log/nginx/error.log \<br> --http-log-path=/var/log/nginx/access.log \<br> --with-http_gzip_static_module \<br> --http-client-body-temp-path=/var/temp/nginx/client \<br> --http-proxy-temp-path=/var/temp/nginx/proxy \<br> --http-fastcgi-temp-path=/var/temp/nginx/fastcgi \<br> --http-uwsgi-temp-path=/var/temp/nginx/uwsgi \<br> --http-scgi-temp-path=/var/temp/nginx/scgi<br></code></pre></td></tr></table></figure><ul><li>注： <code>\n</code> 代表在命令行中换行，用于提高可读性</li><li>配置命令：  <table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>-prefix</td><td>指定 nginx 安装目录</td></tr><tr><td>–pid-path</td><td>指向nginx的pid</td></tr><tr><td>–lock-path</td><td>锁定安装文件，防止被恶意篡改或误操作</td></tr><tr><td>–error-log</td><td>错误日志</td></tr><tr><td>–http-log-path</td><td>http日志</td></tr><tr><td>–with-http_gzip_static_module</td><td>启用gzip模块，在线实时压缩输出数据流</td></tr><tr><td>–http-client-body-temp-path</td><td>设定客户端请求的临时目录</td></tr><tr><td>–http-proxy-temp-path</td><td>设定http代理临时目录</td></tr><tr><td>–http-fastcgi-temp-path</td><td>设定fastcgi临时目录</td></tr><tr><td>–http-uwsgi-temp-path</td><td>设定uwsgi临时目录</td></tr><tr><td>–http-scgi-temp-path</td><td>设定scgi临时目录</td></tr></tbody></table></li></ul></li><li><p>make编译: make</p></li><li><p>安装: make install</p></li><li><p>进入sbin目录启动 nginx:</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx<br>./nginx<br></code></pre></td></tr></table></figure><p>停止：./nginx -s stop<br>重新加载：./nginx -s reload’</p></li><li><p>打开浏览器，访问虚拟机所处内网ip即可打开nginx默认页面，显示如下便表示安装成功：</p><p>注意事项:</p><ol><li>如果在云服务器安装，需要开启默认的nginx端口：80</li><li>如果在虚拟机安装，需要关闭防火墙</li><li>本地win或mac需要关闭防火墙</li></ol></li></ol><h2 id="二、docker方式安装"><a href="#二、docker方式安装" class="headerlink" title="二、docker方式安装"></a>二、docker方式安装</h2><ol><li><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx:1.19.3-alpine<br></code></pre></td></tr></table></figure></li><li><p>备份镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker save nginx:1.19.3-alpine -o nginx.1.19.3.alpine.tar<br></code></pre></td></tr></table></figure></li><li><p>导入镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load -i nginx.1.19.3.alpine.tar<br></code></pre></td></tr></table></figure></li><li><p>运行镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name nginx -p 80:80 nginx:1.19.3-alpine<br>进入容器<br>docker exec -it nginx sh<br>查看html目录<br>cd /usr/share/nginx/html<br>配置文件目录<br>cat /etc/nginx/nginx.conf<br></code></pre></td></tr></table></figure></li><li><p>浏览器测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">http://机器IP<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、核心配置文件-nginx-conf"><a href="#三、核心配置文件-nginx-conf" class="headerlink" title="三、核心配置文件 nginx.conf"></a>三、核心配置文件 nginx.conf</h2><ol><li><p>设置worker进程的用户，指的linux中的用户，会涉及到nginx操作目录或文件的一些权限，默认为 nobody</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">user root;<br></code></pre></td></tr></table></figure></li><li><p>worker进程工作数设置，一般来说CPU有几个，就设置几个，或者设置为N-1也行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">worker_processes 1;<br></code></pre></td></tr></table></figure></li><li><p>nginx 日志级别 debug | info | notice | warn | error | crit | alert | emerg ，错误级别从左到右越来越大</p></li><li><p>设置nginx进程 pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pid logs/nginx.pid;<br></code></pre></td></tr></table></figure></li><li><p>设置工作模式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">events &#123;<br><span class="hljs-meta">  #</span><span class="bash"> 默认使用epoll</span><br>  use epoll;<br><span class="hljs-meta">  #</span><span class="bash"> 每个worker允许连接的客户端最大连接数</span><br>  worker_connections 10240;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>http 是指令块，针对http网络传输的一些指令配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>include 引入外部配置，提高可读性，避免单个配置文件过大</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">include mime.types;<br></code></pre></td></tr></table></figure></li><li><p>设定日志格式， main 为定义的格式名称，如此 access_log 就可以直接使用这个变量了</p><table><thead><tr><th>参数名</th><th>参数意义</th></tr></thead><tbody><tr><td>$remote_addr</td><td>客户端ip</td></tr><tr><td>$remote_user</td><td>远程客户端用户名，一般为：’-’</td></tr><tr><td>$time_local</td><td>时间和时区</td></tr><tr><td>$request</td><td>请求的url以及method</td></tr><tr><td>$status</td><td>响应状态码</td></tr><tr><td>$body_bytes_send</td><td>响应客户端内容字节数</td></tr><tr><td>$http_referer</td><td>记录用户从哪个链接跳转过来的</td></tr><tr><td>$http_user_agent</td><td>用户所使用的代理，一般来时都是浏览器</td></tr><tr><td>$http_x_forwarded_for</td><td>通过代理服务器来记录客户端的ip</td></tr></tbody></table></li><li><p>sendfile 使用高效文件传输，提升传输性能。启用后才能使用 tcp_nopush ，是指当数据表累积一定大小后才发送，提高了效率。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sendfile on;<br>tcp_nopush on;<br></code></pre></td></tr></table></figure></li><li><p>keepalive_timeout 设置客户端与服务端请求的超时时间，保证客户端多次请求的时候不会重复建立新的连接，节约资源损耗。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">keepalive_timeout 0;</span><br>keepalive_timeout 65<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、nginx-日志切割"><a href="#四、nginx-日志切割" class="headerlink" title="四、nginx 日志切割"></a>四、nginx 日志切割</h2><ol><li>手动切割<br>现有的日志都会存在 access.log 文件中，但是随着时间的推移，这个文件的内容会越来越多，体积会越来越大，不便于运维人员查看，所以我们可以通过把文件切割为多份不同的小文件作为日志，切割规则可以以 天 为单位，如果每天有几百G或者几个T的日志的话，则可以按需以<code>每半天</code>或者<code>每小时</code>对日志切割步骤如下：<ul><li>创建一个shell可执行文件： cut_my_log.sh ，内容为： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>LOG_PATH=&quot;/var/log/nginx/&quot;<br>RECORD_TIME=$(date -d &quot;yesterday&quot; +%Y-%m-%d+%H:%M)<br>PID=/var/run/nginx/nginx.pid<br>mv $&#123;LOG_PATH&#125;/access.log $&#123;LOG_PATH&#125;/access.$&#123;RECORD_TIME&#125;.log<br>mv $&#123;LOG_PATH&#125;/error.log $&#123;LOG_PATH&#125;/error.$&#123;RECORD_TIME&#125;.log<br><span class="hljs-meta">#</span><span class="bash">向Nginx主进程发送信号，用于重新打开日志文件</span><br>kill -USR1 `cat $PID`<br></code></pre></td></tr></table></figure></li><li>为<code>cut_my_log.sh</code>添加可执行的权限：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod +x cut_my_log.sh<br></code></pre></td></tr></table></figure></li><li>测试日志切割后的结果:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./cut_my_log.sh<br></code></pre></td></tr></table></figure></li></ul></li><li>定时切割<ul><li><p>安装定时任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install crontabs<br></code></pre></td></tr></table></figure></li><li><p>crontab -e 编辑并且添加一行新的任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">*/1 * * * * /usr/local/nginx/sbin/cut_my_log.sh<br></code></pre></td></tr></table></figure></li><li><p>重启定时任务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">service crond restart<br></code></pre></td></tr></table></figure></li><li><p>附：常用定时任务命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">service crond start //启动服务<br>service crond stop //关闭服务<br>service crond restart //重启服务<br>service crond reload //重新载入配置<br>crontab -e // 编辑任务<br>crontab -l // 查看任务列表<br></code></pre></td></tr></table></figure></li><li><p>定时任务表达式：<br>Cron表达式是，分为5或6个域，每个域代表一个含义，如下所示：</p><table><thead><tr><th></th><th>分</th><th>时</th><th>日</th><th>月</th><th>星期几</th><th>年（可选）</th></tr></thead><tbody><tr><td>取值范围</td><td>0-59</td><td>0-23</td><td>1-31</td><td>1-12</td><td>1-7</td><td>2022/2023…</td></tr></tbody></table><p>常用表达式：</p><ul><li>每分钟执行： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">*/1 * * * *<br></code></pre></td></tr></table></figure></li><li>每日凌晨（每天晚上23:59）执行： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">59 23 * * *<br></code></pre></td></tr></table></figure></li><li>每日凌晨1点执行： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">0 1 * * * <br></code></pre></td></tr></table></figure> 参考文献：<br> 每天定时为数据库备份：<a href="https://www.cnblogs.com/leechenxiang/p/7110382.html">https://www.cnblogs.com/leechenxiang/p/7110382.html</a></li></ul></li></ul></li></ol><h2 id="五、虚拟主机-使用nginx为静态资源提供服务"><a href="#五、虚拟主机-使用nginx为静态资源提供服务" class="headerlink" title="五、虚拟主机-使用nginx为静态资源提供服务"></a>五、虚拟主机-使用nginx为静态资源提供服务</h2><ol><li><p>将静态资源放置到服务器上（例如：图片拷贝到 /home/images 文件夹下）</p></li><li><p>配置 nginx location</p><ul><li>root方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br> listen       89;<br> server_name  localhost;<br>      <br> location /images &#123;<br>     root   /home;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>测试：<code>http://ip:89/images/001.jpg</code></li><li>alias别名方式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br> listen       89;<br> server_name  localhost;<br>      <br> location /static &#123;<br>     alias   /home/images;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure>测试：<code>http://ip:89/static/001.jpg</code></li></ul></li></ol><h2 id="六、使用-Gzip-压缩提升请求效率"><a href="#六、使用-Gzip-压缩提升请求效率" class="headerlink" title="六、使用 Gzip 压缩提升请求效率"></a>六、使用 Gzip 压缩提升请求效率</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开启 gzip 压缩功能，目的：提高传输效率，节约带宽</span><br>  gzip  on;<br><span class="hljs-meta">#</span><span class="bash"> 限制最小压缩，小于 1 字节文件不会被压缩</span><br>  gzip_min_length 1;<br><span class="hljs-meta">#</span><span class="bash"> 定义压缩的级别 1-9（压缩比，文件越大，压缩越多，但是 cpu 使用就越多）</span><br>  gzip_comp_level 3;<br><span class="hljs-meta">#</span><span class="bash"> 定义压缩文件的类型</span><br>  gzip_types  text/plain application/javascript application/css text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;<br></code></pre></td></tr></table></figure><h2 id="七、location-路径匹配规则"><a href="#七、location-路径匹配规则" class="headerlink" title="七、location 路径匹配规则"></a>七、location 路径匹配规则</h2><ol><li><p>/ 默认匹配规则</p><p> 访问根路径 / ，nginx 会去 root 对应的 html 文件夹下寻找 index 对应的 index.html 或 index.htm 文件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen       89;<br>    server_name  localhost;<br>    location / &#123;<br>        root   html;<br>        index  index.html index.htm;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>= 精确匹配</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen       91;<br>    server_name  localhost;<br>    location =/ &#123;<br>        root   html;<br>        index  index.html index.htm;<br>    &#125;<br>    location =/images/001.jpg &#123;<br>        root   /home;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>~* 正则匹配，* 表示不区分大小写</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen       91;<br>    server_name  localhost;<br>    location ~* \.(GIF|png|bmp|jpg|jpeg) &#123;<br>        root   /home;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>~ 正则匹配，区分大小写</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen       91;<br>    server_name  localhost;<br>    location ~ \.(GIF|png|bmp|jpg|jpeg) &#123;<br>        root   /home;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>^~ 以某个字符路径开头请求</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen       91;<br>    server_name  localhost;<br>    location ^~ \images &#123;<br>        root   /home;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="八、DNS-域名解析"><a href="#八、DNS-域名解析" class="headerlink" title="八、DNS 域名解析"></a>八、DNS 域名解析</h2><ol><li>linux / mac 中 hosts 文件路径：/etc/hosts</li><li>window 中 hosts 文件路径 C:\Windows\System32\drivers\etc\hosts</li></ol><p>可以借助 SwitchHosts 工具进行域名映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1 www.fengjian.com<br></code></pre></td></tr></table></figure><h2 id="九、nginx-中解决跨域问题"><a href="#九、nginx-中解决跨域问题" class="headerlink" title="九、nginx 中解决跨域问题"></a>九、nginx 中解决跨域问题</h2><p>在 server 中添加配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">允许跨域请求的域，*代表所有</span><br>add_header &#x27;Access-Control-Allow-Origin&#x27; *;<br><span class="hljs-meta">#</span><span class="bash">允许带上cookie请求</span><br>add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;<br><span class="hljs-meta">#</span><span class="bash">允许请求的方法，比如 GET/POST/PUT/DELETE</span><br>add_header &#x27;Access-Control-Allow-Methods&#x27; *;<br><span class="hljs-meta">#</span><span class="bash">允许请求的header</span><br>add_header &#x27;Access-Control-Allow-Headers&#x27; *;<br></code></pre></td></tr></table></figure><h2 id="十、nginx-中配置静态资源防盗链"><a href="#十、nginx-中配置静态资源防盗链" class="headerlink" title="十、nginx 中配置静态资源防盗链"></a>十、nginx 中配置静态资源防盗链</h2><p>html 代码引用我们 nginx 服务器中的一张图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://www.fengjian.com:89/static/001.jpg&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加上防盗链配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">对源站点验证</span><br>valid_referers *.fengjian.com;<br><span class="hljs-meta">#</span><span class="bash">非法引入会进入下方判断</span><br>if ($invalid_referer) &#123;<br>  return 404; # 状态码可自定义，403 500 ...<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器有缓存，强制刷新后（Ctrl+F5）图片禁止访问！</p><h2 id="十一、nginx-模块化设计"><a href="#十一、nginx-模块化设计" class="headerlink" title="十一、nginx 模块化设计"></a>十一、nginx 模块化设计</h2><p><img src="https://s3.uuu.ovh/imgs/2022/12/08/93887f027792a715.png" alt="nginx模块"></p><h2 id="十二、nginx-构建-tomcat-集群"><a href="#十二、nginx-构建-tomcat-集群" class="headerlink" title="十二、nginx 构建 tomcat 集群"></a>十二、nginx 构建 tomcat 集群</h2><p><img src="https://s3.uuu.ovh/imgs/2022/12/08/25121837b1194142.png" alt="nginx-tomcat集群"></p><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li>环境搭建：1 台 nginx 服务器，3 台 tomcat 服务器；</li><li>使用 SwitchHosts 修改本地 hosts 文件映射到 nginx 服务器；<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> nginx 服务器</span><br>192.168.147.129 www.tomcats.com<br></code></pre></td></tr></table></figure></li><li>修改 nginx 配置文件:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置上游服务器</span><br>upstream tomcats &#123;<br>   server 192.168.88.136:8080;<br>   server 192.168.88.137:8080;<br>   server 192.168.88.138:8080;<br>&#125;<br><br>server &#123;<br> listen       80;<br> server_name  www.tomcats.com;<br>    location / &#123;<br>        proxy_pass http://tomcats;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ol><li>轮询（默认策略）：请求依次发送到不同的 tomcat 机器</li><li>加权轮询：根据服务器配置的高低设置不同权重,weight 默认为 1，值越大权重越高<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置上游服务器</span><br>upstream tomcats &#123;<br>   server 192.168.88.136:8080 weight=1;<br>   server 192.168.88.137:8080 weight=2;<br>   server 192.168.88.138:8080 weight=5;<br>&#125;<br><br>server &#123;<br> listen       80;<br> server_name  www.tomcats.com;<br>    location / &#123;<br>        proxy_pass http://tomcats;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="upstream-指令参数"><a href="#upstream-指令参数" class="headerlink" title="upstream 指令参数"></a>upstream 指令参数</h3><table><thead><tr><th>指令</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>max_conns</td><td>0</td><td>限制服务器最大连接数，0 不做任何限制</td></tr><tr><td>slow_start</td><td>0</td><td>慢启动服务器加入集群，默认 0s</td></tr><tr><td>down</td><td>-</td><td>服务器状态，down 代表不可用</td></tr><tr><td>backup</td><td>-</td><td>表明当前服务器是备用机器，不会被访问到，当主机挂了，备用机器启用</td></tr><tr><td>max_fails</td><td>1</td><td>表示失败几次，则标记server已宕机，剔出上游服务</td></tr><tr><td>fail_timeout</td><td>10</td><td>表示失败的重试时间</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">   upstream tomcats &#123;<br>      server 192.168.88.136:8080 weight=6;<br>      server 192.168.88.137:8080 weight=2;<br>      server 192.168.88.138:8080 weight=2;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>slow_start=60s max_fails=2 fail_timeout=15s</code>: 代表在15秒内请求某一server失败达到2次后，则认为该server已经挂了或者宕机了，随后再过15秒，这15秒内不会有新的请求到达刚刚挂掉的节点上，而是会运作的server，15秒后会再有新请求尝试连接挂掉的server，如果还是失败，重复上一过程，直到恢复。</p><h4 id="Keepalived-提高吞吐量"><a href="#Keepalived-提高吞吐量" class="headerlink" title="Keepalived 提高吞吐量"></a>Keepalived 提高吞吐量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">   upstream tomcats &#123;<br>      server 192.168.88.136:8080 weight=6;<br>      server 192.168.88.137:8080 weight=2;<br>      server 192.168.88.138:8080 weight=2;<br>      <br>      keepalive 32;# 长连接处理数量<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="负载均衡之-ip-hash"><a href="#负载均衡之-ip-hash" class="headerlink" title="负载均衡之 ip_hash"></a>负载均衡之 ip_hash</h3><p>算法：hash(ip) % node_counts = index</p><p>ip: 用户ip<br>node_counts: 服务器数量<br>index: 本次分配到的服务器（从 0 开始）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">   upstream tomcats &#123;<br>      ip_hash;<br>      <br>      server 192.168.88.136:8080 weight=6;<br>      server 192.168.88.137:8080 weight=2;<br>      server 192.168.88.138:8080 weight=2;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ip_hash</code>可以保证用户访问可以请求到上游服务中的固定的服务器，前提是用户ip没有发生更改。<br>使用ip_hash的注意点：<br>不能把后台服务器直接移除，只能标记 down .</p><h3 id="一致性-hash-算法"><a href="#一致性-hash-算法" class="headerlink" title="一致性 hash 算法"></a>一致性 hash 算法</h3><p>hash 算法带来的问题：</p><h3 id="负载均衡-url-hash-与-least-conn"><a href="#负载均衡-url-hash-与-least-conn" class="headerlink" title="负载均衡 url hash 与 least_conn"></a>负载均衡 url hash 与 least_conn</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">   upstream tomcats &#123;<br>      hash $request_uri;<br>      # least_conn<br><br>      server 192.168.88.136:8080;<br>      server 192.168.88.137:8080;<br>      server 192.168.88.138:8080;<br>&#125;<br>server &#123;<br>    listen       80;<br>    server_name  www.tomcats.com;<br>       location / &#123;<br>           proxy_pass http://tomcats;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="十三、缓存"><a href="#十三、缓存" class="headerlink" title="十三、缓存"></a>十三、缓存</h2><h3 id="nginx-控制浏览器缓存-expires"><a href="#nginx-控制浏览器缓存-expires" class="headerlink" title="nginx 控制浏览器缓存 expires"></a>nginx 控制浏览器缓存 expires</h3><ol><li>浏览器缓存：<br>加速用户访问，提升单个用户（浏览器访问者）体验，缓存在本地</li><li>Nginx缓存<br>缓存在nginx端，提升所有访问到nginx这一端的用户<br>提升访问上游（upstream）服务器的速度<br>用户访问仍然会产生请求流量</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /files &#123;<br>  alias /home/imooc;<br><span class="hljs-meta">  #</span><span class="bash"> 10s 后过期</span><br><span class="hljs-meta">  #</span><span class="bash"> expires 10s;</span><br><span class="hljs-meta">  #</span><span class="bash"> 22h30m后过期</span><br><span class="hljs-meta">  #</span><span class="bash"> expires @22h30m;</span><br><span class="hljs-meta">  #</span><span class="bash"> 1h 前过期</span><br><span class="hljs-meta">  #</span><span class="bash"> expires -1h;</span><br><span class="hljs-meta">  #</span><span class="bash"> 过期一个纪元</span><br><span class="hljs-meta">  #</span><span class="bash"> expires epoch;</span><br><span class="hljs-meta">  #</span><span class="bash"> 永不过期（默认）</span><br><span class="hljs-meta">  #</span><span class="bash"> expires off;</span><br>expires max;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="nginx-的反向代理缓存"><a href="#nginx-的反向代理缓存" class="headerlink" title="nginx 的反向代理缓存"></a>nginx 的反向代理缓存</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">   upstream tomcats &#123;<br>      server 192.168.88.136:8080;<br>      server 192.168.88.137:8080;<br>      server 192.168.88.138:8080;<br>   &#125;<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> proxy_cache_path 设置缓存的保存目录</span><br><span class="hljs-meta">#</span><span class="bash"> keys_zone 设置共享库存以及占用的空间</span><br><span class="hljs-meta">#</span><span class="bash"> max_size 设置缓存大小</span><br><span class="hljs-meta">#</span><span class="bash"> inactive 超过此时间，则缓存自动清理</span><br><span class="hljs-meta">#</span><span class="bash"> use_temp_path 关闭临时目录</span><br>proxy_cache_path /usr/local/nginx/upstream_cache keys_zone=mycache:5m max_size=1g inactive=30s use_temp_path=off;<br><br>server &#123;<br>    listen       80;<br>    server_name  www.tomcats.com;<br>    # 开启并且使用缓存<br>    proxy_cache mycache;<br>    # 针对 200 和 304 设置缓存过期时间<br>    proxy_cache_valid 200 304 8h;<br>    location / &#123;<br>           proxy_pass http://tomcats;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/redis/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/redis/</url>
    
    <content type="html"><![CDATA[<h2 id="一、安装与配置-redis"><a href="#一、安装与配置-redis" class="headerlink" title="一、安装与配置 redis"></a>一、安装与配置 redis</h2><h3 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h3><p><a href="https://redis.io/download/">下载地址</a></p><h3 id="2-上传到-linux-服务器并解压缩"><a href="#2-上传到-linux-服务器并解压缩" class="headerlink" title="2. 上传到 linux 服务器并解压缩"></a>2. 上传到 linux 服务器并解压缩</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf redis-5.0.5.tar.gz <br></code></pre></td></tr></table></figure><h3 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3. 安装依赖"></a>3. 安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc-c++<br></code></pre></td></tr></table></figure><h3 id="4-编译"><a href="#4-编译" class="headerlink" title="4. 编译"></a>4. 编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>编译成功：Hint: It’s a good idea to run ‘make test’ ;)</p><h3 id="5-安装"><a href="#5-安装" class="headerlink" title="5. 安装"></a>5. 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make install<br></code></pre></td></tr></table></figure><h3 id="6-配置"><a href="#6-配置" class="headerlink" title="6. 配置"></a>6. 配置</h3><ul><li><p>进入 utils 目录，拷贝 redis 启动脚本</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp redis_init_script /etc/init.d/ <br></code></pre></td></tr></table></figure></li><li><p>修改 redis 核心配置文件 <code>redis.conf</code></p><ul><li><p>拷贝配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/local/redis<br><br>cp redis.conf /usr/local/redis/<br>  <br>cd /usr/local/redis<br>  <br>vim redis.conf<br></code></pre></td></tr></table></figure></li><li><p>修改相关配置</p><table><thead><tr><th>参数</th><th>默认值</th><th>描述</th><th>推荐设置</th></tr></thead><tbody><tr><td>daemonize</td><td>no</td><td>是否后台启动</td><td>yes</td></tr><tr><td>dir</td><td>./</td><td>工作目录</td><td>/usr/local/redis/working</td></tr><tr><td>bind</td><td>127.0.0.1</td><td>绑定的ip</td><td>0.0.0.0</td></tr><tr><td>requirepass</td><td>foobared</td><td>访问密码</td><td>自定义即可</td></tr><tr><td>port</td><td>6379</td><td>端口号</td><td>6379</td></tr></tbody></table></li><li><p>修改启动脚本 <code>redis_init_script</code></p><table><thead><tr><th>参数</th><th>默认值</th><th>描述</th><th>推荐设置</th></tr></thead><tbody><tr><td>REDISPORT</td><td>6379</td><td>端口号</td><td>若要修改去 redis.conf中修改即可</td></tr><tr><td>CONF</td><td>CONF=”/etc/redis/${REDISPORT}.conf”</td><td>启动指定的配置文件</td><td>/usr/local/redis/redis.conf</td></tr></tbody></table></li><li><p>赋权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 redis_init_script<br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis_init_script start<br></code></pre></td></tr></table></figure></li><li><p>停止</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./redis_init_script stop<br></code></pre></td></tr></table></figure><p>停止时会提示没有认证！<br>修改脚本文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash">CLIEXEC -a <span class="hljs-string">&quot;密码&quot;</span> -p <span class="hljs-variable">$REDISPORT</span> shutdown</span><br></code></pre></td></tr></table></figure></li><li><p>设置 redis 开机自启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim redis_init_script<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 新增脚本</span> <br><span class="hljs-meta">#</span><span class="bash"> !/bin/bash</span><br><span class="hljs-meta">#</span><span class="bash"> chkconfig: 22345 10 90</span><br><span class="hljs-meta">#</span><span class="bash"> description: Start and Stop redis</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 注册开机自启动</span><br>chkconfig redis_init_script on <br>        <br><span class="hljs-meta">#</span><span class="bash"> 重启测试</span><br>reboot<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="二、redis-持久化机制"><a href="#二、redis-持久化机制" class="headerlink" title="二、redis 持久化机制"></a>二、redis 持久化机制</h2><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1. RDB"></a>1. RDB</h3><blockquote><p>Redis DataBase </p></blockquote><ol><li><p>RDB 概念：每隔一段时间，把内存中的数据写入磁盘的临时文件，作为快照，恢复的时候把快照文件读进内存。如果宕机重启，那么内存里的数据肯定会没有的。</p></li><li><p>备份与恢复： 内存备份 –&gt; 磁盘临时文件 –&gt; 恢复到内存</p></li><li><p>RDB优劣势</p><ul><li>优势<ol><li>每隔一段时间备份，全量备份</li><li>灾备简单，可以远程传输</li><li>子进程备份的时候，主进程不会有任何 io 操作（不会有写入修改或删除），保证备份数据的的完整性</li><li>相对 AOF 来说，当有更大文件的时候可以快速重启恢复</li></ol></li><li>劣势<ol><li>发生故障时，有可能会丢失最后一次的备份数据</li><li>子进程所占用的内存比会和父进程一模一样，如会造成 CPU 负担</li><li>由于定时全量备份是重量级操作，所以对于实时备份，就无法处理了。</li></ol></li></ul></li><li><p>RDB的配置</p><ul><li>保存位置，可以在redis.conf自定义：<br>dbfilename dump.rdb<br>dir /user/local/redis/working</li><li>保存机制：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">save 900 1<br>save 300 10<br>save 60 10000<br>save 10 3<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">* 如果 1 个缓存更新，则 15 分钟后备份<br>* 如果 10 个缓存更新，则 5 分钟后备份<br>* 如果 10000 个缓存更新，则 1 分钟后备份<br>* 演示：更新 3 个缓存，10 秒后备份<br>* 演示：备份 dump.rdb，删除重启<br></code></pre></td></tr></table></figure></li><li>stop-writes-on-bgsave-error<br> yes：如果 save 过程出错，则停止写操作<br> no：可能造成数据不一致</li><li>rdbcompression<br>yes：开启rdb压缩模式<br>no：关闭，会节约 cpu 损耗，但是文件会大，道理同 nginx</li><li>rdbchecksum<br>yes：开启校验，性能损耗 10%<br>no：关闭，节约性能</li></ul></li></ol><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h3><blockquote><p>Append Only File</p></blockquote><ol><li><p>引子：RDB 会丢失最后一次备份的 rdb 文件，但是其实也无所谓，其实也可以忽略不计，毕竟是缓存，丢了就丢了，但是如果追求数据的完整性，那就的考虑使用 AOF 了</p></li><li><p>AOF 特点</p><ul><li>以日志的形式来记录用户请求的写操作。读操作不会记录，因为写操作才会存存储。</li><li>文件以追加的形式而不是修改的形式。</li><li>redis 的 aof 恢复其实就是把追加的文件从开始到结尾读取执行写操作。</li></ul></li><li><p>优势</p><ul><li>AOF 更加耐用，可以以秒级别为单位备份，如果发生问题，也只会丢失最后一秒的数据，大大增加了可靠性和数据完整性。所以 AOF 可每秒同步一次，使用 fsync 操作。</li><li>以 log 日志形式追加，如果磁盘满了，会执行 redis-check-aof 工具</li><li>当数据太大的时候，redis 可以在后台自动重写 aof。当 redis 继续把日志追加到老的文件中去时，重写也是非常安全的，不会影响客户端<br> 作。</li><li>AOF 日志包含的所有写操作，会更加便于 redis 的解析恢复。</li></ul></li><li><p>劣势</p><ul><li>相同的数据，同一份数据，AOF 比 RDB 大</li><li>针对不同的同步机制，AOF 会比 RDB 慢，因为 AOF 每秒都会备份做写操作，这样相对于 RDB 来说就略低。 每秒备份 fsync 没毛病，但是如果每次写入就做一次备份 fsync 的话，那么 redis 的性能就会下降。</li><li>AOF 发生过 bug，就是数据恢复的时候数据不完整，这样显得 AOF 会比较脆弱，容易出现 bug，因为 AOF 没有 RDB 那么简单，防止 bug 的产生，AOF 就不会根据旧的指令去重构，而是根据当时缓存中存在的数据指令去做重构，这样就更加健壮和可靠了。</li></ul></li><li><p>AOF的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> AOF 默认关闭，yes可以开启</span><br>appendonly no<br><span class="hljs-meta">#</span><span class="bash"> AOF 的文件名</span><br>appendfilename &quot;appendonly.aof&quot;<br><span class="hljs-meta">#</span><span class="bash"> no：不同步</span><br><span class="hljs-meta">#</span><span class="bash"> everysec：每秒备份，推荐使用</span><br><span class="hljs-meta">#</span><span class="bash"> always：每次操作都会备份，安全并且数据完整，但是慢性能差</span><br>appendfsync everysec<br><span class="hljs-meta">#</span><span class="bash"> 重写的时候是否要同步，no可以保证数据安全</span><br>no-appendfsync-on-rewrite no<br><span class="hljs-meta">#</span><span class="bash"> 重写机制：避免文件越来越大，自动优化压缩指令，会 fork 一个新的进程去完成重写动作，新进程里的内存数据会被重写，此时</span><br><span class="hljs-meta">#</span><span class="bash"> 当前 AOF 文件的大小是上次 AOF 大小的 100% 并且文件体积达到 64m，满足两者则触发重写</span><br>auto-aof-rewrite-percentage 100<br>auto-aof-rewrite-min-size 64mb<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-到底采用-RDB-还是-AOF-呢？"><a href="#3-到底采用-RDB-还是-AOF-呢？" class="headerlink" title="3.到底采用 RDB 还是 AOF 呢？"></a>3.到底采用 RDB 还是 AOF 呢？</h3><ol><li>如果你能接受一段时间的缓存丢失，那么可以使用 RDB，可能会丢失最后一次备份数据</li><li>如果你对实时性的数据比较 care，那么就用 AOF，最多损失 2 秒的数据（每秒备份）</li><li>先加载 AOF，然后加载 RDB，如果 AOF 损坏，则删除掉后使用 RDB 恢复即可</li></ol><h2 id="三、redis-主从复制"><a href="#三、redis-主从复制" class="headerlink" title="三、redis 主从复制"></a>三、redis 主从复制</h2><h3 id="1-查看-replication-信息"><a href="#1-查看-replication-信息" class="headerlink" title="1. 查看 replication 信息"></a>1. 查看 replication 信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">info replication<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Replication</span><br>role:master<br>connected_slaves:0<br>master_replid:989dec5a359aed864bfd5c14223403c7ccb5db11<br>master_replid2:0000000000000000000000000000000000000000<br>master_repl_offset:0<br>second_repl_offset:-1<br>repl_backlog_active:0<br>repl_backlog_size:1048576<br>repl_backlog_first_byte_offset:0<br>repl_backlog_histlen:0<br></code></pre></td></tr></table></figure><h3 id="2-修改配置，设置为从节点"><a href="#2-修改配置，设置为从节点" class="headerlink" title="2. 修改配置，设置为从节点"></a>2. 修改配置，设置为从节点</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 设置主节点 ip port</span><br>replicaof 192.168.88.135 6379<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置主节点密码</span><br>masterauth 123456<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 设置从节点为只读（默认配置）</span><br>replica-read-only yes<br></code></pre></td></tr></table></figure><p>重启 redis 使之生效!</p><h3 id="3-无磁盘化复制"><a href="#3-无磁盘化复制" class="headerlink" title="3. 无磁盘化复制"></a>3. 无磁盘化复制</h3><blockquote><p>定义：master 创建一个进程写入 rdb 文件到内存而不是磁盘<br>场景：网络好，硬盘读写差的情况</p></blockquote><p>开启配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开启无磁盘主从同步</span><br>repl-diskless-sync yes<br><span class="hljs-meta">#</span><span class="bash"> 同步延迟，默认 5 秒</span><br>repl-diskless-sync-delay 5<br></code></pre></td></tr></table></figure><h2 id="四、哨兵机制-sentinel"><a href="#四、哨兵机制-sentinel" class="headerlink" title="四、哨兵机制 sentinel"></a>四、哨兵机制 sentinel</h2><blockquote><p>作用：针对 redis 主从复制机器宕机处理</p></blockquote><ul><li><p>拷贝配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/install/redis<br>cp sentinel.conf /usr/local/redis/sentinel.conf<br></code></pre></td></tr></table></figure></li><li><p>进行相关配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 关闭保护模式</span><br>  protected-mode no<br><span class="hljs-meta">#</span><span class="bash"> 后台启动</span><br>  daemonize yes<br><span class="hljs-meta">#</span><span class="bash"> 日志存放位置</span><br>  logfile /usr/local/redis/sentinel/redis-sentinel.log<br><span class="hljs-meta">#</span><span class="bash"> 工作目录</span><br>  dir /usr/local/redis/sentinel<br><span class="hljs-meta">#</span><span class="bash"> 监控的 master, 2 为 quorum：至少多少台哨兵发现 master 宕机</span><br>  sentinel monitor master-135 192.168.88.135 6379 2<br><span class="hljs-meta">#</span><span class="bash"> master 密码</span> <br>  sentinel auth-pass master-132 123456<br><span class="hljs-meta">#</span><span class="bash"> 判断 master down 时间（毫秒）， 10 秒，默认 30 秒</span><br>  sentinel down-after-milliseconds master-132 10000<br><span class="hljs-meta">#</span><span class="bash"> 并发同步数量，默认 1，某一个 slave 被选举为 master后，其他 slave 从新的 master 同步数据</span><br>  sentinel parallel-syncs master-132 1<br><span class="hljs-meta">#</span><span class="bash"> 故障转移超时时间（毫秒），默认 3 分钟</span><br>  sentinel failover-timeout master-132 180000<br></code></pre></td></tr></table></figure></li><li><p>拷贝 sentinel.conf 到其他服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp sentinel.conf root@192.168.88.135:/usr/local/redis/<br></code></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-sentinel sentinel.conf<br></code></pre></td></tr></table></figure></li><li><p>SpringBoot 整合哨兵</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>   <span class="hljs-attr">redis:</span><br>     <span class="hljs-comment">#单机单实例</span><br>     <span class="hljs-comment">#database: 1</span><br>     <span class="hljs-comment">#host: 192.168.88.135</span><br>     <span class="hljs-comment">#password: 123456</span><br>     <span class="hljs-comment">#port: 6379</span><br>     <span class="hljs-comment">#哨兵机制</span><br>     <span class="hljs-attr">database:</span> <span class="hljs-number">1</span><br>     <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>     <span class="hljs-attr">sentinel:</span><br>       <span class="hljs-attr">master:</span> <span class="hljs-string">master-132</span><br>       <span class="hljs-attr">nodes:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.135</span><span class="hljs-string">:26379,192.168.88.136:26379,192.168.88.137:26379</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="五、redis-缓存过期机制-amp-内存淘汰机制"><a href="#五、redis-缓存过期机制-amp-内存淘汰机制" class="headerlink" title="五、redis 缓存过期机制 &amp; 内存淘汰机制"></a>五、redis 缓存过期机制 &amp; 内存淘汰机制</h2><h3 id="缓存过期机制：设置过-expire-的-key-过期后"><a href="#缓存过期机制：设置过-expire-的-key-过期后" class="headerlink" title="缓存过期机制：设置过 expire 的 key 过期后"></a>缓存过期机制：设置过 expire 的 key 过期后</h3><ol><li><p>（主动）定期删除：定期定时检查</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 每秒钟检查 10 次，1-500范围，过大对于 cpu 消耗大</span><br>  hz 10 <br></code></pre></td></tr></table></figure></li><li><p>（被动）惰性删除：访问到的 key，若过期则会被删除</p></li></ol><h3 id="内存淘汰管理"><a href="#内存淘汰管理" class="headerlink" title="内存淘汰管理"></a>内存淘汰管理</h3><ol><li>最大内存配置，超出则使用淘汰策略 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">maxmemory &lt;bytes&gt;<br></code></pre></td></tr></table></figure></li><li>策略<br>v 开头的都是针对设置过 expire 的 key。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> volatile-lru -&gt; Evict using approximated LRU among the keys with an expire <span class="hljs-built_in">set</span>.（最近最少使用到的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> allkeys-lru -&gt; Evict any key using approximated LRU.（最近最少使用到的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire <span class="hljs-built_in">set</span>.（最少使用到的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> allkeys-lfu -&gt; Evict any key using approximated LFU.（最少使用到的 key 被淘汰，推荐）</span><br><span class="hljs-meta">#</span><span class="bash"> volatile-random -&gt; Remove a random key among the ones with an expire <span class="hljs-built_in">set</span>.（随机的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> allkeys-random -&gt; Remove a random key, any key.（随机的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)（最接近过期时间的 key 被淘汰）</span><br><span class="hljs-meta">#</span><span class="bash"> noeviction -&gt; Don<span class="hljs-string">&#x27;t evict anything, just return an error on write operations.（不淘汰，返回错误，不推荐）</span></span><br></code></pre></td></tr></table></figure></li></ol><h2 id="六、redis-集群"><a href="#六、redis-集群" class="headerlink" title="六、redis 集群"></a>六、redis 集群</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><ul><li>主从复制以及哨兵，他们可以提高读的并发，但是单个 master 容量有限，数据达到一定程度会有瓶颈，这个时候可以通过水平扩展为多 master 集群。  </li><li>redis-cluster：他可以支撑多个 master-slave，支持海量数据，实现高可用与高并发。  </li><li>哨兵模式其实也是一种集群，他能够提高读请求的并发，但是容错方面可能会有一些问题，比如 master 同步数据给 slave 的时候，这其实是异步复制吧，这个时候 master 宕机了，那么 slave上 的数据就没有 master 新，数据同步需要时间的，1-2 秒的数据会丢失。master 恢复并转换成 slave 后，新数据则丢失。</li></ul><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul><li>每个节点知道彼此之间的关系，也会知道自己的角色，当然他们也会知道自己存在与一个集群环境中，他们彼此之间可以交互和通信。那么这些关系都会保存到某个配置文件中，每个节点都有，这个我们在搭建的时候会做配置的。 </li><li>客户端要和集群建立连接的话，只需要和其中一个建立关系就行。 </li><li>某个节点挂了，也是通过超过半数的节点来进行的检测，客观下线后主从切换，和我们之前在哨兵模式中提到的是一个道理。 </li><li>Redis 中存在很多的插槽，又可以称之为槽节点，用于存储数据，这个先不管，后面再说。</li></ul><h3 id="3-集群容错"><a href="#3-集群容错" class="headerlink" title="3. 集群容错"></a>3. 集群容错</h3><ul><li>构建 Redis 集群，需要至少 3 个节点作为 master，以此组成一个高可用的集群，此外每个 master 都需要配备一个 slave，所以整个集群需要 6 个节点，这也是最经典的 redis 集群，也可以称之为三主三从，容错性更佳。所以在搭建的时候需要有 6 台虚拟机。请各自准备 6 台虚拟机，可以通过克隆去构建，使用单实例的Redis 去克隆即可  </li><li>集群也可以在单服务器构建，称之为伪集群，但是生产环境肯定是真的，所以建议用 6 台。</li><li>克隆后务必关闭Redis。</li></ul><h3 id="4-构建-Redis-集群"><a href="#4-构建-Redis-集群" class="headerlink" title="4. 构建 Redis 集群"></a>4. 构建 Redis 集群</h3><ul><li><p>redis.conf 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 开启集群模式</span><br>cluster-enabled yes<br><span class="hljs-meta">#</span><span class="bash"> 每一个节点需要有一个配置文件，需要 6 份。每个节点处于集群的角色都需要告知其他所有节点，彼此知道，这个文件用于存储集</span><br>cluster-config-file nodes-201.conf<br><span class="hljs-meta">#</span><span class="bash"> 超时时间，超时则认为 master 宕机，随后主备切换</span><br>cluster-node-timeout 5000<br><span class="hljs-meta">#</span><span class="bash"> 开启 AOF</span><br>appendonly yes<br></code></pre></td></tr></table></figure></li><li><p>启动 6 个 redis 实例</p><ul><li>启动 6 台 </li><li>如果启动过程出错，把 rdb、aof 等文件删除清空</li></ul></li><li><p>创建集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####</span></span><br><span class="hljs-meta">#</span><span class="bash"> 注意1：如果你使用的是 redis3.x 版本，需要使用 redis-trib.rb 来构建集群，最新版使用 C 语言来构建了，这个要注意</span><br><span class="hljs-meta">#</span><span class="bash"> 注意2：以下为新版的 redis 构建方式</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">####</span></span><br><span class="hljs-meta">#</span><span class="bash"> 创建集群，主节点和从节点比例为1，1-3 为主，4-6 为从，1 和 4，2 和 5，3 和 6 分别对应为主从关系，这也是最经典用的最多的集群模式</span><br>redis-cli --cluster create ip1:port1 ip2:port2 ip3:port3 ip4:port4 ip5:port5 ip6:port6 --cluster-replicas 1<br></code></pre></td></tr></table></figure><p>slots：槽，用于装数据，主节点有，从节点没有</p></li><li><p>检查集群信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli --cluster check 192.168.25.64:6380<br></code></pre></td></tr></table></figure></li><li><p>SpringBoot 集成 redis 集群</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br> <span class="hljs-attr">redis:</span><br>   <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>   <span class="hljs-attr">cluster:</span> <br>     <span class="hljs-attr">nodes:</span> <span class="hljs-string">ip1:port1</span> <span class="hljs-string">ip2:port2</span> <span class="hljs-string">ip3:port3</span> <span class="hljs-string">ip4:port4</span> <span class="hljs-string">ip5:port5</span> <span class="hljs-string">ip6:port6</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="七、缓存穿透与雪崩"><a href="#七、缓存穿透与雪崩" class="headerlink" title="七、缓存穿透与雪崩"></a>七、缓存穿透与雪崩</h2><h3 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h3><ul><li><p>定义：查询的 key 在 redis 中不存在，在数据库中也不存在，此时被非法用户攻击，大量请求被打到数据库上，造成宕机，从而影响整个系统，这种现象称之为缓存穿透</p></li><li><p>解决方案一：将空值也放入缓存，比如空字符串、空数组、空对象或空 list</p></li><li><p>解决方案二：布隆过滤器，可以快速的判断一个元素是否在一个集合中</p></li></ul><h3 id="2-雪崩"><a href="#2-雪崩" class="headerlink" title="2. 雪崩"></a>2. 雪崩</h3><ul><li><p>定义：大量的 key 同一时间过期，大量请求直接打到数据库，造成宕机</p></li><li><p>预防：</p><ul><li>永不过期</li><li>过期时间错开</li><li>多缓存结合：redis + memcache …</li><li>采购第三方 redis：阿里云、腾讯云…</li></ul></li></ul><h2 id="八、批量查询优化"><a href="#八、批量查询优化" class="headerlink" title="八、批量查询优化"></a>八、批量查询优化</h2><p>常规做法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/getALot&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> JSONResult <span class="hljs-title">getALot</span><span class="hljs-params">(String... keys)</span> </span>&#123;<br><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>        String value = <span class="hljs-keyword">this</span>.get(key);<br>        list.add(value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> JSONResult.ok(list);<br>&#125;<br>    <br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (String)redisTemplate.opsForValue().get(key);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-multiGet"><a href="#1-multiGet" class="headerlink" title="1. multiGet"></a>1. multiGet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">mget</span><span class="hljs-params">(List&lt;String&gt; keys)</span> </span>&#123;<br><span class="hljs-keyword">return</span> redisTemplate.opsForValue().multiGet(keys);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-pipeline"><a href="#2-pipeline" class="headerlink" title="2. pipeline"></a>2. pipeline</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">batchGet</span><span class="hljs-params">(List&lt;String&gt; keys)</span> </span>&#123;<br><br>    List&lt;Object&gt; result = redisTemplate.executePipelined(<span class="hljs-keyword">new</span> RedisCallback&lt;String&gt;() &#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">doInRedis</span><span class="hljs-params">(RedisConnection redisConnection)</span> <span class="hljs-keyword">throws</span> DataAccessException </span>&#123;<br><br>            StringRedisConnection stringRedisConnection = (StringRedisConnection) redisConnection;<br>            <span class="hljs-keyword">for</span> (String key : keys) &#123;<br>                stringRedisConnection.get(key);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">return</span> result;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>redis</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven 使用手册</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/maven%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/maven%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<blockquote><p>阅读提示：本文内容假设你已经在实际项目中应用 Maven 进行项目开发，只为做进一步的理解与回顾。</p></blockquote><h2 id="1-什么是-Maven"><a href="#1-什么是-Maven" class="headerlink" title="1. 什么是 Maven"></a>1. 什么是 Maven</h2><p>Maven 是一个基于 Java 的项目管理工具，它可以帮助我们管理项目的依赖、构建、打包、发布等操作。与传统方式相比，使用 Maven 能够更加方便快捷地管理项目，尤其是当项目规模变得越来越大时，Maven的优势就更加明显了。</p><h2 id="2-安装与配置"><a href="#2-安装与配置" class="headerlink" title="2. 安装与配置"></a>2. 安装与配置</h2><h3 id="2-1-在-windows-上安装-maven"><a href="#2-1-在-windows-上安装-maven" class="headerlink" title="2.1 在 windows 上安装 maven"></a>2.1 在 windows 上安装 maven</h3><ol><li>安装 jdk</li><li>下载 maven <a href="https://maven.apache.org/download.cgi">传送门</a></li><li>解压</li><li>配置环境变量</li></ol><ul><li>MAVEN_HOME:  maven 的安装目录 <code>D:\apache-maven-3.2.5</code></li><li>Path: <code>%MAVEN_HOME%\bin</code></li><li>检测是否安装成功 <code>mvn --version</code></li></ul><h2 id="3-坐标和依赖"><a href="#3-坐标和依赖" class="headerlink" title="3. 坐标和依赖"></a>3. 坐标和依赖</h2><h3 id="3-1-maven-坐标"><a href="#3-1-maven-坐标" class="headerlink" title="3.1 maven 坐标"></a>3.1 maven 坐标</h3><p>Maven 定义了这样一组规则:世界上任何一个依赖都可以使用 Maven 坐标唯一标识，Maven 坐标的元素包括 groupId、artifactId、version、packaging、classifier。现在，只要我们提供正确的坐标元素，Maven 就能在仓库中找到对应的依赖。</p><p><strong>groupId</strong>： </p><p>组 ID，定义当前 maven 项目隶属的实际项目。通常一个实际的项目和 Maven 项目不一定是一对一的关系，比如 springframework 项目就包含了诸多模块：spring-context、spring-core 等，那 spring-context、spring-core 就是 Maven 项目，而它们都被划分为一个项目组 springframework。</p><p>另外为了保持组织 ID 具有唯一性，常用网站域名反写，如 org.springframework，那 spring-context、spring-core 的 groupId 就是 org.springframework</p><p><strong>artifactId</strong>：定义实际项目中的一个 Maven 项目（模块)，如 spring-core、spring-context</p><p><strong>version</strong>：版本号，默认为 1.0-SNAPSHOT</p><p><strong>packaging</strong>：打包方式，默认 jar，还可以是 war、pom</p><p><strong>classifier</strong>: 该元素用来帮助定义构建输出的一些附属依赖，实际应用中很少涉及，不深入</p><p>上述 5 个元素中，groupld、artifactId，version 是必须定义的，packaging 是可选的(默认为jar)，而classifier是不能直接定义的。</p><h3 id="3-2-依赖配置"><a href="#3-2-依赖配置" class="headerlink" title="3.2 依赖配置"></a>3.2 依赖配置</h3><p>在 pom.xml 中声明项目需要引入的依赖：</p><ul><li>基本使用：包含基本坐标 groupId、artifactId，version 即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>更详细的使用：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>type</strong>： 对应引入依赖的 packging，无需声明，默认为 jar</p><p><strong>scope</strong>：依赖作用范围，有 compile、test、provided、runtime、system、import，等下细说</p><p><strong>optional</strong>：标记依赖是否可选</p><p><strong>exclusions</strong>：用来排除传递性依赖</p><h3 id="3-3-依赖范围"><a href="#3-3-依赖范围" class="headerlink" title="3.3 依赖范围"></a>3.3 依赖范围</h3><ul><li><p>Java 项目的 classpath 是指 Java 虚拟机（JVM）在加载类文件时所需要依赖的 class 文件路径的集合。可以将其理解为 Java 虚拟机查找 class 文件的路径列表。当 JVM 在加载 Java 程序时，它会先查找 classpath 中包含的路径，如果能够找到对应的 class 文件，就会将其加载进来，否则就会抛出 ClassNotFoundException 异常</p></li><li><p>在 Java 项目中，classpath 通常被设置为当前项目编译后生成的 class 文件所在的路径</p></li><li><p>首先需要知道,Maven 在编译项目主代码（src/main/java）的时候需要使用一套 classspath。其次,Maven 在编译和执行测试（src/main/test）的时候会使用另外一套 classpath。最后,实际运行Maven 项目的时候,又会使用一套 classpath,依赖范围就是用来控制依赖与这三种 classpath(编译 classpath、测试 classpath、运行 classpath)的关系</p></li><li><p>compile：编译依赖范围。默认依赖范围。使用此依赖范围的 Maven 依赖,对于编译、测试、运行三种 classpath 都有效，典型的例子是 spring-core,在编译、测试和运行的时候都需要使用该依赖</p></li><li><p>test：测试依赖范围。使用此依赖范围的Maven依赖,只对于测试 classpath 有效,在编译主代码或者运行项目的使用时将无法使用此类依赖。典型的例子,是 JUnit,它只有在编译测试代码及运行测试的时候才需要</p></li><li><p>provided：已提供依赖范围。使用此依赖范围的 Maven 依赖,对于编译和测试 classpath 有效,但在运行时无效。典型的例子是 servlet-api,编译和测试项目的时候需要该依赖,但在运行项目的时候,由于容器已经提供,就不需要 Maven 重复地引入一遍</p></li><li><p>runtime：运行时依赖范围。使用此依赖范围的 Maven 依赖,对于测试和运行 classpath 有效,但在编译主代码时无效。典型的例子是 JDBC 驱动实现项目主代码的编译只需要 JDK 提供的 JDBC 接口,只有在执行测试或者运行项目的时候才需要实现上述接口的具体 JDBC 驱动</p></li><li><p>system：系统依赖范围。使用不多</p></li><li><p>import：导人依赖范围。该依赖范围不会对三种 classpath 产生实际的影响，在项目继承中扮演角色，在讲解 maven 项目之间的继承时可以关注一下</p></li></ul><p>用一张表格来归纳一下依赖的作用域：</p><table><thead><tr><th align="center">依赖范围（scope）</th><th align="center">编译期有效</th><th align="center">测试期有效</th><th align="center">运行期有效</th><th align="center">范例</th></tr></thead><tbody><tr><td align="center">compile</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">spring-core</td></tr><tr><td align="center">test</td><td align="center">-</td><td align="center">Y</td><td align="center">-</td><td align="center">junit</td></tr><tr><td align="center">provided</td><td align="center">Y</td><td align="center">Y</td><td align="center">-</td><td align="center">servlet-api</td></tr><tr><td align="center">runtime</td><td align="center">-</td><td align="center">Y</td><td align="center">Y</td><td align="center">jdbc 驱动实现</td></tr><tr><td align="center">system</td><td align="center">Y</td><td align="center">Y</td><td align="center">-</td><td align="center">本地的，maven 仓库之外的类库文件</td></tr></tbody></table><h3 id="3-3-依赖的传递性"><a href="#3-3-依赖的传递性" class="headerlink" title="3.3 依赖的传递性"></a>3.3 依赖的传递性</h3><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/dda9ba1603bbf614.png"></p><p>依赖传递性同样遵循依赖范围的影响：</p><table><thead><tr><th align="center">-</th><th align="center">compile</th><th align="center">test</th><th align="center">provided</th><th align="center">runtime</th></tr></thead><tbody><tr><td align="center">compile</td><td align="center">compile</td><td align="center">-</td><td align="center">-</td><td align="center">runtime</td></tr><tr><td align="center">test</td><td align="center">test</td><td align="center">-</td><td align="center">-</td><td align="center">test</td></tr><tr><td align="center">provided</td><td align="center">provided</td><td align="center">-</td><td align="center">provided</td><td align="center">provided</td></tr><tr><td align="center">runtime</td><td align="center">runtime</td><td align="center">-</td><td align="center">-</td><td align="center">runtime</td></tr></tbody></table><p><strong>规律</strong>：</p><p>当第二直接依赖的范围是 compile 的时候,传递性依赖的范围与第一直接依赖的范围一致;当第二直接依赖的范围是 test 的时候,依赖不会得以传递;当第二直接依赖的范围是 provided 的时候,只传递第一直接依赖范围也为 provided 的依赖,且传递性依赖的范围同样为 provided;当第二直接依赖的范围是 runtime 的时候,传递性依赖的范围与第一直接依赖的范围一致,但 compile 例外,此时传递性依赖的范围为runtime。</p><p><strong>举个栗子</strong>：</p><p>第一列是第一直接依赖的作用域（scope），第一行是第二直接依赖的作用域，举个栗子：</p><p>现在有 A 直接依赖B（作用域test）：第一列取 test（3 行），B 直接依赖 C（作用域 compile）：第一行取 compile（2 列），得出 A 间接依赖 C（作用域 test）</p><h3 id="3-4-传递依赖：依赖调解"><a href="#3-4-传递依赖：依赖调解" class="headerlink" title="3.4 传递依赖：依赖调解"></a>3.4 传递依赖：依赖调解</h3><p>依赖调解（Dependency Resolution）是指在 Maven 构建项目时，当多个依赖项存在冲突时，根据一定的规则解决冲突问题的过程。Maven 使用依赖调解机制来自动管理项目依赖，保证依赖项之间的协同工作。它会分析项目中的所有依赖项，并且通过比较各个依赖项之间的版本信息，确定应该使用哪一个版本作为最终的决策。</p><p>Maven 在进行依赖调解时，首先会检查项目中所有依赖项的直接依赖关系，然后逐级向上查找依赖项的依赖关系，直到找到最顶层的依赖项。如果在这个过程中发现了冲突，那么 Maven会 根据一定的决策原则选择其中一个版本作为最终的决策。具体来说，Maven 采用如下的决策原则：</p><ol><li>第一原则：路径最近者优先。举栗子：路径 1： A -&gt; B -&gt; C -&gt; X(2.0)，路径2：A -&gt; D -&gt; X(1.0),根据最短路径优先，X(1.0)会被项目采用</li><li>第二原则：第一声明者优先。举栗子：路径 1： A -&gt; B -&gt; C -&gt; X(1.0)，路径 2：A -&gt; D -&gt; E -&gt; X(2.0)，路径相同，则第一声明的 X(1.0) 会被采用</li></ol><p>通过依赖调解机制，Maven 能够自动解决依赖项之间的冲突问题，提高了项目构建的效率，同时也降低了开发人员的工作难度。</p><h3 id="3-5-可选依赖：optional"><a href="#3-5-可选依赖：optional" class="headerlink" title="3.5 可选依赖：optional"></a>3.5 可选依赖：optional</h3><p>假设有这样一个依赖关系,项目 A 依赖于项目 B,项目 B 依赖于项目 X 和 Y,B 对于 X 和 Y 的依赖都是可选依赖：A-&gt;B、B-&gt;X(可选)、B-&gt;Y(可选)。根据传递性依赖的定义，如果所有这三个依赖的范围都是compile,那么X、Y就是是 A 的 compile 范围传递性依赖。然而,由于这里 X、Y 是可选依赖,依赖将不会得以传递。换句话说,X、Y 将不会对 A 有任何影响,如图所示。</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/04/2ccb17cfa95cfa7a.png"></p><h3 id="3-6-传递依赖：依赖排除"><a href="#3-6-传递依赖：依赖排除" class="headerlink" title="3.6 传递依赖：依赖排除"></a>3.6 传递依赖：依赖排除</h3><p>传递性依赖会给项目隐式地引人很多依赖,这极大地简化了项目依赖的管理,但是有些时候这种特性也会带来问题。例如,当前项目有一个第三方依赖,而这个第三方依赖由于某些原因依赖了另外一个类库的 SNAPSHOT版本,那么这个 SNAPSHOT 就会成为当前项目的传递性依赖,而 SNAPSHOT 的不稳定性会直接影响到当前的项目。这时就需要排除掉该 SNAPSHOT,并且在当前项目中声明该类库的某个正式发布的版本。还有一些情况,你可能也想要替换某个传递性依赖。</p><p>使用 exclusions 标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>D<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-7-归类依赖：统一版本管理"><a href="#3-7-归类依赖：统一版本管理" class="headerlink" title="3.7 归类依赖：统一版本管理"></a>3.7 归类依赖：统一版本管理</h3><p>当引入了同一个项目的不同模块时，可以将 version 通过 properties 标签进行统一管理，方便后续的升级与代码简洁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring.version</span>&gt;</span>5.2.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-8-一个好用的-maven-插件"><a href="#3-8-一个好用的-maven-插件" class="headerlink" title="3.8 一个好用的 maven 插件"></a>3.8 一个好用的 maven 插件</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/834d26b1a2d0e76f.png"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/acdb79d9186a545c.png"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/0bc04f7a069764fb.png"></p><h2 id="4-Maven-仓库"><a href="#4-Maven-仓库" class="headerlink" title="4. Maven 仓库"></a>4. Maven 仓库</h2><p>得益于坐标机制,任何Maven项目使用任何一个构件的方式都是完全相同的。在此基础上,Maven可以在某个位置统一存储所有Maven项目去享的构件,这个统一的位置就是仓库。</p><h3 id="4-1-依赖的布局"><a href="#4-1-依赖的布局" class="headerlink" title="4.1 依赖的布局"></a>4.1 依赖的布局</h3><p>在 <code>pom.xml</code> 文件中的 <code>&lt;repository&gt;</code> 标签中，<code>layout</code> 元素用于指定 Maven 仓库的布局类型。Maven 仓库支持两种布局类型：默认布局和 Legacy 布局。</p><ul><li><p>默认布局：Maven 2.0.9 及之后版本默认使用的布局类型，使用基于路径的布局方式。</p><p>一个 maven 项目在仓库中的路径与坐标的大致对应关系为 groupld/artifactId/version/artifactld-version.packaging，另外 classifier 和 extension若存在，则在后面拼接上 -classifier.extension。</p></li><li><p>Legacy 布局：Maven 2.0.8 及之前版本使用的布局类型，使用基于文件名的布局方式。</p></li></ul><p>在 Maven 3.0 及之后的版本中，默认布局成为了唯一支持的布局类型，Legacy 布局已经被废弃。</p><p>如果你的 Maven 仓库使用的是 Legacy 布局，你需要在 <code>&lt;repository&gt;</code> 标签中设置 <code>layout</code> 属性，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>my-repo<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://my-repo.com/maven<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>legacy<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span> <span class="hljs-comment">&lt;!-- 设置仓库布局类型为 Legacy --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-2-仓库分类"><a href="#4-2-仓库分类" class="headerlink" title="4.2 仓库分类"></a>4.2 仓库分类</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/27/0e298b19a77242ce.png"></p><ol><li><p>本地仓库</p><p>一般来说,在 Maven 项目目录下,没有诸如 lib/ 这样用来存放你衣赖文件的目录。当 Maven 在执行编译或测试时,如果需要使用依赖文件,它总是基于坐标使用本地仓库的依赖文件</p><ul><li>本地仓库：就是 maven 在本地存储的位置</li><li>maven 的本地仓库，在安装 maven 后并不会创建，它是在第一次执行 maven 命令的时候才被创建</li><li>maven 本地仓库的默认位置：无论是 windows 还是 linux，在用户的目录下都有一个 .m2/repository/ 的仓库目录，这就是 maven 仓库的默认位置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>C:\Users\fengjian\.m2\repository<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>有时候,因为某些原因(例如 C 盘空间不够),用户会想要自定义本地仓库目录地址。这时,可以编辑文件 ~/.m2/settings.xml,设置 localRepository 元素的值为想要的仓库地址。例如:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span> &gt;</span>D:\java\repository\&lt;/localRepository<br>&lt;/settings &gt;<br></code></pre></td></tr></table></figure><ul><li>需要注意的是,默认情况下, .m2/settings.xml 文件是不存在的,用户需要从 Maven 安装目录复制 %M2_HOME%/conf/settings.xml 文件再进行编辑。推荐大家不要直接修改全局目录的settings.xml 文件,推荐使用用户范围的 settings.xml,主要是为了避免无意识地影响到系统中的其他用户，还有就是升级时就不需要重新修改 settings.xml 文件</li><li><strong>mvn clean install</strong>：一个项目（构建、依赖）只有在本地仓库中后，才能由其他 Maven 项目使用，install 命令就是将一个项目安装到本地仓库，比如：本地有两个项目 A 和 B，两者都无法从远程仓库获取，同时 A 依赖 B，那么为了 A 可以有效的构建，B 必须安装到本地仓库中</li></ul></li><li><p>远程仓库</p><p>安装好 Maven 后,如果不执行任何 Maven 命令,本地仓库目录是不存在的。当用户输人第一条 Maven 命令之后,Maven 才会创建本地仓库,然后相据配置和需要,从远程仓库下载构件至本地仓库。</p><p>本地仓库就好比书房,我需要读书的时候先从书房找,相应应地,Maven需要构件的时候先从本地仓库找。远程仓库就好比书店(包括实体书店、网上书店等),当我无法从自己的书房找到需要的书的时候,就会从书店购买后放到书房里。当Maven无法从本地仓库找到需要的构件的时候,就会从远程仓库下载构件至本地仓库。一般地,对于每个人来说,书房只有一个,但外面的书店有很多,类似地,对于Maven来说,每个用户只有一个本地仓库,但可以配置访问很多远程仓库。</p><ul><li><p>中央仓库（maven 官方提供的仓库）</p><p>由于最原始的本地仓库是空的,中央仓库就是这样一个默认的远程仓库,Maven的安装文件自带了中央仓库的配置。解压 %M2_HOME%/lib/maven-mod-el-builder-3.0.jarorg文件 /apache/maven/model/pom-4.0.0. xml,可以看到如下的配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Maven Repository Switchboard&lt;/name &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repol.maven.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span> &gt;</span> false &lt;/enabled &gt;<br>    &lt;/snapshots &gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>maven 在安装的时候，自带的就是中央仓库的配置，可以通过修改 settings.xml 文件来修改默认的中央仓库地址</p></li></ul></li></ol><ul><li><p>中央仓库包含了绝大多数流行的开源 java 构件，以及源码、作者信息、SCM 信息、许可证信息等。一般来说，简单的 java 项目依赖的构件都可以在这里下载到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositores</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Central Repository<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://repo.maven.apache.org/maven2<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositores</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><ul><li><p>私有仓库（一种特殊的远程仓库），个人或公司搭建</p><p>私服是一种特殊的远程仓库,它是架设在局域网内的仓库服务,私服代理广域网上的远程仓库,供局域网内的Maven用户使用。当Maven需要下载构件的时候,它从私服请求,如果私服上不存在该构件,则从外部的远程仓库下载,缓存在私服上之后,再为Maven的下载请求提供服务。此外,一些无法从外部仓库下载到白的构件也能从本地上传到私服上供大家使用</p></li><li><p>其它公共仓库，如阿里云</p></li></ul><h3 id="4-3-远程仓库的配置"><a href="#4-3-远程仓库的配置" class="headerlink" title="4.3 远程仓库的配置"></a>4.3 远程仓库的配置</h3><ol><li>在很多情况下,默认的中央仓库无法满足项目的需求,可能项目需要的构件存在于另外一个远程仓库中,如阿里云仓库。这时,可以在 POM 中配置该仓库：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>daily<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>ignore<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">updatePolicy</span>&gt;</span>daily<span class="hljs-tag">&lt;/<span class="hljs-name">updatePolicy</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">checksumPolicy</span>&gt;</span>ignore<span class="hljs-tag">&lt;/<span class="hljs-name">checksumPolicy</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>在 repositories 元素下,可以使用 repository 子元素声明一个或者多个远程仓库。该例中声明了一个id为 aliyun。任何一个仓库声明的id必须是唯一的,尤其需要注意的是,Maven 自带的中央仓库使用的id为central,如果其他的仓库声明也使用该 id,就会覆盖中央仓库的配置。该配置中的ur值指向了仓库的地址,一般来说,该地址都基于http协议,Maven用户都可以在浏览器中打开仓库地址浏览构件。</p></li><li><p>如果在 <code>pom.xml</code> 文件中的 <code>&lt;repositories&gt;</code> 标签中没有设置 <code>&lt;snapshots&gt;</code> 标签，那么 Maven 会使用默认值来处理快照依赖的查找和下载</p><p>默认情况下，Maven 会从远程仓库中查找和下载快照依赖的最新版本。如果远程仓库中没有最新的快照版本，Maven 会从本地仓库中查找，并下载最新的快照版本到本地仓库中。在实际开发中，建议将快照依赖的使用限制在开发和测试阶段，避免在生产环境中使用快照依赖。</p></li><li><p>如果在 <code>&lt;repository&gt;</code> 标签中没有设置 <code>name</code> 属性，那么 Maven 会将仓库的名称默认设置为 <code>&lt;id&gt;</code> 标签的值，即仓库的 <code>id</code> 属性值。</p><p>需要注意的是，虽然 Maven 会将仓库的名称默认设置为 <code>&lt;id&gt;</code> 标签的值，但是在 <code>&lt;repository&gt;</code> 标签中，<code>name</code> 属性的作用是更加明确和具体的，可以为仓库指定一个更加具有描述性的名称，便于其他开发者理解和识别。因此，建议在 <code>&lt;repository&gt;</code> 标签中显式地设置 <code>name</code> 属性。</p></li><li><p><code>&lt;releases&gt;</code> 属性用于指定仓库是否支持发布版本，如果不设置该属性，Maven 会将其默认设置为 <code>true</code>。</p></li></ul><ol start="2"><li>对于 <code>&lt;releases&gt;</code> 和 <code>&lt;snapshots&gt;</code> 来说,除了 enabled,它们还包含另外两个子元素 updatePolicy 和 checksumPolicy:</li></ol><p><code>&lt;updatePolicy&gt;</code>：用来配置Maven从远程仓库检查更新的频率,默认的值是daily,表示 Maven 每天检查一次。其他可用的值包括 never 从不检查更新，always 每次构建都检查更新，interval:X 每隔X分钟检查一次更新(X为任意整数))</p><p><code>&lt;checksumPolicy&gt;</code>：用来配置 Maven 检查检验和文件的策略。当构件被部署到 Maven 仓库中时,会同时部署对应的校验和文件。在下载构件的时候,Maven会验证校验和文件,如果校验和验证失败,怎么办?当 checksumPolicy 的值为默认的 warn 时,Maven会在执行构建时输出警告信息,其他可用的值包括:fail Maven遇到校验和错误就让构建失败,ignore 使Maven完全忽略校验和错误。</p><h3 id="4-4-远程仓库的认证配置"><a href="#4-4-远程仓库的认证配置" class="headerlink" title="4.4 远程仓库的认证配置"></a>4.4 远程仓库的认证配置</h3><ol><li><p>大部分远程仓库无须认证就可以访问,但有时候出于安全方面的考虑,我们需要提供认证信息才能访问一些远程仓库。例如,组织内部有一个 Maven 仓库服务器,该服务器为每个项目都提供独立的 Maven 仓库,为了防止非法的仓库访问,管理员为每个仓库提供了一组用户名及密码。这时,为了能让 Maven 能访问仓库,就需要配置认证证信息</p></li><li><p>配置认证信息和配置仓库信息不同,仓库信息可以直接配置在 POM 文件中,但是认证信息必须配置在 settings.xml 文件中。这是因为 POM 往往是被提交到代码仓库中供所有成员访问的,而 settings.xml 一般只放在本机。因此,在 settings.xml 中配置认证信息更为安全。假设需要为一个 id 为 fengjian-maven-central 的仓库配置认证信息,编辑 settings.xml:</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>jack<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-5-部署项目到远程仓库"><a href="#4-5-部署项目到远程仓库" class="headerlink" title="4.5 部署项目到远程仓库"></a>4.5 部署项目到远程仓库</h3><ol><li><p>这里的远程仓库是指自己搭建的私有仓库，搭建仓库可以去看另一篇博文<code>使用 Nexus 搭建 Maven 私有仓库</code></p></li><li><p><code>pom.xml</code>中配置部署信息：分为 release 和 snapshot</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-release/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>settings.xml</code>中配置认证信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-releases<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>jack<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>rose<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>654321<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>配置正确后,在命令行运行<code>mvn clean deploy</code>,Maven 就会将马目构建输出的构件部署到配置对应的远程仓库,如果项目当前的版本是快照版本,则部署到快照版本仓库地址,否则就部署到发布版本仓库地址。</p></li></ol><h3 id="4-6-镜像-mirror"><a href="#4-6-镜像-mirror" class="headerlink" title="4.6 镜像 mirror"></a>4.6 镜像 mirror</h3><ol><li>如果仓库 A 可以提供仓库 B 存储的所有内容,那么就可以认为 A 是 B 的一个镜像。换句话说,任何一个可以从仓库 B 获得的构件,都能够从它的镜像中获取。举个例子,<a href="https://maven.aliyun.com/repository/public/">https://maven.aliyun.com/repository/public/</a> 是中央仓库 <a href="https://repo.maven.apache.org/maven2">https://repo.maven.apache.org/maven2</a> 在中国的镜像,由于地理位置的因素,该镜像往往能够提供比中央央仓库更快的服务。因此,可以配置Maven使用该镜像来替代中央仓库，在 settings.xml 中配置：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>该例中,<code>&lt;mirrorOf&gt;</code>的值为 central,表示该配置为中央仓库的镜像,任何对于中央仓库的请求都会转至该镜像,用户也可以使用同样的方法配置其他仓库的镜像。另外三个元素id、name、url与一般仓库配置无异,表示该镜像仓库的吻一标识符、名称以及地址。类似地,如果该镜像需要认证,也可以基于该 id 配置仓库认证。</p><ol start="2"><li>关于镜像的一个更为常见的用法是结合私服。由于私服可以代理任何外部的公共仓库(包括中央仓库),因此,对于组织内部的 Maven 用户来说,使用一个私服地址就等于使用了所有需要的外部仓库,这可以将配置集中到私服,从而简化 Maven 本身的配置。在这种情况下,任何需要的构件都可以从私服获得,私服就是所有仓库的镜像。这时,可以配置这样的一个镜像:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fengjian-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>为了满足一些复杂的需求,Maven还支持更高级的镜像配置量:</p><p><code>&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</code>: 匹配所有远程仓库。<br><code>&lt;mirrorOf&gt;external:*&lt;/mirrorOf&gt;</code>: 匹配所有远程仓库,使用 localhost 的除外,使用 file:// 协议的除外。也就是说,匹配所有不在本机上的远和程仓库<br><code>&lt;mirrorOf&gt;repo1, repo2&lt;/mirrorOf&gt;</code>: 匹配仓库repol和repo2,使用逗号分隔多个远程仓库。<br><code>&lt;mirrorOf&gt;*,!repol&lt;/mirrorOf&gt;</code>: 匹配所有远程仓库,repol除外,使用感叹号将仓库从匹配中排除。</p><ol start="3"><li>需要注意的是,由于镜像仓库完全屏蔽了被镜像仓库,当镜像仓库不稳定或者停止服务的时候,Maven 仍将无法访问被镜像仓库,因而将无法去下载依赖</li></ol><h3 id="4-7-一些常用的-maven-搜索库"><a href="#4-7-一些常用的-maven-搜索库" class="headerlink" title="4.7 一些常用的 maven 搜索库"></a>4.7 一些常用的 maven 搜索库</h3><ol><li>地址:<a href="http://repository.sonatype.org/">http://repository.sonatype.org/</a> Nexus 是当前最流行的开源Maven仓库管理软件</li><li>地址:<a href="http://www.jarvana.com/jarvana/">http://www.jarvana.com/jarvana/</a> Jarvana 提供了基于关键字、类名的搜索,构件下载、依赖声明片段等功能也一应俱全</li><li>地址:<a href="http://mvnrepository.com/">http://mvnrepository.com/</a> MVNrepository 的界面比较清新,它提供了基于关键字的搜索、依赖声明代码片段、构件下载、依赖与被依赖关系信息、构件所含包信息等功能</li></ol><h2 id="5-Maven-生命周期"><a href="#5-Maven-生命周期" class="headerlink" title="5. Maven 生命周期"></a>5. Maven 生命周期</h2><p>Maven 的生命周期就是为了对所有的构建过程进行抽象和统一建。这个生命周期含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几所有构建步骤。也就是说,几乎所有项目的构建,都能映射到这样一个生命周期上。</p><h3 id="5-2-默认的生命周期"><a href="#5-2-默认的生命周期" class="headerlink" title="5.2 默认的生命周期"></a>5.2 默认的生命周期</h3><ul><li><code>validate</code>- 验证项目是否正确，以及所有必要的信息是否可用</li><li><code>compile</code>- 编译项目的源代码</li><li><code>test</code>- 使用合适的单元测试框架测试编译的源代码。这些测试不应要求打包或部署代码</li><li><code>package</code>- 获取编译后的代码并将其打包为其可分发的格式，例如 JAR。</li><li><code>verify</code>- 对集成测试结果进行任何检查，以确保满足质量标准</li><li><code>install</code>- 将包安装到本地存储库中，以用作本地其他项目中的依赖项</li><li><code>deploy</code>- 在构建环境中完成，将最终包复制到远程存储库，以便与其他开发人员和项目共享。</li></ul><h3 id="5-1-三套相互独立的生命周期"><a href="#5-1-三套相互独立的生命周期" class="headerlink" title="5.1 三套相互独立的生命周期"></a>5.1 三套相互独立的生命周期</h3><p>Maven 的生命周期跟你理解的生命周期有一点不同，它有三套，具体可见[官方文档](<a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">Maven – Introduction to the Build Lifecycle (apache.org)</a>)</p><ol><li>clean：清理项目</li><li>default：构建项目</li><li>site：建立站点</li></ol><p>这三个生命周期涵盖了下图（我们在 IDEA 项目中所看到的 Lifecycle）：</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/28/eba46fcc000d3d0b.png"></p><p>接下来我们单独介绍每一套生命周期：</p><h4 id="5-1-1-clean-生命周期"><a href="#5-1-1-clean-生命周期" class="headerlink" title="5.1.1 clean 生命周期"></a>5.1.1 clean 生命周期</h4><table><thead><tr><th align="left">阶段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>pre-clean</code></td><td align="left">在实际项目清理之前执行所需的流程</td></tr><tr><td align="left"><code>clean</code></td><td align="left">删除先前版本生成的所有文件</td></tr><tr><td align="left"><code>post-clean</code></td><td align="left">执行完成项目清理所需的流程</td></tr></tbody></table><h4 id="5-1-2-default-生命周期"><a href="#5-1-2-default-生命周期" class="headerlink" title="5.1.2 default 生命周期"></a>5.1.2 default 生命周期</h4><table><thead><tr><th align="left">阶段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>validate</code></td><td align="left">验证项目是否正确，以及所有必要的信息是否可用。</td></tr><tr><td align="left"><code>initialize</code></td><td align="left">初始化构建状态，例如设置属性或创建目录。</td></tr><tr><td align="left"><code>generate-sources</code></td><td align="left">生成任何源代码以包含在编译中。</td></tr><tr><td align="left"><code>process-sources</code></td><td align="left">处理源代码，例如过滤任何值。</td></tr><tr><td align="left"><code>generate-resources</code></td><td align="left">生成要包含在包中的资源。</td></tr><tr><td align="left"><code>process-resources</code></td><td align="left">将资源复制并处理到目标目录中，准备打包。</td></tr><tr><td align="left"><code>compile</code></td><td align="left">编译项目的源代码。</td></tr><tr><td align="left"><code>process-classes</code></td><td align="left">对编译中生成的文件进行后处理，例如对 Java 类进行字节码增强。</td></tr><tr><td align="left"><code>generate-test-sources</code></td><td align="left">生成任何测试源代码以包含在编译中。</td></tr><tr><td align="left"><code>process-test-sources</code></td><td align="left">处理测试源代码，例如筛选任何值。</td></tr><tr><td align="left"><code>generate-test-resources</code></td><td align="left">创建用于测试的资源。</td></tr><tr><td align="left"><code>process-test-resources</code></td><td align="left">将资源复制并处理到测试目标目录中。</td></tr><tr><td align="left"><code>test-compile</code></td><td align="left">将测试源代码编译到测试目标目录</td></tr><tr><td align="left"><code>process-test-classes</code></td><td align="left">对测试编译生成的文件进行后处理，例如对 Java 类进行字节码增强。</td></tr><tr><td align="left"><code>test</code></td><td align="left">使用合适的单元测试框架运行测试。这些测试不应要求打包或部署代码。</td></tr><tr><td align="left"><code>prepare-package</code></td><td align="left">在实际打包之前执行准备包裹所需的任何操作。这通常会导致包的解包、已处理版本。</td></tr><tr><td align="left"><code>package</code></td><td align="left">获取已编译的代码并将其打包为其可分发格式，例如 JAR。</td></tr><tr><td align="left"><code>pre-integration-test</code></td><td align="left">执行执行集成测试之前所需的操作。这可能涉及设置所需环境等事项。</td></tr><tr><td align="left"><code>integration-test</code></td><td align="left">如有必要，处理包并将其部署到可以运行集成测试的环境中。</td></tr><tr><td align="left"><code>post-integration-test</code></td><td align="left">执行集成测试后所需的操作。这可能包括清理环境。</td></tr><tr><td align="left"><code>verify</code></td><td align="left">运行任何检查以验证包是否有效并符合质量标准。</td></tr><tr><td align="left"><code>install</code></td><td align="left">将包安装到本地存储库中，以便在本地其他项目中用作依赖项。</td></tr><tr><td align="left"><code>deploy</code></td><td align="left">在集成或发布环境中完成，将最终包复制到远程存储库，以便与其他开发人员和项目共享。</td></tr></tbody></table><h4 id="5-1-3-站点生命周期"><a href="#5-1-3-站点生命周期" class="headerlink" title="5.1.3 站点生命周期"></a>5.1.3 站点生命周期</h4><table><thead><tr><th align="left">阶段</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>pre-site</code></td><td align="left">在实际项目网站生成之前执行所需的流程</td></tr><tr><td align="left"><code>site</code></td><td align="left">生成项目的站点文档</td></tr><tr><td align="left"><code>post-site</code></td><td align="left">执行完成站点生成和准备站点部署所需的流程</td></tr><tr><td align="left"><code>site-deploy</code></td><td align="left">将生成的站点文档部署到指定的 Web 服务器</td></tr></tbody></table><h2 id="6-Maven-插件"><a href="#6-Maven-插件" class="headerlink" title="6. Maven 插件"></a>6. Maven 插件</h2><p>“Maven” 实际上只是 Maven 插件集合的核心框架。换句话说，插件是执行大部分实际操作的地方，插件用于：创建jar文件，创建war文件，编译代码，单元测试代码，创建项目文档等等。您能想到的对项目执行的几乎所有操作都是作为Maven插件实现的。</p><p>插件是 Maven 的核心功能，它允许在多个项目中重用通用构建逻辑。他们通过在项目描述的上下文中执行“操作”（即创建 WAR 文件或编译单元测试）来做到这一点 - 项目对象模型 （POM）。插件行为可以通过一组独特的参数进行自定义，这些参数由每个插件目标（或Mojo）的描述公开。</p><p>插件是 Maven 的核心功能，它允许在多个项目中重用通用构建逻辑。他们通过在项目描述的上下文中执行“操作”（即创建 WAR 文件或编译单元测试）来做到这一点 - 项目对象模型 （POM）。插件行为可以通过一组独特的参数进行自定义，这些参数由每个插件目标（或Mojo）的描述公开。</p><h3 id="6-1-插件配置"><a href="#6-1-插件配置" class="headerlink" title="6.1 插件配置"></a>6.1 插件配置</h3><p>几乎所有Maven插件的目标都有一些可配置的参数,用户可以通过命令行和POM配置等方式来配置这些参数。</p><ol><li><p>命令行插件配置</p><p>在日常的 Maven 使用中,我们会经常从命令行输入并执行Maven命令。很多插件目标的参数都支持从命令行配置,用户可以在Maven命令中使用-D参数,并伴随一个个参数键=参数值的形式,来配置插件目标的参数。例如,maven-surefire-plugin 提供了一个 maven.test.skip 参数,当其值为 true 的时候,就会跳过执行测试。于是,在运行命令的时候,加上如下 -D 参数就能跳过测试 mvn install -Dmaven.test.skip = true 参数-D是 Java 自带的,其功能是通过命令行设置一个Java系统属性,Maven 简单地重用了该参数,在准备插件的时候检查系统属性,便实现了插件参数的配置。</p></li><li><p>POM 中插件全局配置</p><p>并不是所有的插件参数都适合从命令行配置,有些参数的值从项目创建到项目发布都不会改变,或者说很少改变,对于这种情况,在POM文件中一次性配置就显然比重复在命令行输入要方便。用户可以在声明插件的时候,对此插件进行一个全局的配置。也就是说,所有该基于该插件目标的任务,都会使用这些配置。例如,我们通常会需要配置 maven-compiler-plugin 告诉它编译 Java1.8 版本的源文件,生成与JVM1.8兼容的字节码文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="6-2-获取插件信息（寻找插件）"><a href="#6-2-获取插件信息（寻找插件）" class="headerlink" title="6.2 获取插件信息（寻找插件）"></a>6.2 获取插件信息（寻找插件）</h3><p>以下是几个常用的 Maven 插件仓库地址：</p><ul><li>Apache Maven Central Repository：Maven 官方中央仓库。[<a href="https://search.maven.org/">1</a>]</li><li>JCenter：由 Bintray 提供的免费 Maven 仓库。[<a href="https://bintray.com/bintray/jcenter">2</a>]</li><li>Spring Plugins Repository：Spring 官方提供的 Maven 插件仓库。[<a href="https://repo.spring.io/plugins-release/">3</a>]</li><li>Google Maven Repository：由 Google 提供的 Maven 仓库，包含 Android 和 Google Cloud 相关的依赖。[<a href="https://maven.google.com/">4</a>]</li></ul><h2 id="7-关于聚合和继承这件事"><a href="#7-关于聚合和继承这件事" class="headerlink" title="7. 关于聚合和继承这件事"></a>7. 关于聚合和继承这件事</h2><p>软件设计人员往往会采用各种方式对软件划分模块,以得到更清晰的设计及更高的重用性。当把 Maven 应用到实际项目中的时候,也需要将项目分成不同的模块。Maven 的聚合特性能够把项目的各个模块聚合在一起构建,而 Maven 的继承特性则能帮助抽取各模块相同的依赖和插件等配置,在简简化 POM 的同时,还能促进各个模块配置的一致性。</p><p>以一个购物网站项目为例：我们把该项目拆分为’下单模块’和’发货模块’，分别为 shopping-order 和 shopping-delivery：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Order<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-delivery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Delievery<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般来说,一个项目的子模块都应该使用同样的 groupld,如果它们一起开发和发布,还应该使用同样的 version,此外,它们的 artifactld 还应该使用一致的前缀,以方便同其他项目区分。</p><h3 id="7-1-聚合"><a href="#7-1-聚合" class="headerlink" title="7.1 聚合"></a>7.1 聚合</h3><p>上面我们创建了两个项目，那一个简单的需求就会自然而然地显现出来:我们会想要一次构建两个项目,而不是到两个模块的日录下分别执行 mvn 命令。Maven 聚合(或者称为多模块)这一特性就是为该需求服务的。<br>为了能够使用一条命令就能构建 shopping-order 和 shopping-delivery 两个模块,我们需要创建一个额外的名为 shopping-aggregator 的模块,然后通过该模块构建整个项目的所有模块。shopping-aggregator 本身作为一个 Maven 项目,它必须要有自己的 POM,不过,同时作为一个聚合项目,其 POM 又有特殊的地方。如下为 shopping-aggregatorf的pom.xml内容:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-aggregator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Aggregator<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../shopping-delivery<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../shopping-order<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>上述 POM 依旧使用了购物网站服务共同的 tech.fengjian, artifactld 为独立的 shopping-aggregator,版本也与其他两个模块-致,为 1.0-SNAPSHOT。这里的第一个特殊的地方为 packaging,其值为 POM。回顾 shopping-order 和 shopping-delivery,它们都没有声明 packaging,即使用了默认值 jar。对于聚合模块来说,其打包方式 packaging 的值必须为 pom,否则就无法构建。</p></li><li><p>modules 是实现聚合的最核心的配置，我们可以通过在一个打包方式为 pom 的 Maven 项目中声明任意数量的 module 元素来实现模块聚合。这里的每一个 module 值都是一个当前 POM 的相对目录。</p><p>一般来说,为了方便快速定位内容,模块所处的目录名称应当与其 artifactld 一致,不过这不是Maven的要求,用户也可以将shopping-order 项目放到 order-shopping/ 目录下。这时聚合的配置就需要相应地改成<module>order-shopping</module>。</p></li><li><p>为了方便用户构建项目、通常将聚合模块放在项目目录的最顶层,其他模块则作为聚合模块的子目录存在,这样当用户得到源码的时候,第一眼发现的就是聚合模块的 POM,不用从多个模块中去寻找聚合模块来构建整个项目。</p></li><li><p>关于目录结构还需要注意的是,聚合模块与其他模块的目录结构并非一定要是父子关系，还可以是另一种平行的目录结构。</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/58f1ec49485695d5.png" alt="平行目录结构聚合工程"></p><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/151d74c13eec1a0f.png" alt="父子目录结构聚合工程"></p></li><li><p>统一构建，在聚合工程上进行操作即可（shopping-aggregator），注意这里显示的是 pom 中的 <name> 标签中的值，如果没有定义 name 则默认显示的是 artifactId</p><p><img src="https://s3.bmp.ovh/imgs/2023/05/05/0b8509167c3379c8.png"></p></li></ul><h3 id="7-2-继承"><a href="#7-2-继承" class="headerlink" title="7.2 继承"></a>7.2 继承</h3><p>到目前为止,我们已经能够使用 Maven 的聚合特性通过一条命令同时构建 shopping-order 和 shopping-delivery 两个模块,不过这仅仅解决了多模块 Maven 项目的一个问题。那么多模块的项目还有什么问题呢?这两个 POM 有着很多相同的配置,例如它们有相同的 groupId 和 version,有相同的 junit 依赖,还有相同的 maven-compiler-plugin 配置。大量的前人经验告诉我们,重复往往就意味着更多的劳动和更多的潜在的问题。在面向对象世界中,程序员员可以使用类继承在一定程度上消除重复,在 Maven 的世界中,也有类似的机制能让我们抽取出重复的配置,这就是 POM 的继承。</p><ul><li><p>新建 shopping-parent 模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Parent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改子模块 shopping-order、shopping-delivery 继承 shopping-parent</p><ul><li><p>shopping-order</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../shopping-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Order<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>shopping-delivery</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../shopping-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-delivery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Delievery<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>上述 POM 中使用 parent 元素声明父模块,parent 下的子元素 groupId、artifactId 和 version 指定了父模块的坐标,这三个元素是必须的。元素 relativePath 表示父模块 POM 的相对路径,该例中的../shopping-account/pom.xml 表示父 POM 的位置在与 shopping-order/ 目录平行的 shopping-account/ 目录下。当项目构建时,Maven 会首先根据 rellativePath 检查父 POM,如果找不到,再从本地仓库查找。relativePath 的默认值是../pom.xml,也就是说,Maven 默认父 POM 在上一层目录下。正确设置 relativePath 非常重要。考虑这样一个情况,开发团队的新成员从源码库签出一个包含父子模块关系的 Maven 项目。由于只关心其中的某一个子模块,它就直接到该模块的目录下执行构建,这个时候,父模块是没有被安装到本地仓库的,因此如果子模块没有设置正确的 relativePath,Maven 将无法找到父 POM,这将直接导致构建失败。如果 Maven 能够根据 relativePath 找到父POM,它就不需要再去检查本地仓库。这个更新过的 POM 没有为 shopping-order 声明 groupId 和 version,不过这并不代表 shopping-order 没有 groupld 和 version。实际上,这个子模块隐式地从父模均快继承了这两个元素,这也就消除了一些不必要的配置。在该例中,父子模块使用同样的 groupId 和 version,如果遇到子模块需要使用和父模块不一样的 groupld 或者 version 的情况,那么用户完全可以在子模块中显式声明。对于 artifactld 元素来说,子模块应该显式声明,一方面,如果完全继承 groupId、artifactld 和 version,会造成坐标冲突;另一方面,即使使用不同的 groupId 或 version,同样的 artifactld 容易造成混淆。</p><ul><li><p>除了 groupId 和 version 可以被继承，还有一些元素也同样可以被继承，下表是完整的可继承的列表</p><table><thead><tr><th>元素</th><th>说明</th></tr></thead><tbody><tr><td>groupld</td><td>项目组ID,项目坐标的核心元素</td></tr><tr><td>version</td><td>项目版本,项目坐标的核心元素</td></tr><tr><td>description</td><td>项目的组织信息</td></tr><tr><td>organization</td><td>项目的组织信息</td></tr><tr><td>inceptionYear</td><td>项目的创始年份</td></tr><tr><td>url</td><td>项目的URL地址</td></tr><tr><td>developers</td><td>项目的开发者信息</td></tr><tr><td>contributors</td><td>项目的贡献者信息</td></tr><tr><td>distributionManagement</td><td>项目的部署配置</td></tr><tr><td>issueManagement</td><td>项目的缺陷跟踪系统信息</td></tr><tr><td>ciManagement</td><td>项目的持续集成系统信息</td></tr><tr><td>scm</td><td>项目的版本控制系统信息</td></tr><tr><td>mailingLists</td><td>项目的邮件列表信息</td></tr><tr><td>properties</td><td>自定义的Maven属性</td></tr><tr><td>dependencies</td><td>项目的依赖配置</td></tr><tr><td>dependencyManagement</td><td>项目的依赖管理配置</td></tr><tr><td>repositories</td><td>项目的仓库配置</td></tr><tr><td>build</td><td>包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等</td></tr><tr><td>reporting</td><td>包括项目的报告输出目录配置、报告插件配置等</td></tr></tbody></table></li><li><p>依赖管理</p><p>模块 shopping-order 和模块 shopping-delivery 都依赖 junit，那很自然的想到把 junit 依赖从子模块中抽取到 shopping-parent 中。这样就会产生一个问题，如果现在又新增了一个子母块 shopping-a，而 shopping-a 并不需要 junit 依赖，上面直接抽取的做法会强加给 a 一个 junit 依赖。</p><p>Maven 提供了依赖管理标签来解决这种问题，Maven 提供的 dependencyManagement 元素既能让子模块的依赖配置,又能保证子模块依赖使用的灵活性。在dependencyManagement元素下的依赖声明不会引人实际的依赖,不过它能够约束 dependencies 下的依赖使用。例如,可以在 shopping-parent 中加入这样的 dependencyManagement 配置:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Shopping Parent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../shopping-delivery<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>../shopping-order<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>首先该父 POM 将 junit 依赖的版本以 Maven 变量的形式提取了出来,不仅消除了一些重复,也使得各依赖喷的版本处于更加明显的位置。</p></li><li><p>这里使用 dependencyManagement 声明的依赖既不会给 shopping-parent 引人依赖,也不会给它的子模块引入依赖,不过这段配置是会被继承的。</p><p>shopping-order 和 shopping-delivery 如果需要使用 junit，则可配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>父 POM中 使用 dependencyManagement 声明依赖能够统一项目范围中依赖的版本,当依赖版本在父 POM中 声明之后,子模块在使用你赖的时候就无须声明版本,也就不会发生多个子模块使用依赖版本不一致的情况:这可以帮助降低依赖冲突的几率。</p><p>如果子模块不声明依赖的使用,即使该依赖已经在父 POM的dependeneyManagement 中声明了,也不会产生任何实际的效果。</p></li></ul></li><li><p>在介绍依赖范围的时候提到了名为 import 的依赖范围,推迟到现在介绍是因为该范围的依赖只在 dependencyManagement 元素下才有效果,使用该范围国的依赖通常指向一个 POM,作用是将目标 POM 中的 dependencyManagement 配置导人并合并到当前 POM 的 dependencyManagement 元素中。例如想要在另外一个模块中使用与 shopping-parent 完全一样的 dependencyManagement 配置,除了复制配置或者继承这两种方式之外,还可以使用 import 范围依赖将这一配置导入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shopping-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>插件的继承也遵循同依赖继承一样的规则（pluginManagement），不在赘述</p></li></ul><h3 id="7-3-聚合和继承的关系"><a href="#7-3-聚合和继承的关系" class="headerlink" title="7.3 聚合和继承的关系"></a>7.3 聚合和继承的关系</h3><p>基于前面的内容,可以了解到,多模块 Maven 项目中的聚合与继承其实是两个概念,其目的完全是不同的。前者主要是为了方便快速构建项目,后者主要是为了消除重复配置。<br>对于聚合模块来说,它知道有哪些被聚合的模块,但那些被聚合的模块不知道这个聚合模块的存在。<br>对于继承关系的父POM来说,它不知道有哪些子模块继承于它,但那些子模块都必须知道自己的父 POM 是什么。<br>如果非要说这两个特性的共同点,那么可以看到,要聚合 POM 与继承关系中的父 POM 的 packaging 都必须是 pom,同时,聚合模块与继承关系中的父模块除了 POM 之外都没有实<br>际的内容。</p><p>在现有的实际项目中,我们往往会发现一个 POM 既是聚合 POM,又是父 POM,这么做主要是为了方便。一般来说,融合使用聚合与继承也没有什么问题。</p><p>Maven 默认能识别的父模块位置,所以当父子模块的目录关系也是父子目录时，不再需要配置 relativePath。</p><h2 id="8-实践"><a href="#8-实践" class="headerlink" title="8. 实践"></a>8. 实践</h2><h3 id="8-1-约定优于配置"><a href="#8-1-约定优于配置" class="headerlink" title="8.1 约定优于配置"></a>8.1 约定优于配置</h3><p>maven 的项目约定：</p><p>源码目录为 src/main/java/<br>编译输出日录为 target/classes/<br>打包方式为 jar<br>包输出目录为 target/</p><h3 id="8-2-maven-项目的构件顺序"><a href="#8-2-maven-项目的构件顺序" class="headerlink" title="8.2 maven 项目的构件顺序"></a>8.2 maven 项目的构件顺序</h3><p>实际的构建顺序是这样形成的:Maven 按序读取 POM,如果该 POM 没有依赖模块,那么就构建该模块,否则就先构建其依赖模块,如果该依赖还依赖于其他模块,则进一步先构建依赖的依赖换。</p><p>聚合项目之间往往没有依赖关系，按顺序。</p><p>父子项目之间，子项目继承（依赖）父项目，先构建父项目，然后再构建子项目。（这也就是如果单独执行子项目的 maven 命令往往会报错的原因，没有设置 relativePath 也没用 install 父项目到本地仓库）</p><h3 id="8-3-使用-IDEA-创建一个-maven-项目"><a href="#8-3-使用-IDEA-创建一个-maven-项目" class="headerlink" title="8.3 使用 IDEA 创建一个 maven 项目"></a>8.3 使用 IDEA 创建一个 maven 项目</h3><ol><li><p>不使用骨架（Archetype） 创建（<code>tips：</code> IDEA 版本不同，功能项位置可能会变化（演示版本为：2022.1.4））</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/02/cc216f8f2baf0aa8.png"></p></li></ol><ol start="2"><li><p>使用骨架（Archetype）创建，选择骨架 <code>maven-archetype-quickstart</code></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/02/28b39021de8f3575.png" alt="image-20230202123100232"></p></li></ol><ol start="3"><li><p>maven 项目标准目录结构（约定优于配置）</p><ul><li><p>src</p><ul><li>main<ul><li>java -java源代码文件</li><li>resources -资源库</li><li>webapp<ul><li>WEB-INF<ul><li>index.jsp</li></ul></li><li>css、js</li></ul></li><li>Bin -脚本库</li><li>config -配置文件</li><li>filters -资源过滤库</li></ul></li></ul></li><li><p>test</p><ul><li>java -java测试源代码文件</li><li>resources -测试资源库</li><li>filters -测试资源过滤库</li></ul></li><li><p>target -存放项目构建后的文件和目录，比如 jar 包，war 包，编译的 class 文件</p></li></ul></li></ol><h3 id="8-4-maven-核心-pom-文件"><a href="#8-4-maven-核心-pom-文件" class="headerlink" title="8.4 maven 核心 pom 文件"></a>8.4 maven 核心 pom 文件</h3><ol><li><p>什么是 pom</p><p>pom 代表对象模型，它是 maven 中工作的基本组成单位。它是一个 XML 文件，始终保存在项目的基本目录中的 pom.xml 文件中。pom 包含的对象是使用 maven 来构建的，pom.xml 文件包含了项目的各种配置信息，需要特别注意，每个项目都只有一个 pom.xml 文件。</p></li><li><p>项目配置信息</p><ul><li><p><strong>project</strong>：工程的根标签</p></li><li><p><strong>modelVersion</strong>：pom 模型版本，maven2 和 maven3 只能为 4.0.0</p></li><li><p><strong>groupId</strong>：这是工程组的标记。它在一个组织或者项目中通常是唯一的。例如一个银行组织 com.name.project 拥有所有和银行相关的项目</p></li><li><p><strong>artifactId</strong>：这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置</p></li><li><p><strong>version</strong>：这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本</p></li><li><p><strong>packing</strong>：定义 maven 项目的打包方式，有 jar 、war 和 ear 三种格式</p></li></ul></li><li><p>最小 pom 文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>super pom</p><ul><li><p>父（super）pom 是 maven 默认的 pom。所有的 pom 都继承自一个父 pom（无论是否显式定义了这个父 pom）。父 pom 包含了一些可以被继承的默认设置。因此，当 maven 发现需要下载 pom 中的依赖时，它会到 super pom 中配置的默认仓库。</p></li><li><p>使用以下命令来查看 super pom 默认配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">mvn help:effective-pom<br></code></pre></td></tr></table></figure></li><li><p>依赖配置信息（）</p><ol><li><p>dependencies</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>parent</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tech.fengjian<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>groupId：父项目的组Id标识符</li><li>artifactId：父项目的唯一标识符</li><li>relativePath：Maven 首先在当前项目中找父项目的 pom，然后在文件系统的这个位置，然后再本地仓库，然后再远程仓库查找。</li><li>version：父项目的版本</li></ul></li><li><p>modules</p><ul><li><p>有些 maven 项目会做成多模块的，这个标签用于指定当前项目包含的所有模块。之后对这个项目进行 maven 操作，会让所有的子模块进行相同操作。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>com-3<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>properties</p><ul><li><p>用于定义 pom 常量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>上面这个常量可以在 pom 文件的任意位置，以 ${java.version} 的方式进行引用。</p></li><li><p>dependencyManagement</p><p>应用场景</p><ul><li><p>当我们的项目模块很多的时候，我们依赖包的管理就会出现很多问题，为了项目的正确运行，必须让所有的子模块使用依赖项的同一版本，确保应用的各个项目的依赖项和版本一致，才能保证测试的和发布的是相同的结果。</p></li><li><p>使用的好处</p><ul><li>在父模块中定义后，子模块不会直接使用对应依赖，但是在使用相同依赖的时候可以不加版本号，这样的好处是可以避免在使用该依赖的每个项目中声明版本号，这样想升级或切换到另一个版本号的时候，只需要在父类容器里更新，不需要任何一个子项目的更改。</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml">父项目：<br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>子项目1：<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>子项目2：<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>子项目2：<br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol></li></ul></li></ol><h3 id="8-5-maven-生命周期"><a href="#8-5-maven-生命周期" class="headerlink" title="8.5 maven 生命周期"></a>8.5 maven 生命周期</h3><ol><li><p>什么是生命周期</p><p>maven 的生命周期就是对所有的构建过程进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有的构件步骤。</p></li><li><p>maven 的三个构件生命周期</p><ul><li>clean<ul><li>pre-clean：执行一些清理前需要完成的工作</li><li>clean：清理上一次构件生成的文件</li><li>post-clean：执行一些清理后需要完成的工作</li></ul></li><li>default<ul><li>validate：验证工程是否正确</li><li>compile：编译项目源代码</li><li>test：使用合适的单元测试框架来测试已编译的源代码</li><li>package：把编译好的代码打包成一个可一个发布的格式（jar war)</li><li>verify：运行所有检查，验证包是否有效</li><li>install：安装到 maven 本地仓库</li><li>deploy：部署到远程的仓库，使得其他开发者或工程可以共享</li></ul></li><li>site：生成项目信息、站点</li></ul></li></ol><h3 id="8-6-常用的-maven-命令"><a href="#8-6-常用的-maven-命令" class="headerlink" title="8.6 常用的 maven 命令"></a>8.6 常用的 maven 命令</h3><ul><li><p>常用命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn validate 验证项目是否正确<br>mvn package maven 打包<br>mvn generate-sources 生成源代码<br>mvn compile 编译<br>mvn test-compile 编译测试代码<br>mvn test 运行测试<br>mvn verify 运行检查<br>mvn clean 清理项目<br>mvn install 安装项目到本地仓库<br>mvn deploy 发布项目到远程仓库<br>mvn dependency:tree 显示 maven 依赖树<br>mvn dependency:list 显示 maven 依赖列表<br></code></pre></td></tr></table></figure></li><li><p>常用参数</p><ul><li>-D：指定参数，如 -Dmaven.test.skip=true 跳过单元测试</li><li>-P：指定 Profile 位置，可用于区分环境</li></ul></li><li><p>web 相关命令</p><ul><li>mvn tomcat:run 启动 tomcat</li><li>mvn jetty:run 启动 jetty</li><li>mvn tomcat:deploy 运行打包部署</li></ul></li></ul><h3 id="8-7-jar-包管理"><a href="#8-7-jar-包管理" class="headerlink" title="8.7  jar 包管理"></a>8.7  jar 包管理</h3><h4 id="8-7-1-如何添加项目需要的-jar-包"><a href="#8-7-1-如何添加项目需要的-jar-包" class="headerlink" title="8.7.1 如何添加项目需要的 jar 包"></a>8.7.1 如何添加项目需要的 jar 包</h4><ol><li><p>原理</p><ul><li>在本地，指定一个文件夹，便是 maven 的仓库，maven 会从远程的中央仓库中下载你所需要的 jar 资源到你本地，然后通过 maven 关联，将 jar 包依赖到你的项目中，避免了你需要将 jar 包添加到 lib 目录下，并通过 classpath 引入这些 jar 包的工作。</li></ul></li><li><p>步骤</p><ul><li>打开仓库网站（<a href="https://mvnrepository.com/">传送门</a>）</li><li>选择你需要的 jar 包的信息和版本</li><li>填写依赖信息到 pom 文件</li><li>下载到本地仓库</li><li>项目使用</li></ul></li><li><p>实操</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.12.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ol><h4 id="8-7-2-如何使用-maven-运行一个单元测试"><a href="#8-7-2-如何使用-maven-运行一个单元测试" class="headerlink" title="8.7.2 如何使用 maven 运行一个单元测试"></a>8.7.2 如何使用 maven 运行一个单元测试</h4><ol><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppTest</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;junit test&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="8-7-3-如何建立一个-web-应用"><a href="#8-7-3-如何建立一个-web-应用" class="headerlink" title="8.7.3 如何建立一个 web 应用"></a>8.7.3 如何建立一个 web 应用</h4><ol><li><p>从 Archetype 新建 web 项目</p><p><img src="C:/Users/zhulu/AppData/Roaming/Typora/typora-user-images/image-20230207190017174.png" alt="image-20230207190017174"></p></li><li><p>项目目录结构</p><p><img src="C:/Users/zhulu/AppData/Roaming/Typora/typora-user-images/image-20230207190217734.png" alt="image-20230207190217734"></p></li><li><p>新建 java 文件和 resources 文件</p><p><img src="C:/Users/zhulu/AppData/Roaming/Typora/typora-user-images/image-20230207190814764.png" alt="image-20230207190814764"></p></li></ol><h4 id="8-7-4-如何导入第三方-jar-包到本地仓库"><a href="#8-7-4-如何导入第三方-jar-包到本地仓库" class="headerlink" title="8.7.4 如何导入第三方 jar 包到本地仓库"></a>8.7.4 如何导入第三方 jar 包到本地仓库</h4><ol><li><p>搜索并下载 jar</p><p><img src="C:/Users/zhulu/AppData/Roaming/Typora/typora-user-images/image-20230207191025207.png" alt="image-20230207191025207"></p></li><li><p>导入</p><ul><li><p>进入 cmd 命令页面</p></li><li><p>输入指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file -Dfile=xxxx -DgroupId=com.alibaba -DartifactId=fastjson -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true<br></code></pre></td></tr></table></figure></li><li><p>参数说明：</p><ul><li>-Dfile 为 jar 包文件路径</li><li>-DgroupId 一般为 jar 开发组织的名称，也是坐标 groupId</li><li>-DartifactId 一般为 jar 名称，也是坐标 artifactId</li><li>-Dversion 是版本号</li><li>-Dpackaging 是打包类型</li></ul></li></ul></li></ol><h4 id="8-7-5-常用的-maven-插件"><a href="#8-7-5-常用的-maven-插件" class="headerlink" title="8.7.5 常用的 maven 插件"></a>8.7.5 常用的 maven 插件</h4><ol><li>官方插件列表<ul><li>groupId 为 org.apache.maven.plugins</li><li><a href="http://maven.apache.org/plugins/index.html">http://maven.apache.org/plugins/index.html</a></li></ul></li><li>两种方式调用 maven 插件<ul><li>将插件目标与生命周期阶段绑定，例如 maven 默认将 maven-compiler-plugin 的 compile 与 maven 生命周期的 compile 阶段绑定</li><li>直接在命令行显示指定要执行的插件目标，例如 mvn archetype:generate 就表示调用 maven-archetype-plugin 的 generate 目标</li></ul></li><li>常用的 maven 插件<ul><li>maven-antrun-plugin<ul><li>maven-antrun-plugin 能让用户在 maven 项目中运行 Ant 任务。用户可以直接在该插件的配置以 Ant 的方式编写 Target，然后交给该插件的 run 目标去执行</li></ul></li><li>maven-archetype-plugin<ul><li>archetype 指项目的骨架，maven 初学者最开始执行的 maven 命令可能就是 mvn archetype:generate，这实际上就是让 maven-archetype-plugin 生成一个很简单的项目骨架，帮助开发者快速上手</li></ul></li></ul></li></ol><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a>9. 总结</h2><p>至此，本文已经提供了 maven 详细指南。通过这个教程，我们可以轻松使用 maven 地构建自己的 Maven java项目，方便团队内部开发和组织内共享代码。如果有任何问题，请在评论区留言。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Nexus 搭建 Maven 私有仓库</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/nexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/nexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>阅读提示：本文内容是基于 <font color="red">nexus-3.19.1-01</font> 版本！！！</p></blockquote><h2 id="1-什么是-Maven-私有仓库"><a href="#1-什么是-Maven-私有仓库" class="headerlink" title="1. 什么是 Maven 私有仓库"></a>1. 什么是 Maven 私有仓库</h2><p>在开发过程中，我们通常会使用Maven构建项目的依赖管理系统。Maven的仓库是用来存放各种软件库、框架和插件等资源的地方，它可以让我们方便地管理各种依赖，并且可以通过依赖关系自动下载所需的库文件，缩短编译部署时间，提高效率。</p><p>但是，对于企业内部开发者和团队而言，与外部库不同，他们可能需要创建一些定制的依赖项，如共享的基础框架、工具类、代码库等。这时，Maven 私有仓库就派上用场了。私有仓库是一种为开发者和团队提供内部库的机制，它可以使开发者更好地管理和共享内部代码，并将一些第三方库缓存下来以减少重复的下载。</p><p><strong>常用的构件私有仓库的软件</strong>：</p><ol><li>Apache Archiva  </li><li>JFrog Artifactory</li><li><font color="red">Sonatype Nexus</font>：也就是本文要介绍使用的搭建 maven 私服的软件<a href="https://www.sonatype.com/">官网</a></li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/9a3f21f187ac0a19.png"></p><h2 id="2-Nexus简介"><a href="#2-Nexus简介" class="headerlink" title="2. Nexus简介"></a>2. Nexus简介</h2><p>Nexus是一个流行的二进制管理工具，它由 Sonatype 开发，可以作为 Maven、NuGet 和 Docker 等多种包管理器的仓库管理器。Nexus 可以提供一个中央储存库，供开发人员共享依赖项，同时还可以提供私有仓库功能，使企业能够更好地管理内部资源。</p><p>Nexus 有许多可定制的选项，可以帮助您配置Maven私有仓库以满足您的特定需求。本文将提供详细的 Nexus 搭建和配置指南，快速搭建属于自己的 Maven 私有仓库。</p><h2 id="3-Nexus-搭建"><a href="#3-Nexus-搭建" class="headerlink" title="3. Nexus 搭建"></a>3. Nexus 搭建</h2><h3 id="3-1-安装-Java-环境"><a href="#3-1-安装-Java-环境" class="headerlink" title="3.1 安装 Java 环境"></a>3.1 安装 Java 环境</h3><p>在安装Nexus之前，需要确保已经安装了Java环境（JDK 8或更高版本）。你可以在终端输入以下命令来检查是否已安装Java环境：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">java -<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>如果系统已安装Java环境，将会输出Java版本信息。否则，需要先安装Java。</p><h3 id="3-2-下载-Nexus-传送门"><a href="#3-2-下载-Nexus-传送门" class="headerlink" title="3.2 下载 Nexus 传送门"></a>3.2 下载 Nexus <a href="https://www.sonatype.com/thanks/repo-oss?hsCtaTracking=bde424ac-b77c-4799-913d-9d0db86ef1f8%7Cb308aaca-ab41-4544-ba23-c53c1b469e0d">传送门</a></h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/369d6e28beed20f7.png"></p><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/87f61e3e18c7bbb4.png"></p><h3 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h3><ol><li>切换到 nexus-3.19.1-01 的 bin 目录下</li></ol><ul><li><p>mac/linux平台执行命令: <code>./nexus run</code></p></li><li><p>windows平台执行命令:<code>nexus /run</code></p></li></ul><p><strong><font color="red">tips</font></strong>: </p><ul><li><p>run 是前台启动，可以看到实时的启动日志，start 是后台启动；</p></li><li><p>启动如果遇到数据库（DB）相关的错误，可以删除 sonatype-work/nexus3/db 文件夹，重新启动；</p></li><li><p>还有一个问题是当前用户的权限不足，使用管理员角色运行即可</p></li></ul><ol start="2"><li>nexus 默认端口号 <code>8081</code> ，启动成功后可直接访问 <a href="http://localhost:8081/">http://localhost:8081/</a></li></ol><ul><li>新建仓库需登录后方可操作，默认账号 <code>admin</code>，密码存放路径 <code>/sonatype-work/nexus3/admin.password</code>  </li><li>登录成功后需修改密码</li></ul><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/76adc1ac899eae3c.png"></p><h2 id="3-Nexus-内置仓库"><a href="#3-Nexus-内置仓库" class="headerlink" title="3. Nexus 内置仓库"></a>3. Nexus 内置仓库</h2><h3 id="3-1-三种类型"><a href="#3-1-三种类型" class="headerlink" title="3.1 三种类型"></a>3.1 三种类型</h3><ul><li><p><code>proxy</code>: （代理）用来代理远程仓库，是介于远程仓库和本地仓库之间的私有仓库</p><ul><li>依赖存储策略：release，只会下载和存中央仓库中的发布版本依赖</li></ul></li><li><p><code>group</code>: （仓库组）对我们的仓库进行分组管理</p><ul><li>依赖存储策略：release，只会下载和存中央仓库中的发布版本依赖</li></ul></li><li><p><code>hosted</code>：（宿主）用于发布我们本地开发的项目，将项目发布到 hosted 仓库后再进行相关的部署工作</p><ul><li>依赖存储策略，release：用于存储稳定版本项目，snapshot: 用于发布快照版本软件</li></ul></li></ul><h3 id="3-2-内置仓库"><a href="#3-2-内置仓库" class="headerlink" title="3.2 内置仓库"></a>3.2 内置仓库</h3><p> Nexus内置了多个仓库，我们关心的是其中的 maven 仓库，NuGet 是微软推出的一种用于.NET开发的包管理工具，类似于Maven、npm等，这里按下不表。</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/8ad042040fe2b24a.png"></p><ul><li><p>maven-central:（proxy类型） 用于代理远程仓库，缓存远程仓库中的软件包，减少网络传输开销</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/fd5eb2197e7d9d4c.png"></p></li><li><p>maven-release: （hosted类型）用于在本地存储发布的 release 版软件包，可以通过该仓库发布自己的软件包（通过设置 pom 文件中的 version，然后通过 maven 的 deploy 命令）</p></li><li><p>maven-snapshots: （hosted类型）用于在本地存储发布的 snapshots 版软件包，可以通过该仓库发布自己的软件包（通过设置 pom 文件中的 version，然后通过 maven 的 deploy 命令）</p></li><li><p>maven-public:（group类型） 将多个proxy仓库、hosted仓库和其他group仓库合并成一个虚拟仓库，在使用时就像一个单独的仓库</p><p>相比较 proxy 和 hosted 两种类型仓库，创建 group 仓库时需指定成员仓库</p><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/82f0a4c9f52f8348.png"></p></li></ul><h2 id="4-自定义私有仓库"><a href="#4-自定义私有仓库" class="headerlink" title="4. 自定义私有仓库"></a>4. 自定义私有仓库</h2><p><img src="https://s3.bmp.ovh/imgs/2023/04/24/24ec67552f7f2482.png" alt="三种类型仓库"></p><ol><li>创建一个代理阿里云仓库的私有仓库(proxy类型)：my_nexus</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/8196784d808db409.png"></p><ol start="2"><li>创建一个发布版本项目仓库：release  版本(hosted类型)</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/59413c16046f272f.png"></p><ol start="3"><li>创建一个快照版本项目仓库：snapshot 版本(hosted类型)</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/6e1dfe96dd05e7a7.png"></p><ol start="4"><li>创建一个 group 类型仓库</li></ol><p><img src="https://s3.bmp.ovh/imgs/2023/04/25/69d2929dd0557abb.png" alt="image-20230425135352964"></p><h2 id="5-自定义私有仓库的使用"><a href="#5-自定义私有仓库的使用" class="headerlink" title="5. 自定义私有仓库的使用"></a>5. 自定义私有仓库的使用</h2><p>创建是为了使用，接下来让我们看看如何将新创建好的私有仓库应用到项目中：</p><h3 id="5-1-代理仓库的使用"><a href="#5-1-代理仓库的使用" class="headerlink" title="5.1 代理仓库的使用"></a>5.1 代理仓库的使用</h3><ol><li><p>在私有仓库列表选择一个要使用的私有仓库，拷贝地址备用 </p><p><a href="http://localhost:8081/repository/fengjian-maven-central/">http://localhost:8081/repository/fengjian-maven-central/</a></p></li><li><p>可以在 setting.xml 文件中 或在 pom.xml 文件中添加私有仓库：<br>该例配置中的releases和snapshots元素比较重要,它们用来控制Maven对于发布版构件<br>和快照版构件的下载。这里需要注意的是enabled子元素,该例中releases 的enabled值为true,表示开启JBoss仓库的发布版本下载支持,<br>而snapshots的enabled值为false,表示关闭 fengjian-maven-central 仓库的快照版本的下载支持。因此,根据<br>该配置,Maven只会从 fengjian-maven-central 仓库下载发布版的构件,而不会下载快照版的构件。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 配置私有仓库 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fengjian-maven-central<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-central/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span> <br>      <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-部署仓库的使用"><a href="#5-1-部署仓库的使用" class="headerlink" title="5.1 部署仓库的使用"></a>5.1 部署仓库的使用</h3><p><img src="https://s3.bmp.ovh/imgs/2023/04/26/03df0937e15b6963.png" alt="image-20230426004749048"></p><p>配置项目部署的远程仓库：release 版本 &amp; snapshot 版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">distributionManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fengjian-maven-releasee<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-release/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">snapshotRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fengjian-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://localhost:8081/repository/fengjian-maven-snapshots/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">snapshotRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">distributionManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong><font color="red">tips</font></strong>:release 和 snapshots 对应的 pom.xml 设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 快照版本 SNAPSHOT 结尾 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 稳定版本，非 SNAPSHOT 结尾--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0-RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font color="red">部署提示 401，依赖部署到远程仓库需要配置认证信息 </font>  </p><p>解决方法：  </p><p>在 maven 的 setting.xml 的 <servers> 标签下添加要认证的服务器信息，填写上对应的私有仓库用户名和密码即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servers</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-release<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>fengjian-maven-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>admin<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>admin123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servers</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>至此，本文已经提供了 Nexus 搭建和配置 Maven 私有仓库的详细指南。通过这个教程，我们可以轻松地建立自己的 Maven 私有仓库，方便团队内部开发和组织内共享代码。如果有任何问题，请在评论区留言。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>私有仓库</tag>
      
      <tag>Nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK 动态代理</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>张三是一家建筑公司的老板，前些年承包项目挣了些钱，钱一多就没地儿花，于是就进入股市，不出意外的是出了意外，于是工头们纷纷前来要账~</p><h2 id="先来看一个静态代理的例子"><a href="#先来看一个静态代理的例子" class="headerlink" title="先来看一个静态代理的例子"></a>先来看一个静态代理的例子</h2><p>顾客到饭店吃饭，厨师负责做菜，那么就需要有人来帮厨师获取顾客点的菜，还有上菜</p><p><strong>饭店</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Restaurant</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cooking</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>厨师</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Restaurant</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cooking</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是厨师：我负责做菜&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>厨师代理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Restaurant</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cooking</span><span class="hljs-params">()</span> </span>&#123;<br><br>        <span class="hljs-comment">// 顾客点菜</span><br>        System.out.println(<span class="hljs-string">&quot;我是服务员：顾客点菜&quot;</span>);<br><br>        Cook cook = <span class="hljs-keyword">new</span> Cook();<br>        cook.cooking();<br><br>        <span class="hljs-comment">// 上菜</span><br>        System.out.println(<span class="hljs-string">&quot;我是服务员：上菜&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCookProxy</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        CookProxy cookProxy = <span class="hljs-keyword">new</span> CookProxy();<br>        cookProxy.cooking();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>静态代理的缺点</strong></p><ol><li><p>因为代理类和被代理类实现相同的接口，所以代理类必须实现接口的全部方法，会出现<code>冗余</code>代码</p></li><li><p>每个代理类只能针对实现特定接口的被代理类，一个接口一个代理类</p></li><li><p>多个被代理类，则仍会出现<code>冗余</code>代码</p></li></ol><h2 id="JDK-动态代理"><a href="#JDK-动态代理" class="headerlink" title="JDK 动态代理"></a>JDK 动态代理</h2><blockquote><p>jdk 动态代理是基于接口实现的，也就是代理类和被代理类要实现共同的接口</p></blockquote><p>利用 <code>Proxy</code> 创建代理类对象（被代理的类一定要实现某个接口），代理类通过实现 <code>InvocationHandler</code> 接口的增强器，通过执行 <code>invoke</code> 方法来增强被代理的方法</p><p><strong>厨师</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cook</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Restaurant</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cooking</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是厨师：我负责做菜&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>厨师代理类处理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CookInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;点菜&quot;</span>);<br><br>        <span class="hljs-comment">// 被代理类对象</span><br>        Cook cook = <span class="hljs-keyword">new</span> Cook();<br>        method.invoke(cook,args);<br><br>        System.out.println(<span class="hljs-string">&quot;上菜&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>测试代理类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jdk.proxy;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestCookProxyInvocation</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        Cook cook = <span class="hljs-keyword">new</span> Cook();<br><br>        Restaurant restaurantProxy = (Restaurant)Proxy.newProxyInstance(cook.getClass().getClassLoader(), cook.getClass().getInterfaces(), <span class="hljs-keyword">new</span> CookInvocationHandler());<br>        restaurantProxy.cooking();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>newProxyInstance 方法：</strong></p><p>参数1：被代理类的类类加载器<br>参数2：被代理类实现的接口列表<br>参数3：实现 <code>InvocationHanler</code> 接口的调用处理器，代理类增强方法实际用功处</p><p><strong>完</strong></p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态代理</tag>
      
      <tag>Proxy</tag>
      
      <tag>InvocationHandler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/Java%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/Java%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><ul><li><p>通常情况下，集合中可以存放不同类型的对象，是因为将所有对象当做 Object 类型放入的，因此从集合中取出元素时也是 Object 类型，为了表达该元素真实的数据类型，则需要强制类型转换，而强制类型转换可能会引发类型转换异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">List lt1 = <span class="hljs-keyword">new</span> LinkedList();<br><br>lt1.add(<span class="hljs-string">&quot;jack&quot;</span>);<br>lt1.add(<span class="hljs-number">123</span>);<br>lt1.add(<span class="hljs-keyword">true</span>);<br><br><span class="hljs-keyword">for</span> (Object o : lt1) &#123;<br>    String s1 = (String) o;<br>    System.out.println(s1);<br>&#125;<br><br>异常提醒：<br>java.lang.Integer cannot be cast to java.lang.String<br></code></pre></td></tr></table></figure></li><li><p>为了避免上述错误的发生，从 Java5 开始增加泛型机制，也就是在集合名称的右侧使用<code>&lt;数据类型&gt;</code>的方式来明确要求该集合中可以存放的元素类型，若放入其它类型的元素则编译报错。</p></li><li><p>泛型只在编译期有效，在运行时期不区分是什么类型。</p></li></ul><h2 id="2-底层原理"><a href="#2-底层原理" class="headerlink" title="2. 底层原理"></a>2. 底层原理</h2><ul><li><p>泛型的本质就是<code>参数化类型</code>，也就是让数据类型作为参数传递，其中 E 相当于形式参数负责占位，而使用集合时<code>&lt;&gt;</code>中的数据类型相当于实际参数，用于给形式参数 E 进行初始化，从而使得集合中所有的 E 被实际参数替换，由于实际参数可以传递各种各样广泛的数据类型，因此得名为泛型。</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 其中 i 叫做形式参数，负责占位</span><br><span class="hljs-comment">// int i = 10;</span><br><span class="hljs-comment">// int i = 20;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    ...<br>&#125;<br><span class="hljs-comment">// 其中 10 叫做实际参数，负责给形式参数初始化</span><br>show(<span class="hljs-number">10</span>);<br>show(<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 其中 E 叫做形式参数，负责占位</span><br><span class="hljs-comment">// E = String;</span><br><span class="hljs-comment">// E = Integer;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">E</span>&gt;</span>&#123;<br>    ...<br>&#125;<br><span class="hljs-comment">// 其中 String 叫做实际参数</span><br>List&lt;String&gt; lt1 = ...;<br>List&lt;Integer&gt; lt2 = ...;<br></code></pre></td></tr></table></figure></li></ul><h2 id="3-自定义泛型接口"><a href="#3-自定义泛型接口" class="headerlink" title="3. 自定义泛型接口"></a>3. 自定义泛型接口</h2><p>泛型接口和普通接口的区别就是后面添加了类型参数列表，可以有多个类型参数，如：&lt;E,T…&gt;等。</p><h2 id="4-自定义泛型类"><a href="#4-自定义泛型类" class="headerlink" title="4. 自定义泛型类"></a>4. 自定义泛型类</h2><ul><li><p>泛型类型和普通类型的区别就是类名后面添加了类型参数列表，可以有多个类型参数，如&lt;E,T…&gt;等。</p></li><li><p>实例化泛型类时应该指定具体的数据类型，并且是引用数据类型，而不是基本数据类型</p><p>自定义泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> T gender;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, T gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">getGender</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGender</span><span class="hljs-params">(T gender)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, gender=&quot;</span> + gender +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用泛型类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 限制类型，gender 被限制为 String 类型</span><br>Person&lt;String&gt; p1 = <span class="hljs-keyword">new</span> Person&lt;&gt;(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>System.out.println(p1);<br><br><span class="hljs-comment">// 未限制类型的使用，gender 仍被当做 Object 类型</span><br>Person p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;jack&quot;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>System.out.println(p2);<br></code></pre></td></tr></table></figure></li><li><p>父类有泛型，子类可以选择保留泛型，也可以指定泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不保留父类的泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubPerson</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// 指定父类泛型类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubPerson</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// 保留父类泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubPerson</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>子类除了保留和指定父类的泛型外，还可以增加自己的泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 保留父类泛型的同时，新增自己的泛型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubPerson</span>&lt;<span class="hljs-title">T</span>,<span class="hljs-title">K</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-自定义泛型方法"><a href="#5-自定义泛型方法" class="headerlink" title="5. 自定义泛型方法"></a>5. 自定义泛型方法</h2><ul><li><p>泛型方法就是我们输入参数的时候，输入的是泛型参数，而不是具体类型的参数。我们在调用这个泛型方法的时候需要对泛型参数进行示例化。</p></li><li><p>泛型方法的格式：</p><p>[访问权限] &lt;泛型&gt; 返回值类型 方法名([泛型标识符 参数名称]){方法体;}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">(T t)</span></span>&#123;<br>    ...<br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">String <span class="hljs-title">printName</span><span class="hljs-params">(T t)</span></span>&#123;<br>    ...<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xxx&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在静态方法中使用泛型参数的时候，需要我们把静态方法定义成泛型方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printName</span><span class="hljs-params">(T t)</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="6-泛型在继承上的体现"><a href="#6-泛型在继承上的体现" class="headerlink" title="6. 泛型在继承上的体现"></a>6. 泛型在继承上的体现</h2><ul><li><p>如果 B 是 A 的一个子类或接口，而 G 是具有泛型声明的类或接口，则 G<B> 并不是 G<A> 的子类型！</p><p>比如：String 是 Object 的子类，但 List<String> 并不是 List<Object> 的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; lt1 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>List&lt;Object&gt; lt2 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>lt2 = lt1; <span class="hljs-comment">// 错误 ×</span><br><br><br>String s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br><br>Object s2 = <span class="hljs-string">&quot;1234&quot;</span>;<br>       <br>s2 = s1;<span class="hljs-comment">// 正确 √</span><br></code></pre></td></tr></table></figure></li><li><p>需要使用通配符来确定父子类型</p><ul><li>List&lt;?&gt; 是 List&lt;? extends Number&gt; 的父类型</li><li>List&lt;? extends Number&gt; 是 List&lt; Integer &gt; 的父类型</li></ul></li></ul><h2 id="7-通配符的使用"><a href="#7-通配符的使用" class="headerlink" title="7. 通配符的使用"></a>7. 通配符的使用</h2><ul><li><p>有时候我们希望传入的类型在一个指定的范围内，此时就可以使用泛型通配符了。</p><p>如：之前传入的类型要求为 Integer 类型，但是后来业务需要 Integer 的父类 Number 类也可以传入</p></li><li><p>泛型通配符有三种形式：（限定存入的类型，根据父类引用指向子类对象，通常当做方法参数使用）</p><ul><li><?> 无限制通配符：表示我们可以传入任意类型不支持添加元素，因为可以存放任意类型，如果允许添加，则编译器无法知道即将放入的到底是什么类型，可能会出现类型强转异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;?&gt; lt5 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>lt5.add(<span class="hljs-string">&quot;jack&quot;</span>);<span class="hljs-comment">// 错误 ×，</span><br>lt5.get(<span class="hljs-number">0</span>);<span class="hljs-comment">// 正确 √</span><br></code></pre></td></tr></table></figure></li><li><? extends E> 表示类型的上界是 E，只能是 E 或者 E 的子类不支持添加元素，因为允许的类型是 E 或 E的子类，父类引用可以指向子类，子类不可以指向父类，所以这里面不确定放入的是哪个子类，也可能会出现类型强转异常<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? extends Person&gt; lt6 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>lt6.add(<span class="hljs-keyword">new</span> Person());<span class="hljs-comment">// 错误 ×，这里的 ? 如果是代表 SubPerson</span><br>lt6.add(<span class="hljs-keyword">new</span> SubPerson());<span class="hljs-comment">// 错误 ×，这里的 ? 如果是 SubPerson 的子类</span><br>lt6.get(<span class="hljs-number">0</span>);<span class="hljs-comment">// 正确 √</span><br></code></pre></td></tr></table></figure></li><li><? super E> 表示类型的下界是 E，只能是 E 或 E 的父类支持添加元素，这里存入的是 E 或 E 的父类，最小就是 E，那么凡事可以用 E 指向的类型都可以存放（还是父类引用指向子类对象）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">super</span> Person&gt; lt7 = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>lt7.add(<span class="hljs-keyword">new</span> Person());<span class="hljs-comment">// 正确 √，这里的 ? 是 Person 或 Person 父类</span><br>lt7.add(<span class="hljs-keyword">new</span> SubPerson());<span class="hljs-comment">// 正确 √，这里的 ? 是 Person 或 Person 父类</span><br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>泛型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式搜索引擎-ElasticSearch</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/ElasticSearch/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h2 id="1-如果不用会怎么样"><a href="#1-如果不用会怎么样" class="headerlink" title="1. 如果不用会怎么样"></a>1. 如果不用会怎么样</h2><p>目前搜索的弊端（直接查数据库）：</p><ul><li>空格支持 <font color="red">x</font></li><li>拆词查询 <font color="red">×</font></li><li>搜索内容高亮 <font color="red">× </font></li><li>海量数据查询 <font color="red">×</font></li></ul><h2 id="2-什么是分布式搜索引擎"><a href="#2-什么是分布式搜索引擎" class="headerlink" title="2. 什么是分布式搜索引擎"></a>2. 什么是分布式搜索引擎</h2><h3 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h3><ol><li>首先是搜索引擎</li><li>其次支持分布式存储与搜索</li></ol><h3 id="2-2-Lucene-vs-Solr-vs-ElasticSearch"><a href="#2-2-Lucene-vs-Solr-vs-ElasticSearch" class="headerlink" title="2.2 Lucene vs Solr  vs ElasticSearch"></a>2.2 Lucene vs Solr  vs ElasticSearch</h3><ol><li><p>Lucene 是类库：</p><ul><li>基于 java 的全文搜索引擎，它不是一个应用程序，它是一个代码库或者是一些 api 供我们调用的，本质上就是一个 jar 包，可以直接被引用（导入）到项目中去，然后调用它的 api 进行搜索集成</li><li>只能使用 java 进行整合，水平扩展集群的话比较复杂</li></ul></li><li><p>Solr 是基于 Lucene 构建的开源搜索引擎：</p><ul><li>本质上是对 Lucene 进行了一层封装，是 Apache 的一个开源项目，使用 java 开发的，可以独立部署到 Tomcat 或 jetty 中</li><li>可以通过 zookeeper 实现集群部署</li><li>提供分布式索引、负载均衡、自动故障转移恢复，可靠性、可扩展性和容错性都挺好</li></ul></li><li><p>ElasticSearch 也是基于 Lucene：</p><ul><li><p>分布式搜索引擎</p></li><li><p>restful 风格接口，支持不同开发语言调用</p></li><li><p>近实时的搜索服务</p></li><li><p>支持 PB（1024 T） 级别的搜索</p></li><li><p>大数据的分析</p></li></ul></li></ol><h2 id="3-ES-核心术语"><a href="#3-ES-核心术语" class="headerlink" title="3. ES 核心术语"></a>3. ES 核心术语</h2><ol><li>索引 index：        表</li><li><del>类型 type：         表逻辑类型</del></li><li>文档 document：行</li><li>字段 fields：        列</li><li>映射 mapping      表结构定义</li><li>近实时 NRT         Near real time</li><li>节点 node           每一台服务器都是一个节点</li><li>shard replica       数据分片与备份</li></ol><p><code>提示：</code> type 已在 ES 7.x 后废弃！</p><h2 id="4-什么是倒排索引"><a href="#4-什么是倒排索引" class="headerlink" title="4. 什么是倒排索引"></a>4. 什么是倒排索引</h2><p>需求：在 30 份文档中找出其中包含“张三”的文档，通常来说我们会根据把文档排序，然后依次遍历来判断当前遍历到的文档中是否包含“张三”，这种查找方式就是根据“文档id” -&gt; “文档内容”的对应关系依次判断文档内容是否包含“张三“，如果存在一张”张三“-&gt;”文档”的映射关系，我们可以直接根据张三来获取到满足条件的文档，这就是两种不同的方式进行索引：</p><p>正序：根据文档来确定文档中的内容</p><p>倒排：文档中的内容到文档的映射，这种就叫做倒排索引</p><h2 id="5-安装-ElasticSearch"><a href="#5-安装-ElasticSearch" class="headerlink" title="5. 安装 ElasticSearch"></a>5. 安装 ElasticSearch</h2><ol><li><p>下载安装包，<a href="https://www.elastic.co/cn/downloads/elasticsearch">传送门</a></p></li><li><p>上传安装包到 linux 服务器，目录 <code>/home/software</code></p></li><li><p>解压文件到目录<code>/usr/local</code>，tar -zxvf xxx.tar </p></li><li><p>es文件目录结构：</p><ul><li><strong>bin</strong>：可执行文件，例如启动 es 的脚本文件就在这里</li><li><strong>config</strong>：配置问价存放位置<ul><li>elasticsearch.yml：核心配置文件</li><li>jvm.options</li><li>log4j2.properties</li><li>role_mapping.yml</li><li>roles.yml</li><li>users</li><li>users_rolse</li></ul></li><li><strong>jdk</strong>：依赖的 java 环境</li><li><strong>lib</strong>：依赖的一些类库</li><li>LINCENSE.txt</li><li><strong>logs</strong>：日志文件</li><li><strong>modules</strong>：跟 es 有关的模块</li><li>NOTICE.txt</li><li><strong>plugins</strong>：插件存放位置，包括自定义的</li><li>README.textile</li></ul></li><li><p>在 es 文件目录中新建 data 目录，数据目录，后续的索引存放位置</p></li><li><p>修改核心配置文件 <strong>elasticsearch.yml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yam"># 集群名称<br>cluster.name: fengjian-elasticsearch<br><br># 节点名称<br>node.name: es-node1<br><br># 数据路径<br>path.data: /usr/local/elasticsearch-7.4.2/data<br><br># 日志路径<br>path.logs: /usr/local/elasticsearch-7.4.2/logs<br><br># 网络地址绑定<br>network.host: 0.0.0.0<br><br># http 端口号<br>http.port: 9200<br><br># 集群启动时初始化节点列表<br>cluster.initial_master_nodes:[&quot;es-node1&quot;]<br><br></code></pre></td></tr></table></figure></li><li><p>修改 <strong>jvm.options</strong> 配置项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yam"># Xms 初始化堆空间<br># Xmx 最大堆空间<br>-Xms128m<br>-Xmx128m<br></code></pre></td></tr></table></figure></li><li><p>启动 ElasticSearch</p><ul><li><p><code>提示：</code>：root 用户是无法启动 es 的，需要创建一个新用户！    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs she"># 添加用户<br>useradd esuser<br><br># 授权 1<br>chown -R esuser /usr/local/elasticsearch-7.4.2<br><br># 切换用户<br>su esuser<br><br># 授权 2，elasticsearch.keystore accessDenied!<br>chown -R esuser:esuser /usr/local/elasticsearch-7.4.2<br><br><br></code></pre></td></tr></table></figure></li><li><p>启动，./elasticsearch 或 ./elasticsearch（后台启动）</p><ul><li>异常 1：max file descriptors [4096]  -&gt; [65535]</li><li>异常 2：max number of threads [3756]  -&gt; [4096]</li><li>异常 3：max virtual memory areas vm.max_map_count [65530]  -&gt; [262144]</li></ul></li><li><p>修改配置 vim /etc/security/limits.conf，文件最后新增如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">* soft nofile 65536<br>* hard nofile 131072<br>* soft nproc 2048<br>* hard nproc 4096<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件 vim /etc/sysctl.conf，文件最后新增如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">vm.max_map_count=262145<br></code></pre></td></tr></table></figure><p>编译文件：sysctl -p</p></li><li><p>启动成功，浏览器中访问 192.168.12.23:9200 查看信息</p></li><li><p>关闭的话，jps elasticsearch 查看进程 id 后 kill id</p></li></ul><p><strong>提示</strong>：如果在网页上显示localhost未发送任何数据，修改配置文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yam">xpack.security.enable: false<br><br>xpack.security.http.ssl:<br>enabled: false<br></code></pre></td></tr></table></figure></li></ol><h2 id="6-安装-elasticsearch-head-插件"><a href="#6-安装-elasticsearch-head-插件" class="headerlink" title="6. 安装 elasticsearch-head 插件"></a>6. 安装 elasticsearch-head 插件</h2><h3 id="6-1-chrome-中谷歌市场中搜索-elasticsearch-进行安装即可"><a href="#6-1-chrome-中谷歌市场中搜索-elasticsearch-进行安装即可" class="headerlink" title="6.1 chrome 中谷歌市场中搜索 elasticsearch 进行安装即可"></a>6.1 chrome 中谷歌市场中搜索 elasticsearch 进行安装即可</h3><p>   <img src="https://s3.bmp.ovh/imgs/2023/02/13/55aface0b2e180da.png"></p><h3 id="6-2-head-与-postman-基本操作"><a href="#6-2-head-与-postman-基本操作" class="headerlink" title="6.2  head 与 postman 基本操作"></a>6.2  head 与 postman 基本操作</h3><ol><li><p>版本信息查询</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/aeaf0be9dec3cb47.png" alt="image-20230215103432717"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">   GET http:<span class="hljs-comment">//192.168.X.X:9200/</span><br><br><span class="hljs-number">2.</span> 集群健康查询<br><br>   ![image<span class="hljs-number">-20230215101655801</span>](https:<span class="hljs-comment">//s3.bmp.ovh/imgs/2023/02/15/d0972558c7fcc4b8.png)</span><br><br>   ```json<br>   GET http:<span class="hljs-comment">//192.168.X.X:9200/_cluster/health</span><br></code></pre></td></tr></table></figure></li><li><p>新建索引：5 个分片，0 个副本</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/8d31a4573d3d9e8b.png" alt="image-20230215131749500"></p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/d611cd6d6a89bd5f.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT http:<span class="hljs-comment">//192.168.x.x:9200/index_demo</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;settings&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span>:<span class="hljs-number">5</span>,<br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span>:<span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建索引：5 个分片，1 个副本，未分配分片有 5 个</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/d22f2d842d3e9f41.png" alt="image-20230215135509191"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT http:<span class="hljs-comment">//192.168.x.x:9200/index_123</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;settings&quot;</span>:&#123;<br>        <span class="hljs-attr">&quot;number_of_shards&quot;</span>:<span class="hljs-number">5</span>,<br>        <span class="hljs-attr">&quot;number_of_replicas&quot;</span>:<span class="hljs-number">1</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>删除索引：</p><p><img src="https://s3.bmp.ovh/imgs/2023/02/15/3fe5fe90dce805d4.png" alt="image-20230215141019148"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE http:<span class="hljs-comment">//192.168.x.x:9200/index_123</span><br></code></pre></td></tr></table></figure></li><li><p>查询索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs json">GET http:<span class="hljs-comment">//192.168.x.x:9200/index_temp</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;index_temp&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;aliases&quot;</span>: &#123;&#125;,<br>        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;&#125;,<br>        <span class="hljs-attr">&quot;settings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;index&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;routing&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;allocation&quot;</span>: &#123;<br>                        <span class="hljs-attr">&quot;include&quot;</span>: &#123;<br>                            <span class="hljs-attr">&quot;_tier_preference&quot;</span>: <span class="hljs-string">&quot;data_content&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                <span class="hljs-attr">&quot;number_of_shards&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>                <span class="hljs-attr">&quot;provided_name&quot;</span>: <span class="hljs-string">&quot;index_temp&quot;</span>,<br>                <span class="hljs-attr">&quot;creation_date&quot;</span>: <span class="hljs-string">&quot;1676441762678&quot;</span>,<br>                <span class="hljs-attr">&quot;number_of_replicas&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>,<br>                <span class="hljs-attr">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;ryzEGgNIS3ycfWfV-lhaOQ&quot;</span>,<br>                <span class="hljs-attr">&quot;version&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;created&quot;</span>: <span class="hljs-string">&quot;7160099&quot;</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>查询全部索引概览</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">GET http:<span class="hljs-comment">//192.168.147.132:9200/_cat/indices?v</span><br><br>health status index            uuid                   pri rep docs.count docs.deleted store.size pri.store.size<br>green  open   .geoip_databases aqUccqm1RzCvrVBSqK6xfg   <span class="hljs-number">1</span>   <span class="hljs-number">0</span>         <span class="hljs-number">41</span>           <span class="hljs-number">36</span>     <span class="hljs-number">42.3</span>mb         <span class="hljs-number">42.3</span>mb<br>green  open   index_demo       h7rxnFLDTkOcGreaIBIiEw   <span class="hljs-number">5</span>   <span class="hljs-number">0</span>          <span class="hljs-number">0</span>            <span class="hljs-number">0</span>      <span class="hljs-number">1.1</span>kb          <span class="hljs-number">1.1</span>kb<br>green  open   index_temp       ryzEGgNIS3ycfWfV-lhaOQ   <span class="hljs-number">3</span>   <span class="hljs-number">0</span>          <span class="hljs-number">0</span>            <span class="hljs-number">0</span>       <span class="hljs-number">678</span>b           <span class="hljs-number">678</span>b<br><br></code></pre></td></tr></table></figure></li></ol><h2 id="7-mappings-索引数据结构定义"><a href="#7-mappings-索引数据结构定义" class="headerlink" title="7. mappings 索引数据结构定义"></a>7. mappings 索引数据结构定义</h2><h3 id="7-1-新建索引并设置-mapping"><a href="#7-1-新建索引并设置-mapping" class="headerlink" title="7.1 新建索引并设置 mapping"></a>7.1 新建索引并设置 mapping</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT http:<span class="hljs-comment">//192.168.147.132:9200/index_mapping</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;realname&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,<br>                <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">true</span><br>            &#125;,<br>            <span class="hljs-attr">&quot;username&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>realname：字段名    type：类型    index：是否被索引</p><table><thead><tr><th align="center">type</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">字符串，可被分词</td></tr><tr><td align="center">keyword</td><td align="center">字符串，不可被分词</td></tr><tr><td align="center">long</td><td align="center">长整型</td></tr><tr><td align="center">integer</td><td align="center">整型</td></tr><tr><td align="center">float</td><td align="center">浮点型</td></tr><tr><td align="center">true</td><td align="center">布尔型</td></tr><tr><td align="center">byte</td><td align="center">字节</td></tr><tr><td align="center">boolean</td><td align="center">短整型</td></tr><tr><td align="center">date</td><td align="center">日期类型</td></tr><tr><td align="center">object</td><td align="center">对象类型</td></tr><tr><td align="center">double</td><td align="center">浮点数</td></tr><tr><td align="center">[1,2,3]</td><td align="center">数组类型</td></tr></tbody></table><p>index：是否被索引（查询）</p><p>keyword：无法被分词</p><h3 id="7-2-索引分词"><a href="#7-2-索引分词" class="headerlink" title="7.2 索引分词"></a>7.2 索引分词</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">GET http:<span class="hljs-comment">//192.168.147.132:9200/index_mapping/_analyze</span><br><br>&#123;<br>    <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;username&quot;</span>,<br>    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;good good study,day day up!&quot;</span><br>&#125;<br><br>&#123;<br>    <span class="hljs-attr">&quot;tokens&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;good good study,day day up!&quot;</span>,<br>            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">27</span>,<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;word&quot;</span>,<br>            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-新增-mapping-中-properties"><a href="#7-3-新增-mapping-中-properties" class="headerlink" title="7.3 新增 mapping 中 properties"></a>7.3 新增 mapping 中 properties</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">POST http:<span class="hljs-comment">//192.168.147.132:9200/index_mapping/_mapping</span><br>&#123;<br>    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;id&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;long&quot;</span>,<br>            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">true</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;age&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;integer&quot;</span>,<br>            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-文档的基本操作"><a href="#8-文档的基本操作" class="headerlink" title="8. 文档的基本操作"></a>8. 文档的基本操作</h2><h3 id="8-1-新建索引-my-doc，分片-1，副本-0"><a href="#8-1-新建索引-my-doc，分片-1，副本-0" class="headerlink" title="8.1 新建索引 my_doc，分片 1，副本 0"></a>8.1 新建索引 my_doc，分片 1，副本 0</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">PUT http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.x.x:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<br><br>&#123;<br>    &quot;settings&quot;:&#123;<br>        &quot;number_of_shards&quot;:<span class="hljs-number">1</span>,<br>        &quot;number_of_replicas&quot;:<span class="hljs-number">0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-新增文档信息"><a href="#8-2-新增文档信息" class="headerlink" title="8.2 新增文档信息"></a>8.2 新增文档信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sql">POST http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span><span class="hljs-number">.147</span><span class="hljs-number">.132</span>:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><br><br>&#123;<br>    &quot;id&quot;:<span class="hljs-number">1001</span>,<br>    &quot;name&quot;:&quot;jack&quot;,<br>    &quot;age&quot;:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 新增成功<br>&#123;<br>    &quot;_index&quot;: &quot;my_doc&quot;,<br>    &quot;_type&quot;: &quot;_doc&quot;,<br>    &quot;_id&quot;: &quot;FCRSVYYB_DJayXIYu1rV&quot;,<br>    &quot;_version&quot;: <span class="hljs-number">1</span>,<br>    &quot;result&quot;: &quot;created&quot;,<br>    &quot;_shards&quot;: &#123;<br>        &quot;total&quot;: <span class="hljs-number">1</span>,<br>        &quot;successful&quot;: <span class="hljs-number">1</span>,<br>        &quot;failed&quot;: <span class="hljs-number">0</span><br>    &#125;,<br>    &quot;_seq_no&quot;: <span class="hljs-number">6</span>,<br>    &quot;_primary_term&quot;: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> <span class="hljs-number">1</span> 是文档 id，可自定义，可系统生成，通过 es<span class="hljs-operator">-</span>head 查看文档<br><br>&quot;mappings&quot;: &#123;<br>    &quot;_doc&quot;: &#123;<br>        &quot;properties&quot;: &#123;<br>            &quot;name&quot;: &#123;<br>                &quot;type&quot;: &quot;text&quot;,<br>                &quot;fields&quot;: &#123;<br>                    &quot;keyword&quot;: &#123;<br>                        &quot;ignore_above&quot;: <span class="hljs-number">256</span>,<br>                        &quot;type&quot;: &quot;keyword&quot;<br>                    &#125;<br>                &#125;<br>            &#125;,<br>            &quot;id&quot;: &#123;<br>                &quot;type&quot;: &quot;long&quot;<br>            &#125;,<br>            &quot;age&quot;: &#123;<br>                &quot;type&quot;: &quot;long&quot;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-删除文档"><a href="#8-3-删除文档" class="headerlink" title="8.3 删除文档"></a>8.3 删除文档</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.X.X:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="8-4-修改文档-局部修改"><a href="#8-4-修改文档-局部修改" class="headerlink" title="8.4 修改文档-局部修改"></a>8.4 修改文档-局部修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.X.X:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><span class="hljs-operator">/</span>_update<br><br>&#123;<br>    &quot;doc&quot;:&#123;<br>        &quot;name&quot;:&quot;春风得意马蹄疾啊&quot; <span class="hljs-operator">/</span><span class="hljs-operator">/</span> 指定修改内容<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-5-修改文档-全量修改"><a href="#8-5-修改文档-全量修改" class="headerlink" title="8.5 修改文档-全量修改"></a>8.5 修改文档-全量修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">PUT http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.X.X:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><br><br>&#123;<br>    &quot;id&quot;: <span class="hljs-number">1005</span>,<br>    &quot;name&quot;: &quot;春风得意马蹄疾&quot;,<br>    &quot;age&quot;: <span class="hljs-number">20</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-6-查询文档根据文档-id"><a href="#8-6-查询文档根据文档-id" class="headerlink" title="8.6 查询文档根据文档 id"></a>8.6 查询文档根据文档 id</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.x.x:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span><br><br>&#123;<br>    &quot;_index&quot;: &quot;my_doc&quot;,<br>    &quot;_type&quot;: &quot;_doc&quot;,<br>    &quot;_id&quot;: &quot;1&quot;,<br>    &quot;_version&quot;: <span class="hljs-number">5</span>,<br>    &quot;_seq_no&quot;: <span class="hljs-number">11</span>,<br>    &quot;_primary_term&quot;: <span class="hljs-number">1</span>,<br>    &quot;found&quot;: <span class="hljs-literal">true</span>,<br>    &quot;_source&quot;: &#123;<br>        &quot;id&quot;: <span class="hljs-number">1005</span>,<br>        &quot;name&quot;: &quot;春风得意马蹄疾&quot;,<br>        &quot;age&quot;: <span class="hljs-number">20</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-7-查询全部"><a href="#8-7-查询全部" class="headerlink" title="8.7 查询全部"></a>8.7 查询全部</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.x.x:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search<br><br>&#123;<br>    &quot;took&quot;: <span class="hljs-number">4</span>,<br>    &quot;timed_out&quot;: <span class="hljs-literal">false</span>,<br>    &quot;_shards&quot;: &#123;<br>        &quot;total&quot;: <span class="hljs-number">1</span>,<br>        &quot;successful&quot;: <span class="hljs-number">1</span>,<br>        &quot;skipped&quot;: <span class="hljs-number">0</span>,<br>        &quot;failed&quot;: <span class="hljs-number">0</span><br>    &#125;,<br>    &quot;hits&quot;: &#123;<br>        &quot;total&quot;: &#123;<br>            &quot;value&quot;: <span class="hljs-number">4</span>,<br>            &quot;relation&quot;: &quot;eq&quot;<br>        &#125;,<br>        &quot;max_score&quot;: <span class="hljs-number">1.0</span>,<br>        &quot;hits&quot;: [<br>            &#123;<br>                &quot;_index&quot;: &quot;my_doc&quot;,<br>                &quot;_type&quot;: &quot;_doc&quot;,<br>                &quot;_id&quot;: &quot;3&quot;,<br>                &quot;_score&quot;: <span class="hljs-number">1.0</span>,<br>                &quot;_source&quot;: &#123;<br>                    &quot;id&quot;: <span class="hljs-number">1003</span>,<br>                    &quot;name&quot;: &quot;风间&quot;,<br>                    &quot;age&quot;: <span class="hljs-number">19</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                &quot;_index&quot;: &quot;my_doc&quot;,<br>                &quot;_type&quot;: &quot;_doc&quot;,<br>                &quot;_id&quot;: &quot;FCRSVYYB_DJayXIYu1rV&quot;,<br>                &quot;_score&quot;: <span class="hljs-number">1.0</span>,<br>                &quot;_source&quot;: &#123;<br>                    &quot;id&quot;: <span class="hljs-number">1004</span>,<br>                    &quot;name&quot;: &quot;一日看尽长安花&quot;,<br>                    &quot;age&quot;: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                &quot;_index&quot;: &quot;my_doc&quot;,<br>                &quot;_type&quot;: &quot;_doc&quot;,<br>                &quot;_id&quot;: &quot;FSRWVYYB_DJayXIY8Voz&quot;,<br>                &quot;_score&quot;: <span class="hljs-number">1.0</span>,<br>                &quot;_source&quot;: &#123;<br>                    &quot;id&quot;: <span class="hljs-number">1005</span>,<br>                    &quot;name&quot;: &quot;春风得意马蹄疾啊&quot;,<br>                    &quot;age&quot;: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                &quot;_index&quot;: &quot;my_doc&quot;,<br>                &quot;_type&quot;: &quot;_doc&quot;,<br>                &quot;_id&quot;: &quot;1&quot;,<br>                &quot;_score&quot;: <span class="hljs-number">1.0</span>,<br>                &quot;_source&quot;: &#123;<br>                    &quot;id&quot;: <span class="hljs-number">1005</span>,<br>                    &quot;name&quot;: &quot;春风得意马蹄疾&quot;,<br>                    &quot;age&quot;: <span class="hljs-number">20</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-8-根据-id-查询，设置-source-查询字段，多个字段逗号隔开"><a href="#8-8-根据-id-查询，设置-source-查询字段，多个字段逗号隔开" class="headerlink" title="8.8 根据 id 查询，设置 source 查询字段，多个字段逗号隔开"></a>8.8 根据 id 查询，设置 source 查询字段，多个字段逗号隔开</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.x.x:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">1</span>?_source<span class="hljs-operator">=</span>name<br><br>&#123;<br>    &quot;_index&quot;: &quot;my_doc&quot;,<br>    &quot;_type&quot;: &quot;_doc&quot;,<br>    &quot;_id&quot;: &quot;1&quot;,<br>    &quot;_version&quot;: <span class="hljs-number">5</span>,<br>    &quot;_seq_no&quot;: <span class="hljs-number">11</span>,<br>    &quot;_primary_term&quot;: <span class="hljs-number">1</span>,<br>    &quot;found&quot;: <span class="hljs-literal">true</span>,<br>    &quot;_source&quot;: &#123;<br>        &quot;name&quot;: &quot;春风得意马蹄疾&quot;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-9-查询全部，设置-source-查询字段，多个逗号隔开"><a href="#8-9-查询全部，设置-source-查询字段，多个逗号隔开" class="headerlink" title="8.9 查询全部，设置 source 查询字段，多个逗号隔开"></a>8.9 查询全部，设置 source 查询字段，多个逗号隔开</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GET</span> http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span>.x.x:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span>_search?source<span class="hljs-operator">=</span>name<br></code></pre></td></tr></table></figure><h3 id="8-10-HEAD-方式查询文档，根据状态码判断数据是否存在（节省传输效率）"><a href="#8-10-HEAD-方式查询文档，根据状态码判断数据是否存在（节省传输效率）" class="headerlink" title="8.10 HEAD 方式查询文档，根据状态码判断数据是否存在（节省传输效率）"></a>8.10 HEAD 方式查询文档，根据状态码判断数据是否存在（节省传输效率）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">HEAD http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">192.168</span><span class="hljs-number">.147</span><span class="hljs-number">.132</span>:<span class="hljs-number">9200</span><span class="hljs-operator">/</span>my_doc<span class="hljs-operator">/</span>_doc<span class="hljs-operator">/</span><span class="hljs-number">11</span><br><br>存在：<span class="hljs-number">200</span><br>不存在：<span class="hljs-number">404</span><br></code></pre></td></tr></table></figure><h3 id="8-11-文档乐观锁控制"><a href="#8-11-文档乐观锁控制" class="headerlink" title="8.11 文档乐观锁控制"></a>8.11 文档乐观锁控制</h3><h2 id="番外：mac-多机器克隆修改项"><a href="#番外：mac-多机器克隆修改项" class="headerlink" title="番外：mac 多机器克隆修改项"></a>番外：mac 多机器克隆修改项</h2><ol><li>安装虚机，启动进入</li><li>ipaddr 搜索 link/ether 拷贝 Mac 地址备用</li><li>修改 /etc/udev/rules.d/70-persistent0ipoib.rules<ul><li>修改 ACTION==”add” 这一行 address，粘贴 mac 地址，保存</li></ul></li><li>修改ip地址，打开  /etc/sysconfig/network-scripts/ifcfg-ens33 <ul><li>IPADDR 改成网段的任意静态 ip 即可</li><li>HWADDR=”” 改成备用的物理地址</li></ul></li><li>重启计算机或者使用 service network restart</li><li>验证 ipaddr</li><li>修改虚机名和 secureCRT 连接名</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>搜索引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搜索引擎</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BigDecimal 舍入模式</title>
    <link href="/2023/05/08/%E5%90%8E%E7%AB%AF/java/BigDecimal%E8%88%8D%E5%85%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/05/08/%E5%90%8E%E7%AB%AF/java/BigDecimal%E8%88%8D%E5%85%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="ROUND-UP：舍入远离-0"><a href="#ROUND-UP：舍入远离-0" class="headerlink" title="ROUND_UP：舍入远离 0"></a>ROUND_UP：舍入远离 0</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Rounding mode to round away from zero. Always increments the digit prior to a nonzero discarded fraction.</span><br><span class="hljs-comment"> * Note that this rounding mode never decreases the magnitude of the calculated value.</span><br><span class="hljs-comment"> * 该模式，远离零，总是在非零丢弃分数之前增加数字，朝远离数轴的方向进位，正数+1，负数-1。（除保留位数后一位为0以外，其它不管正负号，直接进位）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ROUND_UP =  <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);     <span class="hljs-comment">// 6</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);     <span class="hljs-comment">// 2</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);    <span class="hljs-comment">// -2</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_UP=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_UP)</span>);    <span class="hljs-comment">// -6</span><br></code></pre></td></tr></table></figure><h2 id="ROUND-DOWN：舍入靠近-0"><a href="#ROUND-DOWN：舍入靠近-0" class="headerlink" title="ROUND_DOWN：舍入靠近 0"></a>ROUND_DOWN：舍入靠近 0</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Rounding mode to round towards zero. Never increments the digit prior to a discarded fraction (i.e., truncates). </span><br><span class="hljs-comment"> * Note that this rounding mode never increases the magnitude of the calculated value.</span><br><span class="hljs-comment"> * 该模式向零靠近。永远不要在一个被丢弃的分数前增加数字(即截断)。请注意，这种舍入模式不会增加计算值的大小。采用断言式，截断舍弃对应小数位后面的小数，不考虑任何进位。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ROUND_DOWN = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);     <span class="hljs-comment">// 5</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_DOWN=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_DOWN)</span>);    <span class="hljs-comment">// -5</span><br></code></pre></td></tr></table></figure><h2 id="ROUND-CEILING：向上（正数方向）舍入"><a href="#ROUND-CEILING：向上（正数方向）舍入" class="headerlink" title="ROUND_CEILING：向上（正数方向）舍入"></a>ROUND_CEILING：向上（正数方向）舍入</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Rounding mode to round towards positive infinity. If the BigDecimal is positive, behaves as for ROUND_UP; if negative, behaves as for ROUND_DOWN. </span><br><span class="hljs-comment"> * Note that this rounding mode never decreases the calculated value.</span><br><span class="hljs-comment"> * 该模式向正无穷四舍五入，是 ROUND_UP 和ROUND_DOWN 的组合，如果 BigDecimal 为正数，则行为与 ROUND_UP 相同；如果 BigDecimal 为负数，则行为与 ROUND_DOWN 相同。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ROUND_CEILING = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);     <span class="hljs-comment">// 6</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);     <span class="hljs-comment">// 2</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_CEILING=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_CEILING)</span>);    <span class="hljs-comment">// -5</span><br><br></code></pre></td></tr></table></figure><h2 id="ROUND-FLOOR：向下（负数方向）舍入"><a href="#ROUND-FLOOR：向下（负数方向）舍入" class="headerlink" title="ROUND_FLOOR：向下（负数方向）舍入"></a>ROUND_FLOOR：向下（负数方向）舍入</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Rounding mode to round towards negative infinity. If the BigDecimal is positive, behave as for ROUND_DOWN; if negative, behave as for ROUND_UP. </span><br><span class="hljs-comment"> * Note that this rounding mode never increases the calculated value.</span><br><span class="hljs-comment"> * 该模式向负无穷四舍五入，也是 ROUND_UP 和 ROUND_DOWN 的组合，但是和ROUND_CEILING 是相反的。如果 BigDecimal 为正数，则行为与 ROUND_DOWN 相同；如果为负数，则行为与 ROUND_UP 相同。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> ROUND_FLOOR = <span class="hljs-number">3</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);     <span class="hljs-comment">// 5</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);     <span class="hljs-comment">// 1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.0&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);    <span class="hljs-comment">// -1</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-1.6&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);    <span class="hljs-comment">// -2</span><br>log.info(<span class="hljs-string">&quot;BigDecimal.ROUND_FLOOR=&#123;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-constructor">BigDecimal(<span class="hljs-string">&quot;-5.5&quot;</span>)</span>.set<span class="hljs-constructor">Scale(0, BigDecimal.ROUND_FLOOR)</span>);    <span class="hljs-comment">// -6</span><br></code></pre></td></tr></table></figure><h2 id="ROUND-HALF-UP：四舍五入"><a href="#ROUND-HALF-UP：四舍五入" class="headerlink" title="ROUND_HALF_UP：四舍五入"></a>ROUND_HALF_UP：四舍五入</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/**<br> * Rounding mode <span class="hljs-keyword">to</span> <span class="hljs-built_in">round</span> towards <span class="hljs-string">&quot;nearest neighbor&quot;</span> unless both neighbors are equidistant, <span class="hljs-keyword">in</span> which case <span class="hljs-built_in">round</span> up. <br> * Behaves <span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span> ROUND_UP <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> discarded fraction <span class="hljs-keyword">is</span> ≥ <span class="hljs-number">0.5</span>; otherwise, behaves <span class="hljs-keyword">as</span> <span class="hljs-keyword">for</span> ROUND_DOWN. <br> * Note <span class="hljs-keyword">that</span> this <span class="hljs-keyword">is</span> <span class="hljs-keyword">the</span> rounding mode <span class="hljs-keyword">that</span> most <span class="hljs-keyword">of</span> us were taught <span class="hljs-keyword">in</span> grade school.<br> * 该模式向“最近的邻居”四舍五入。如果丢弃的分数是≥ <span class="hljs-number">0.5</span>，则行为与ROUND_UP相同;否则，行为与ROUND_DOWN相同。请注意，这是我们大多数人在小学时学过的舍入模式。<br> */<br>public final static int ROUND_HALF_UP = <span class="hljs-number">4</span>;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));     // 6<br>log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));     // 2<br>log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));     // 1<br>log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;-1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));    // -1<br>log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;-1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));    // -2<br>log.info(&quot;BigDecimal.ROUND_HALF_UP=&#123;&#125;&quot;, new BigDecimal(&quot;-5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_UP));    // -6<br></code></pre></td></tr></table></figure><h2 id="ROUND-HALF-DOWN：五舍六入"><a href="#ROUND-HALF-DOWN：五舍六入" class="headerlink" title="ROUND_HALF_DOWN：五舍六入"></a>ROUND_HALF_DOWN：五舍六入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**<br> * Rounding mode to round towards &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case round down. <br> * Behaves as for ROUND_UP if the discarded fraction is &gt; 0.5; otherwise, behaves as for ROUND_DOWN.<br> * 该模式向“最近的邻居”四舍五入。如果丢弃的分数是&gt; 0.5，则行为与ROUND_UP相同；否则，行为与ROUND_DOWN相同，也就是五舍六入<br> */<br>public final static int ROUND_HALF_DOWN = 5;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));     // 5<br>log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));     // 2<br>log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));     // 1<br>log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;-1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));    // -1<br>log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;-1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));    // -2<br>log.info(&quot;BigDecimal.ROUND_HALF_DOWN=&#123;&#125;&quot;, new BigDecimal(&quot;-5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_DOWN));    // -5<br><br></code></pre></td></tr></table></figure><h2 id="ROUND-HALF-EVEN：奇（四舍五入）偶（五舍六入）舍入"><a href="#ROUND-HALF-EVEN：奇（四舍五入）偶（五舍六入）舍入" class="headerlink" title="ROUND_HALF_EVEN：奇（四舍五入）偶（五舍六入）舍入"></a>ROUND_HALF_EVEN：奇（四舍五入）偶（五舍六入）舍入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**<br> * Rounding mode to round towards the &quot;nearest neighbor&quot; unless both neighbors are equidistant, in which case, round towards the even neighbor. <br> * Behaves as for ROUND_HALF_UP if the digit to the left of the discarded fraction is odd; behaves as for ROUND_HALF_DOWN if it&#x27;s even. <br> * Note that this is the rounding mode that minimizes cumulative error when applied repeatedly over a sequence of calculations.<br> * 该模式是 ROUND_HALF_UP 和 ROUND_HALF_DOWN 的组合，但是比较特殊的是，如果被丢弃分数左边的数字是奇数，则行为与ROUND_HALF_UP（四舍五入）相同;如果是偶数，则表现为ROUND_HALF_DOWN（五舍六入）。请注意，在对一系列计算重复应用时，这种舍入模式可以最小化累积误差。<br> */<br>public final static int ROUND_HALF_EVEN = 6;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));     // 6<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;6.5&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));     // 5<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));     // 2<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));     // 1<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;-1.0&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));    // -1<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;-1.6&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));    // -2<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;-5.5&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));    // -6<br>log.info(&quot;BigDecimal.ROUND_HALF_EVEN=&#123;&#125;&quot;, new BigDecimal(&quot;-6.5&quot;).setScale(0, BigDecimal.ROUND_HALF_EVEN));    // -5<br><br></code></pre></td></tr></table></figure><h2 id="ROUND-UNNECESSARY：非必要舍入（固定格式）"><a href="#ROUND-UNNECESSARY：非必要舍入（固定格式）" class="headerlink" title="ROUND_UNNECESSARY：非必要舍入（固定格式）"></a>ROUND_UNNECESSARY：非必要舍入（固定格式）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">/**<br> * Rounding mode to assert that the requested operation has an exact result, hence no rounding is necessary. <br> * If this rounding mode is specified on an operation that yields an inexact result, an ArithmeticException is thrown.<br> * 该模式认为传入的数据一定满足设置的小数模式，因此不需要舍入。如果在产生不精确结果的操作上指定了此舍入模式，则会抛出ArithmeticException。<br> */ <br>public final static int ROUND_UNNECESSARY = 7;<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;5.5&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));     // throw ArithmeticException<br>log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;1.6&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));     // throw ArithmeticException<br>log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;1.0&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));     // 1<br>log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;-1.0&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));    // -1<br>log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;-1.6&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));    // throw ArithmeticException<br>log.info(&quot;BigDecimal.ROUND_UNNECESSARY=&#123;&#125;&quot;, new BigDecimal(&quot;-5.5&quot;).setScale(0, BigDecimal.ROUND_UNNECESSARY));    // throw ArithmeticException<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BigDecimal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PicGo + ImgUrl 图床</title>
    <link href="/2023/05/08/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/PicGo+ImgUrl/"/>
    <url>/2023/05/08/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/PicGo+ImgUrl/</url>
    
    <content type="html"><![CDATA[<blockquote><p>PicGo是一款跨平台图片上传客户端，支持Windows、Linux、MacOS操作系统，支持将图片上传到多个目标，比如ImgURL、SM.MS等图床。</p></blockquote><h2 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h2><ol><li>前往Github：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 根据你的平台下载最新版本安装。  </li><li>前往Node.js官网：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a> 下载最新版Node.js安装（PicGo插件需要） </li><li>退出PicGo并重新打开，在插件设置中搜索“web-uploader”找到下面这个插件进行安装<br><img src="https://img.rss.ink/imgs/2022/04/08/7a96e13c5c3519ce.png" alt="web-uploader"></li></ol><h2 id="获取ImgURL-API"><a href="#获取ImgURL-API" class="headerlink" title="获取ImgURL API"></a>获取ImgURL API</h2><ol><li><p>首先您需要在ImgURL注册一个账号：<a href="https://www.imgurl.org/vip/user">https://www.imgurl.org/vip/user</a> 亦或者其它ImgURL Pro站点均可。</p></li><li><p>注册完毕并登录后在ImgURL用户后台找到API地址/UID/Token三个参数并记录，稍后需要使用<br> <img src="https://img.rss.ink/imgs/2022/04/07/b93817857013e273.png" alt="PicGo参数"></p></li></ol><p>  <strong>tips</strong>: ImgURL地址变更为<code>https://www.imgurl.ink</code></p><h2 id="设置PicGo"><a href="#设置PicGo" class="headerlink" title="设置PicGo"></a>设置PicGo</h2><p>打开PicGo - 图床设置 - 自定义Web图床，填写上一步获取到的API信息，如下图:</p><p><img src="https://img.rss.ink/imgs/2022/04/08/2b47bcaf29f2c2f1.png" alt="设置PicGo"></p><ul><li>API地址：填写ImgURL的API地址，比如：<a href="http://imgurl.rss.ink/api/v2/upload">http://imgurl.rss.ink/api/v2/upload</a></li><li>POST参数名：填写file</li><li>JSON路径：填写data.url</li><li>自定义Body：填写下面的json<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&quot;uid&quot;:&quot;your uid&quot;,&quot;token&quot;:&quot;your token&quot;&#125;<br></code></pre></td></tr></table></figure></li></ul><ol><li>your uid：改成你在ImgURL获取到的UID</li><li>your token：改成你在ImgURL获取到的Token</li></ol><p>然后点击确定进行保存，同时你也可以将其设置为默认图床。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicGo</tag>
      
      <tag>ImgUrl</tag>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bat脚本启动[hexo](https://so.csdn.net/so/search?q=hexo&amp;spm=1001.2101.3001.7020)本地服务器</title>
    <link href="/2023/05/08/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/05/08/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/%E8%87%AA%E5%8A%A8%E8%BF%90%E8%A1%8C%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h2 id="bat脚本启动hexo本地服务器"><a href="#bat脚本启动hexo本地服务器" class="headerlink" title="bat脚本启动hexo本地服务器"></a>bat脚本启动<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>本地服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs she">@echo off<br>E:<br>cd E:\Blog\blog5<br>hexo s<br></code></pre></td></tr></table></figure><h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><p>第一条指令<code>@echo off</code>，关闭回显。<br>第二叫指令<code>E:</code>，切换到博客站点目录所在的盘符，我这里是E盘，<br>第三条指令<code>cd E:\Blog\blog5</code>，进入站点目录，我这里是<code>E:\Blog\blog5</code><br>第四条指令<code>hexo s</code>，启动本地服务器。</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
